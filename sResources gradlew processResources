[33mcommit 47f14bae69f218c2e95a1e4ad5367e9dc8f049ba[m[33m ([m[1;36mHEAD -> [m[1;32mshaw_yeong_changes[m[33m, [m[1;31morigin/shaw_yeong_changes[m[33m)[m
Author: Lou Shaw Yeong <shawyeong94@gmail.com>
Date:   Mon Oct 22 09:47:41 2018 +0800

    Add comments to Messages.java

[33mcommit 686e1a1b1195fb03cc1be98f757bcbb16e6639e9[m
Merge: 1bbb5e82 b4e504c3
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Mon Oct 22 09:38:07 2018 +0800

    Merge from master to shaw_yeong_changes

[33mcommit 1bbb5e827a72822edb01524c92884753ab7f637d[m
Merge: d08b1dc1 1788f498
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sun Oct 21 17:35:01 2018 +0800

    Merge pull request #55 from xiaoyeong/v1.3sy
    
    Update AnalyticsCommand and FinancialDatabaseParser and the class Deadline

[33mcommit 1788f498b6d084b54c21175513591528d0dcea3a[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sun Oct 21 17:33:18 2018 +0800

    update Update AnalyticsCommand and FinancialDatabaseParser and the class Deadline

[33mcommit b4e504c353a3837d8ab0a05045f00b5993788b56[m[33m ([m[1;31morigin/master[m[33m, [m[1;31morigin/HEAD[m[33m, [m[1;32mmaster[m[33m)[m
Merge: 8e0f9bee 32468979
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sun Oct 21 16:08:02 2018 +0800

    Merge pull request #54 from CS2103-AY1819S1-W12-2/aadit_changes
    
    Fix AddCommand and add transaction fields for interest calculation

[33mcommit 324689797d7d1a31233225b0f5be00a261105e0c[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Sun Oct 21 11:29:53 2018 +0800

    Fix AddCommand and add transaction fields for interest calculation
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 3cb928b7235d304f744dbd3b61948b2bcd54be96[m
Merge: e2e94301 8e0f9bee
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sat Oct 20 17:26:50 2018 +0800

    Merge pull request #6 from CS2103-AY1819S1-W12-2/master
    
    branch to v1.3

[33mcommit dd9d0daef4afbbb698ecc8b2bc5e2977fdba2c15[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Fri Oct 19 14:35:15 2018 +0800

    Fix checkstyle bugs
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 8e0f9beebd34c1b1a4613cb65f6e4c458f9b57c4[m[33m ([m[1;33mtag: v1.2[m[33m)[m
Merge: 9c7661d4 c4586b79
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Fri Oct 19 01:11:03 2018 +0800

    Merge pull request #51 from CS2103-AY1819S1-W12-2/aadit_changes
    
    Add currency conversion command

[33mcommit c4586b7989bda9f9128ad3f76669182dfeb4f3c3[m
Merge: aec54e69 9c7661d4
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Fri Oct 19 01:10:40 2018 +0800

    Merge branch 'master' into aadit_changes

[33mcommit aec54e69a33e964af73afc75425ba5a7fecbb6f7[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Thu Oct 18 23:53:17 2018 +0800

    Add currency conversion command
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 92e5bdf74529422bec427ae244caa81731aa5948[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Thu Oct 18 14:34:14 2018 +0800

    Add unit tests for amount and deadline
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 7b40bd6b424048f6cea620f5e7fb20049c2d626e[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Thu Oct 18 12:28:23 2018 +0800

    Format add command instruction
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit ec30b92197d1ec6e4243e5127d2e4211166b2577[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 12:20:05 2018 +0800

    Fix more checkstyle errors
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 2e82bb8e7c4b4556f60a774b42fd08e74346b1e7[m
Merge: e9d1b88e 80fadd6c
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 01:43:48 2018 +0800

    Merge branch 'master' of github.com:CS2103-AY1819S1-W12-2/main into aadit_changes
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>
    
    # Conflicts:
    #       build.gradle
    #       src/main/java/seedu/address/logic/Logic.java
    #       src/main/java/seedu/address/logic/parser/FinancialDatabaseParser.java
    #       src/test/java/seedu/address/logic/commands/CommandTestUtil.java
    #       src/test/java/seedu/address/testutil/PersonBuilder.java

[33mcommit 9c7661d4d67a546f731b705cf665b8842ae2d4c5[m
Merge: 80fadd6c 817a2222
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 00:59:30 2018 +0800

    Merge pull request #50 from weiqing-nic/new
    
    Edit Photo class

[33mcommit 817a22229584829af138d43ebda038bd8bffebd8[m
Merge: 6c954ebf 80fadd6c
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 00:56:24 2018 +0800

    Merge branch 'master' into new

[33mcommit e9d1b88e6630374617061a6f7896761bbbeed0cd[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 00:54:19 2018 +0800

    Fix checkstyle errors
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 80fadd6c16d24b5825cf907063c6c867079a82b6[m
Merge: 75d1f58e acbbb056
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 00:22:22 2018 +0800

    Merge pull request #48 from Bellaaarh/Bella
    
    Add parser for WildcardSearchCommand and ToDoListAddCommand

[33mcommit acbbb05661276d1a312672be9a4eac35c3669512[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Wed Oct 17 00:15:24 2018 +0800

    Style fix. Found Photo.java

[33mcommit 0ed30dd3568878529927e4bd761b5e76d988b51b[m
Merge: ed90f595 75d1f58e
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Wed Oct 17 00:13:44 2018 +0800

    Merge remote-tracking branch 'CS2103-AY-1819S1-W12-2/master' into Bella

[33mcommit 75d1f58e8cfbd40d446840df06f47e40e796360e[m
Merge: 64153601 d08b1dc1
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 17 00:07:12 2018 +0800

    Merge pull request #49 from CS2103-AY1819S1-W12-2/shaw_yeong_changes
    
    fixed AnalyticCommand

[33mcommit ed90f59582c448fcb78b976f5425e455a234a444[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Wed Oct 17 00:00:54 2018 +0800

    Fix style again. Cannot find Photo.java

[33mcommit 6c954ebfe8f176a18618d03ef3b335e6ccff0612[m
Merge: ab25e746 64153601
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:58:16 2018 +0800

    Merge branch 'master' into new

[33mcommit d08b1dc1a6db64f6d1438928242fd5fa5cf7311c[m
Merge: 695642fb 64153601
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 23:53:16 2018 +0800

    Merge branch 'master' into shaw_yeong_changes

[33mcommit 53185680af8685abdaba5f6b4fa957c1dd204a28[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 16 23:52:06 2018 +0800

    Fixed style

[33mcommit 6415360193cab7ec6b84fbc8f4d8ea16fd804967[m
Merge: bc28dbe5 881b5b35
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 23:47:04 2018 +0800

    Merge pull request #47 from CS2103-AY1819S1-W12-2/wei_qing_changes
    
    Add Photo Class

[33mcommit 695642fb756afc5017660c85ff6fb3093c035155[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 23:46:16 2018 +0800

    Delete AdvanceAnalyticsCommand.java

[33mcommit ab25e74693b08bd6375d16f36eb08f7597886a84[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:45:35 2018 +0800

    Styling Changes

[33mcommit 013b1f4267305a30df0c5bf93a8e91e0e1ab1500[m
Merge: b4a210de bc28dbe5
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 16 23:37:22 2018 +0800

    Merge remote-tracking branch 'CS2103-AY-1819S1-W12-2/master' into Bella
    
    # Conflicts:
    #       src/main/java/seedu/address/logic/parser/CliSyntax.java
    #       src/main/java/seedu/address/logic/parser/FinancialDatabaseParser.java
    
    Conflicts resolved.

[33mcommit b4a210de9ea475da7481cac99797b5e05aa57f25[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 16 23:21:41 2018 +0800

    Update TO_DO_LIST_PREFIX in CliSyntax
    Add parser for ToDoListAddCommand and WildcardSearchCommand.java
    Slight change to ToDoList.fxml

[33mcommit 49f2ff1fa438a09b6f2afacd3718c8d391b1c35c[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:16:31 2018 +0800

    Merge changes

[33mcommit 679fde547a1503008abf8876fa42f14de1d2ba84[m
Merge: d7584b77 62ae91b7
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:15:34 2018 +0800

    Merge branch 'new' of https://github.com/weiqing-nic/debt-tracker into new

[33mcommit 62ae91b7be5ee063260e9a6d45587902dc3600ec[m
Merge: 18aeb6b1 bc28dbe5
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:13:55 2018 +0800

    Merge pull request #6 from CS2103-AY1819S1-W12-2/master
    
    merge

[33mcommit d7584b770695f626ccf7a555f78f851241323878[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 23:13:03 2018 +0800

    Save work

[33mcommit bc28dbe52535fd15ff80be077b5d0efa77deba89[m
Merge: 65397c43 d1118392
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Tue Oct 16 21:46:40 2018 +0800

    Merge pull request #46 from CS2103-AY1819S1-W12-2/aadit_changes
    
    Changes to tests to handle transactions

[33mcommit d1118392e01ffc9f95f20bef41b85d8f67da5069[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 21:29:54 2018 +0800

    Add explanatory comments to the CalendarManager class
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 44d7ed365d64023469c5d62e2134abf3cd884fee[m[33m ([m[1;31morigin/julian_changes[m[33m)[m
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 20:42:17 2018 +0800

    Update tests: refactoring and compile error fixes

[33mcommit 9bf7f4b251a7a9e6f4f8b12172966059e629757c[m
Merge: a3b7e6e1 e2e94301
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 19:41:37 2018 +0800

    Merge pull request #44 from xiaoyeong/v1.2
    
    add new Command, AdvanceAnalyticsCommand.java

[33mcommit 0902867cd369df29d35753c5c9d834c93bd5585a[m
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 19:39:36 2018 +0800

    Update TransactionListPanel.fxml and TransactionCard.fxml

[33mcommit e2e94301f218467b842328fc2293a800919dab9a[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 19:38:41 2018 +0800

    Add a new command, AdvanceAnalyticsCommand.java

[33mcommit 155be51344d117a05433a7edc194dc523d008e02[m
Merge: cdbb3b86 103b1145
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 19:18:35 2018 +0800

    Merge branch 'aadit_changes' into julian_changes

[33mcommit 103b11450d56093291989e4b9d791b8be25a820a[m
Merge: 6d4779c7 cdbb3b86
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 19:18:15 2018 +0800

    Fix Merge Conflicts

[33mcommit 6d4779c7582ee2d1a4afaeaf89d78fb94771e150[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 17:31:44 2018 +0800

    Modify tests to handle transactions
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 826bb00652eca8c9bbdd92f35129a8b826973d90[m
Merge: 726e9b1b dd907ab3
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 16:02:35 2018 +0800

    Merge remote-tracking branch 'origin/aadit_changes' into aadit_changes

[33mcommit 726e9b1bf4b8f2138b63e63ca6788ff805dc824e[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 16:01:29 2018 +0800

    Modify commands and system as well as GUI tests to handle transactions
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 644e8a081d2b21d5818e735a9aed58ba397ff10b[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 15:40:45 2018 +0800

    Tag author xiaoyeong to AnalyticsCommand

[33mcommit 881b5b353079317096d729beb0793798155f9357[m[33m ([m[1;31morigin/wei_qing_changes[m[33m)[m
Merge: 65397c43 18aeb6b1
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 14:28:44 2018 +0800

    Merge pull request #42 from weiqing-nic/new
    
    Add Photo to Model

[33mcommit 18aeb6b179b052f95cf94a06d172ee94a072eaf3[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 16 14:23:45 2018 +0800

    Add Photo to Model

[33mcommit cdbb3b865f79e39eaafcf6b502e027d60aedceb4[m
Merge: 65397c43 e82d6e2e
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 13:18:57 2018 +0800

    Merge pull request #40 from julianc269/master
    
    Add Google Calendar Integration and Reposense Config File

[33mcommit ac5d033a95ac5dba52630bcebf9af108d7670230[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 12:51:03 2018 +0800

    Change model to handle transactions instead of persons
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit a3b7e6e13aaa5528c989c5d076dc1630fc0cd80b[m
Merge: 65397c43 32d04286
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 16 12:24:18 2018 +0800

    Merge pull request #41 from xiaoyeong/v1.2
    
    Update AnalyticsCommand and FinancialDatabaseParser

[33mcommit e82d6e2ea0e3728a2fae06cd594bd4d3ee51d741[m
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 04:09:33 2018 +0800

    Fix Import Statements

[33mcommit 5c9b082eccb049d9fd21b00c6050893e343a403f[m
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 04:01:54 2018 +0800

    Add Reposense Config File

[33mcommit cc749e46d3da89a3eccdbf8430774cdf00aed745[m
Author: julianc269 <julian_269@hotmail.com>
Date:   Tue Oct 16 03:55:57 2018 +0800

    Add CalendarCommand and CalendarManager

[33mcommit c915f72a610b44dba811e8af27ab2830a908cb85[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 16 03:08:42 2018 +0800

    Modify tests to handle transactions in place of persons
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit d4efa32637571dab6934ffdd8cbbc27809b9c531[m
Merge: 65397c43 0ef87c43
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Mon Oct 15 09:07:01 2018 +0800

    Remove Java API docs for the projects and modify xml file structures

[33mcommit 3bc535323ddcc960c0a528da5986b83004c954d2[m
Merge: 73f97a09 65397c43
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Mon Oct 15 19:15:22 2018 +0800

    Merge pull request #3 from CS2103-AY1819S1-W12-2/master
    
    Bring repo up to date

[33mcommit dd907ab3df041de569dbc8cfa64316dd96646b27[m
Merge: 65397c43 0ef87c43
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 15 09:07:01 2018 +0800

    Merge pull request #39 from aaditkamat/add_commands
    
    Fix checkstyle bugs

[33mcommit 0ef87c439c6cb4cb2e2c3871a7d5886faeee73f1[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 15 09:05:13 2018 +0800

    Fix checkstyle bugs
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 32d04286214364d7de4d511c7b01b1777027b0c0[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sat Oct 13 15:00:32 2018 +0800

    update AnalyticsCommand and FinancialDatabaseParser

[33mcommit a5ae6e93f8b63cfe6b8699a0862a6017ccefc561[m
Merge: 40e09fb6 65397c43
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Thu Oct 11 09:29:12 2018 +0800

    Merge pull request #5 from CS2103-AY1819S1-W12-2/master
    
    merge to v1.1sy

[33mcommit 65397c438b38a5c8d2e7a584bcc8df7295b7a486[m[33m ([m[1;31morigin/ysabella_changes[m[33m)[m
Merge: ae3cb101 1d4546a0
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:12:26 2018 +0800

    Merge pull request #36 from aaditkamat/add_commands
    
    Add transaction deadline and implement currency exchange in amount class

[33mcommit 1d4546a03cff59886054993836e6b37948b1ddcd[m
Merge: c9d4508c ae3cb101
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:11:44 2018 +0800

    Merge branch 'master' into add_commands

[33mcommit c9d4508c2a2360eb02b7fc68c47f80d3bec3776f[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:10:43 2018 +0800

    Update and rename WildCardSearch.java to WildCardSearchCommand.java

[33mcommit 589f549d13906673645b0d37e7f80c2380f33fc7[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:09:18 2018 +0800

    Update CliSyntax.java

[33mcommit ae3cb101cd4a74f16cd38140c27c5bbd8460123d[m
Merge: 6f7bb281 2875e17d
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:04:03 2018 +0800

    Merge pull request #35 from Bellaaarh/master
    
    Update colour scheme for Debt Tracker GUI

[33mcommit 2875e17dd64195f878eb8f6b756e53b77c69c63d[m
Merge: 7effe092 6f7bb281
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:03:46 2018 +0800

    Merge branch 'master' into master

[33mcommit 6f7bb281f25b872c5e224b650ebfcf69b8da7b93[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Oct 10 00:03:01 2018 +0800

    Resolve merge conflict between WildcardSearch and WildcardSearchCommand

[33mcommit 9b1a27681fa17320a930086c39cdb5f0eedd9465[m
Merge: 756d8cfa 40e09fb6
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 9 23:54:23 2018 +0800

    Merge pull request #28 from xiaoyeong/v1.1sy
    
     Edit the file in UploadPhotoCommand

[33mcommit 7effe09267eac43fab8d5ae3a779f63fe9b67d3c[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 23:52:32 2018 +0800

    Add ToDoList.fxml for GUI, ToDoList.java and ToDoListAddCommand.java . Update CliSyntax with Prefix message for ToDoListAddCommand.java .

[33mcommit d405e41759fead4ffa8664a0adaf99f9cde0dbc1[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 23:51:29 2018 +0800

    Update colour of GUI

[33mcommit 756d8cfa13ab94b242b88ea480450ffdbf0e01d0[m
Merge: b614c4b4 e3a6dcff
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 9 23:50:45 2018 +0800

    Merge pull request #34 from weiqing-nic/new
    
     Change the UniqueId to alphabet and increase the length to 256 characters

[33mcommit 21ed2de54a579924075a6f29790667e398f91e1c[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 9 23:23:37 2018 +0800

    Fix some checkstyle issues
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit e3a6dcffb80d546efd90877917d7720fc1a88f38[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 9 23:04:59 2018 +0800

    Increase the number of alphabet for uniqueId from a-Z

[33mcommit 6af120176a9bfedd09f4a85ecba06a823171b123[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 9 23:00:15 2018 +0800

    Add transaction deadline and implement currency exchange in Amount
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit de63407adf71a825e31c5ff14a73367d7b70bd6c[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 9 22:40:34 2018 +0800

    Amend the styling

[33mcommit 0aecc48886a0546d2adb343b8260525747d1afbf[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 9 22:14:38 2018 +0800

    Increase the number of alphabet for uniqueId

[33mcommit 3da90d8b20f87545061f0e21b894bfc6b0f94a89[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 21:16:46 2018 +0800

    Remove trailing whitespace from lines 67 and 68 in UserGuide.adoc

[33mcommit 46ae60cdf29d7b3a262319f50df1f0f01e4afa4b[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 21:08:05 2018 +0800

    Add new line to EOF for FieldType.java and UniqueId.java

[33mcommit 8fc384fa11d9f618ec1e424afe33af6519b8eff4[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:57:40 2018 +0800

    Add new line to EOF of Mode.java

[33mcommit 4dce2d75f8649c5b96efa1575aede42093f6d017[m
Merge: e7626e95 b614c4b4
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:49:44 2018 +0800

    Merge branch 'master' of https://github.com/CS2103-AY1819S1-W12-2/main
    
    # Conflicts:
    #       src/main/java/seedu/address/logic/commands/WildcardSearchCommand.java
    Resolve conflict

[33mcommit e7626e95d62d0eff10299e70348e38f287351e02[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:30:23 2018 +0800

    Correct mistake in WildcardSearchCommand.java so program can be compiled now
    Delete extra new line at EOF of Model.java

[33mcommit fcedd591a2433755301e8b91a24bd43290bc22b3[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:15:35 2018 +0800

    Revert "Revert "Change WildcardSearch.java to WildcardSearchCommand.java""
    
    This reverts commit ea3668e38d4abfec20400d088defb6b066548880.

[33mcommit ea3668e38d4abfec20400d088defb6b066548880[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:14:53 2018 +0800

    Revert "Change WildcardSearch.java to WildcardSearchCommand.java"
    
    This reverts commit 9f9fd6693d411f82a123bd7ac58312fa7a3a8a4c.

[33mcommit 9f9fd6693d411f82a123bd7ac58312fa7a3a8a4c[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 20:14:23 2018 +0800

    Change WildcardSearch.java to WildcardSearchCommand.java
    Add new lines at EOF for Model.java and WildcardSearchCommand.java

[33mcommit fd4a6e65f4ffdb71bf19e4b43e35591d8b207adb[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 9 19:53:29 2018 +0800

    Update colour scheme for Debt Tracker GUI

[33mcommit 40e09fb62442a4b9e4d666a3ca65a167bc9491eb[m
Merge: eea64eb1 b614c4b4
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 9 17:43:03 2018 +0800

    Merge pull request #3 from CS2103-AY1819S1-W12-2/master
    
    v1.1.1

[33mcommit a8879a4a46334d7094205eb96312402648bdd850[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 8 21:23:22 2018 +0800

    Add unique id

[33mcommit 03f4d76b1b3400310703e951d876ef47d2434253[m
Merge: 82b500e8 b614c4b4
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 8 19:56:38 2018 +0800

    Merge pull request #5 from CS2103-AY1819S1-W12-2/master
    
    merge with latest code

[33mcommit 82b500e87f9eaa51289e449d90773f7dc2bb1521[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 8 19:50:31 2018 +0800

    Revert "Add UniqueId"
    
    This reverts commit a71bc878276a0f09fdf4e494e480ac93b0b114fd.

[33mcommit 99bd365e89cf44b13e71e24d9e41423429b26949[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 8 19:49:43 2018 +0800

    Revert "Add Unique Id"

[33mcommit b614c4b45d43cb465ec3cd20e3a77850b692e631[m[33m ([m[1;33mtag: V1.1[m[33m)[m
Merge: fef4ac7c 16282697
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Sun Oct 7 18:59:57 2018 +0800

    Merge pull request #33 from julianc269/transactions
    
    Transactions Implementation

[33mcommit 162826972b6f63b48178b6d6d90a930cf91054ec[m
Author: unknown <julian_269@hotmail.com>
Date:   Sun Oct 7 16:32:29 2018 +0800

    Fix Merge Conflict

[33mcommit 6e2bcb01a5f4eeef676c1d2b77aa29d76322a31a[m
Author: unknown <julian_269@hotmail.com>
Date:   Sun Oct 7 16:30:25 2018 +0800

    JUnit Test Fixes

[33mcommit 90aaaa3f0fb5751f520fb31aa78f2123c96173a8[m
Author: unknown <julian_269@hotmail.com>
Date:   Sun Oct 7 11:52:25 2018 +0800

    Implement transactions

[33mcommit 37b9bd81f6ec92a4da5767f2045ccfc1f0bc18a2[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sun Oct 7 03:52:10 2018 +0800

    Add Unique Id

[33mcommit a71bc878276a0f09fdf4e494e480ac93b0b114fd[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sun Oct 7 03:37:54 2018 +0800

    Add UniqueId

[33mcommit e5b95dba721f4e16281f3776ddb0ec5f3f44de4b[m
Merge: 83699f1e fef4ac7c
Author: Bellaaarh <42434959+Bellaaarh@users.noreply.github.com>
Date:   Sat Oct 6 20:47:42 2018 +0800

    Merge pull request #1 from CS2103-AY1819S1-W12-2/master
    
    Pull request

[33mcommit 68ab133f98dd4318c5ba4e5b2333261f57d67512[m
Merge: c45f9cdd 75c5e88d
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sat Oct 6 20:21:03 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit c45f9cdd12e97577d77d51b3548d25084df6d5fd[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sat Oct 6 20:19:28 2018 +0800

    Add shell file for gradle

[33mcommit 75c5e88d2246a159a9440c2a9fe530f59b173834[m
Merge: c3c51925 fef4ac7c
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sat Oct 6 20:19:12 2018 +0800

    Merge pull request #3 from CS2103-AY1819S1-W12-2/master
    
    merge from master

[33mcommit fef4ac7c67b4ed4f4ca43b10ea9ed3956d6710bb[m
Merge: acb682cb 73f97a09
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Sat Oct 6 20:18:28 2018 +0800

    Merge pull request #32 from julianc269/master
    
    Minor Fixes: Compilation Errors

[33mcommit 73f97a090648c9a2bc2d28c78a0525cd9cfb9e68[m
Author: unknown <julian_269@hotmail.com>
Date:   Sat Oct 6 20:01:49 2018 +0800

    Minor Fixes

[33mcommit 92f096eb3ac884f98e83611243aeada2d41a3414[m
Merge: 4648e436 acb682cb
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Sat Oct 6 19:51:23 2018 +0800

    Merge pull request #2 from CS2103-AY1819S1-W12-2/master
    
    Bring repo up to date

[33mcommit c3c51925023297665f9782460cf5ca038ca003a7[m
Merge: e5b09bbe acb682cb
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sat Oct 6 17:10:21 2018 +0800

    Merge branch 'master' of https://github.com/CS2103-AY1819S1-W12-2/main

[33mcommit e5b09bbedf341c519d5d0874e20b4243ed3a6509[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Sat Oct 6 17:08:41 2018 +0800

    Merge to master

[33mcommit eea64eb13f8928d11550b0703f508ca00a7bea24[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sat Oct 6 16:50:08 2018 +0800

    Edit the file in UploadPhotoCommand

[33mcommit acb520bd318c813e04111b87b9c1be3be34322d7[m
Merge: 5f2031f8 acb682cb
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Sat Oct 6 16:32:11 2018 +0800

    Merge pull request #2 from CS2103-AY1819S1-W12-2/master
    
    v1.2

[33mcommit c24f046c5799020e63c2de809f5f11e34a12e8bb[m
Merge: 547d801f d2e1867b
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 2 21:27:09 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 547d801f3e1bba7b496ec8aa4809e22c017f73ab[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 2 21:26:50 2018 +0800

    Change profile image for aaditKamat

[33mcommit acb682cb7383a246120b58e7bef6ee8722b32104[m
Merge: f2d02391 22a85050
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 21:18:43 2018 +0800

    Merge pull request #20 from xiaoyeong/v1.1sy
    
    Amend image filenames in AboutUs.adoc

[33mcommit 22a850507bb9836eb8c8195bff23e7d933954856[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 21:14:58 2018 +0800

    Add photo of aaditkamat and xiaoyeong

[33mcommit 3c9aad10bd7faa8606552fc1c86dfaba1c8c7752[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 20:48:16 2018 +0800

    Add changes to some tests to use Transaction model
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit fba423b74d40f84d9e00b4c9cd314f166be226dd[m
Merge: a54f0e53 a82cb320
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 18:06:08 2018 +0800

    Merge branch 'master' of github.com:aaditkamat/debt-tracker

[33mcommit a54f0e5322b2a3885f011c59f1595d3f7a48d273[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:12:15 2018 +0800

    Transition from Person model to Transaction model
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit b2151c02577d5fc5febb5d2b1fe1260177e938a6[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 01:20:31 2018 +0800

    Add transaction component to add command and its parser
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 4f0bf12045c872a0072f1202c124d707cfc05cb7[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 01:04:39 2018 +0800

    Parse transaction details from command line arguments to add command
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 688899b9d5b2607f71d66464ef515af8ad67b0fe[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 00:23:02 2018 +0800

    Implement transaction in debt tracker database
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit f2d023910c5f69da72b2c1b7250a98317ec390e6[m
Merge: 2df8ff8c 80e15dfe
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:54:27 2018 +0800

    Merge pull request #17 from Bellaaarh/Ysabella
    
    Add WildcardSearch.java and NameContainsLettersPredicate.java

[33mcommit 2df8ff8cd7ffb4c80b16a359e231a749f002776d[m
Merge: 7dd553e5 310187e8
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:47:52 2018 +0800

    Merge pull request #15 from xiaoyeong/v1.1sy
    
    Add new command "AnalyticsCommand" .

[33mcommit 7dd553e5738b6bfffa996d312bda75c803e98579[m
Merge: 44e1d053 d2e1867b
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:46:45 2018 +0800

    Merge pull request #16 from weiqing-nic/master
    
    Partial Complete code for Picture

[33mcommit d2e1867bb5d7a85bf0b2f3256437ca9ad0a52677[m
Merge: 26345d3c 44e1d053
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:46:29 2018 +0800

    Merge branch 'master' into master

[33mcommit 44e1d0534bdf0c7765040433cab944abb51adfd1[m
Merge: acc422eb 4648e436
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:35:45 2018 +0800

    Merge pull request #18 from julianc269/master
    
    Add FilterCommand, Renamed Image

[33mcommit a82cb320471487c0ce53f7ebae4179f7cc05e893[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 17:12:15 2018 +0800

    Transition from Person model to Transaction model
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 80e15dfe22cb53416ae68134f347c08dc835b102[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 2 02:56:39 2018 +0800

    Update User Guide v1.1

[33mcommit 4648e4366afbb33141ab98a87bf97717059447b2[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Oct 2 02:52:01 2018 +0800

    update developer guide: filter command

[33mcommit cbd0583c15619f98305a074f121dd01fe5031bba[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Oct 2 02:36:22 2018 +0800

    adhere to CheckStyle coding standards

[33mcommit 26345d3c0fe1571c6c2d8b1ab813a02bad71a40b[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 2 02:32:07 2018 +0800

    Edit Developer Guide

[33mcommit c5e81b1c2d486017f4de3698e27729a924bcc7d3[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Oct 2 02:17:51 2018 +0800

    rename image: julianc269.png

[33mcommit 56a7c9d56a9b9bd3c3b0e32ff2e2cd08cfab93fd[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Oct 2 02:17:25 2018 +0800

    add FilterCommand

[33mcommit a82d0a6177c16aee140f23ad68d784162ab84968[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Oct 2 01:32:49 2018 +0800

    Partial Complete code for Picture

[33mcommit 310187e8fc6b1a4dd03d1a62c243d4c28211867e[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 01:29:22 2018 +0800

    edit to fit the guideline of checkstyle

[33mcommit fc9b193339119c93907453d8ae52d9e69673ab1f[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 2 01:23:41 2018 +0800

    Add new line to the bottom of WildcardSearch.java and NameContainsLettersPredicate.java

[33mcommit 28783f577741f0a9ff5f9f08799ede5dca79e498[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Oct 2 01:22:18 2018 +0800

    Create WildcardSearch.java and NameContainsLetterPredicate.java to implement WildcardSearch function.

[33mcommit e141d71097d89780e2075f9182ddf73e73371947[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 01:20:31 2018 +0800

    Add transaction component to add command and its parser
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 240a9d01f4a4217dc3d13675fce9ac1efb6abeb3[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 01:04:39 2018 +0800

    Parse transaction details from command line arguments to add command
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 8976e6a438094bdc59cd4f6ef6ddab0c552970ba[m
Merge: ef92fb77 7561f935
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 00:57:54 2018 +0800

    Merge branch 'v1.1sy' of https://github.com/xiaoyeong/addressbook-level4 into v1.1sy

[33mcommit ef92fb775b676c7910d28dc1f5064435c0942fd7[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 00:54:10 2018 +0800

    Revert "edit photo of xiaoyeong to fit the requirement"
    
    This reverts commit 6b38db041232089fc9ebf0082f6cb924643c3ae3.

[33mcommit 7561f935d824ce39a2bdc2fb21d56ebe1f14a2e3[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 00:54:10 2018 +0800

    Revert "edit photo of xiaoyeong to fir the requirement"
    
    This reverts commit 6b38db041232089fc9ebf0082f6cb924643c3ae3.

[33mcommit 6b38db041232089fc9ebf0082f6cb924643c3ae3[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 00:50:21 2018 +0800

    edit photo of xiaoyeong to fir the requirement

[33mcommit 358ce83a6cc74f053cf186c09dce604f3d650494[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Oct 2 00:29:42 2018 +0800

    add new command  " AnalyticsCommand".

[33mcommit afa2b9661804ca76cd2c35a2af5b79036c9f88b5[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Oct 2 00:23:02 2018 +0800

    Implement transaction in debt tracker database
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 41e3fa1d010e599a400f149f789d4facdd17ad54[m
Author: unknown <julian_269@hotmail.com>
Date:   Mon Oct 1 23:53:40 2018 +0800

    remove image: julian.jpg

[33mcommit 8499d08f3caa55b6978d1c5b7d5075291093570a[m
Merge: e0323ed7 acc422eb
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Mon Oct 1 23:50:30 2018 +0800

    Merge pull request #1 from CS2103-AY1819S1-W12-2/master
    
    update local repo

[33mcommit 5f2031f8dacb7319aab249cfdf2679ba1bc035dc[m
Merge: 83699f1e acc422eb
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Mon Oct 1 22:40:27 2018 +0800

    Merge pull request #1 from CS2103-AY1819S1-W12-2/master
    
    v1.1

[33mcommit acc422eb362457ece12ab830ecfeffb773a8a101[m
Merge: c09fad1e acef09f5
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 20:23:18 2018 +0800

    Merge pull request #13 from weiqing-nic/master
    
    Add new lines

[33mcommit acef09f54d41c4b3a69aa54132630a780e11db99[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 19:38:38 2018 +0800

    Add new lines

[33mcommit c09fad1eb2d0213b515a94e9de3cb6bddbac1417[m
Merge: 7d3f733a f20cc1f8
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 19:33:09 2018 +0800

    Merge pull request #10 from aaditkamat/master
    
    Add API documentation for existing codebase

[33mcommit 7d3f733aa05d15873947877d97ce46d4c95015a8[m
Merge: 25c5bfea 22229393
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 19:32:45 2018 +0800

    Merge pull request #11 from Bellaaarh/Ysabella
    
    Add Ysabella's picture and information to AboutUs.adoc

[33mcommit 22229393eea6510356168f352df00ccada035446[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 19:32:16 2018 +0800

    Rename image file

[33mcommit b1bbeed558b50618ad664b8b6cc1306c9d7971bb[m
Merge: 72c7a26b 25c5bfea
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 19:27:51 2018 +0800

    Merge branch 'master' into Ysabella

[33mcommit 25c5bfeaf8abcc88b7bfcc0800b7e16aba28b855[m
Merge: 7d8460e0 9f83f816
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Mon Oct 1 19:25:20 2018 +0800

    Merge pull request #12 from weiqing-nic/master
    
    Change UI picture on AboutUs to png and add github profile link

[33mcommit 9f83f816e2e0e39392b6981a24ca8f6c89d1939e[m
Merge: 194cbb92 d4592a0a
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 19:22:57 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 194cbb924c4bc74b23d1a4610175e6c72dde5b0f[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 19:21:12 2018 +0800

    Change email

[33mcommit 9b6e405ca69eb44ae20d5393ab0286361f803ae6[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 19:16:53 2018 +0800

    File Changes to ContactUs and remove Contact Us

[33mcommit d4592a0a3375d6af6fadab86d780521efee42331[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 19:15:03 2018 +0800

    File Changes to ContactUs and remove Contact Us

[33mcommit 72c7a26b246ac4f56d6008f27f6227402c27c735[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:48:46 2018 +0800

    Removed previous AboutUs.adoc that did not have newline at the end

[33mcommit 9b7d3483ef2f033e6aaa755c60924d2c4af9dd56[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:45:09 2018 +0800

    Update of AboutUs.adoc: Change Ysabella.png to bellaaarh.png

[33mcommit 70d6553dbbdfb7623e5e4e094c68f28c599a0cd4[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:43:46 2018 +0800

    Update name of Ysabella.png to bellaaarh.png

[33mcommit a8934c0993c8d2a2631edbdb92e80d2802a582d0[m
Merge: 0d7d86be 65b3173b
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:41:05 2018 +0800

    Merge branch 'Ysabella' of https://github.com/Bellaaarh/addressbook-level4 into Ysabella
    
    # Conflicts:
    #       docs/AboutUs.adoc

[33mcommit 0d7d86bee8e8af087e0fb58d14360c194c490c74[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:32:42 2018 +0800

    Update in AboutUs.adoc from Ysabella.jpg to Ysabella.png

[33mcommit 90dffac6bae5a346f1bf50ac7c4d77ac89e850d8[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 17:31:38 2018 +0800

    Update Ysabella.jpg to Ysabella.png

[33mcommit 22f860c1a7820c143121756ffe4c8cc691c40d76[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:24:47 2018 +0800

    Change image extension

[33mcommit acf62472e41b80652ae1c5a4ae8bcef1e15c10a9[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:18:20 2018 +0800

    Change image to png

[33mcommit 6c35a6073f2ae0f9f89092e75bd853e0a3c193f1[m
Merge: 00d1181f 2796b18c
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:14:25 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 00d1181fe6186bfb2854e7a7b84863f8b8231ce6[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:14:17 2018 +0800

    Change the github link!

[33mcommit 2796b18caf2a53650dcf1c1516551e7ff5bf0e3f[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:13:49 2018 +0800

    Change the document!

[33mcommit 865b3897406826984cdbbe26b0fa372f58354041[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 13:05:42 2018 +0800

    Merge branch 'CS2103-AY1819S1-W12-2-master'

[33mcommit 2b4b001376641502a4d46f1e9b82513e5207cc60[m
Merge: 70ee89f6 4819e6aa
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 12:56:22 2018 +0800

    Merge branch 'CS2103-AY1819S1-W12-2-master'

[33mcommit 4819e6aac319f2fd22b0d6d7c6a5a3bb47d6e7a7[m
Merge: 70ee89f6 7d8460e0
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Mon Oct 1 12:55:27 2018 +0800

    Merge branch 'master' of https://github.com/CS2103-AY1819S1-W12-2/main into CS2103-AY1819S1-W12-2-master

[33mcommit 65b3173b15516f000d5c68ffa59c88ca300d64b9[m
Merge: c91912b3 7d8460e0
Author: Bellaaarh <42434959+Bellaaarh@users.noreply.github.com>
Date:   Mon Oct 1 10:20:24 2018 +0800

    Merge branch 'master' into Ysabella

[33mcommit c91912b37bbcc62a8b61b777c0718643f589282c[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Mon Oct 1 10:17:13 2018 +0800

    Add Ysabella's picture and information to AboutUs.adoc

[33mcommit f20cc1f8a05a2bb573657e9c13eeb2939056d96a[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Sat Sep 29 22:52:13 2018 +0800

    Add newline at EOF for the js files
    
    Signed-off-by: Aadit <aadit.k12@gmail.com>

[33mcommit c61f65b6f5ed99ff269f31a3f69e3c68b9f3587a[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Sat Sep 29 22:39:23 2018 +0800

    Generate Javadoc for all the classes
    
    Signed-off-by: Aadit <aadit.k12@gmail.com>

[33mcommit 7d8460e082dfff09bfebeeae5765d08ee9312590[m
Merge: d266398b 305fedb1
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Sat Sep 29 17:28:05 2018 +0800

    Merge pull request #9 from aaditkamat/edit-readme
    
    Add images of team members and amend the docs

[33mcommit 305fedb1d5aa4bf323abdd8947e17ffb58c6fbb3[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Sat Sep 29 17:21:13 2018 +0800

    AboutUs.adoc: Amend the about us section
    
    Signed-off-by: Aadit <aadit.k12@gmail.com>

[33mcommit 98f696610eb586f14684e702faa11bc84e87b96e[m
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Wed Sep 19 10:39:27 2018 +0800

    Re-edit the import statement order

[33mcommit cc02378245325162c61cb231b6859b8fb22620bb[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 19 10:18:30 2018 +0800

    Reorder static imports
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 70bc3c0723b5a971a46a3e49ade9c58c33b096ab[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 19 09:59:14 2018 +0800

    Remove johndoe.adoc and make coding style changes
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit e556847300e73ab7b364610e2cf06f629d957833[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:32:05 2018 +0800

    Remove xiaoyeong.jpg (extra image file)
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit ac517ab6ae13dedb07f8467d38fd138b365d463b[m
Merge: 55dd2cdf 34abcea6
Author: aaditkamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:30:43 2018 +0800

    Merge remote-tracking branch 'origin/edit-readme' into edit-readme
    
    # Conflicts:
    #       docs/AboutUs.adoc

[33mcommit 55dd2cdf7a886c0bea7a6113ebeb14dbefc5f097[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:30:08 2018 +0800

    Merge branch 'master' of github.com:cs2103-project-group/debt-tracker into edit-readme
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>
    
    # Conflicts:
    #       docs/AboutUs.adoc

[33mcommit 51438964da207aefa27de1dce37533b93e707df2[m
Merge: 96470f5e d266398b
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:29:26 2018 +0800

    Merge branch 'master' of github.com:cs2103-project-group/debt-tracker into edit-readme
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>
    
    # Conflicts:
    #       docs/AboutUs.adoc

[33mcommit 34abcea6d952009fa898f73f93f9805b39b7da97[m
Merge: 96470f5e d266398b
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:19:00 2018 +0800

    Merge branch 'master' into edit-readme

[33mcommit d266398be94cfbf894e85e8bf5ddd5b8213ac408[m
Merge: f510b75c 666f01cb
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:15:38 2018 +0800

    Merge pull request #4 from xiaoyeong/LouShawYeong
    
    Edit the file base on the requirements of the weekly LO

[33mcommit 666f01cb54051753e78bde22ca9aec1ea2b618e3[m
Merge: 5a330417 f510b75c
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:08:49 2018 +0800

    Merge branch 'master' into LouShawYeong

[33mcommit 5a330417d7b595b42627b2cd94b1fa97c1d42b95[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 23:06:59 2018 +0800

    edit changes request by aadit

[33mcommit f510b75c864d2140d8e7ea1fc28824c35f7d255f[m
Merge: e0c08e03 e0323ed7
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:06:26 2018 +0800

    Merge pull request #8 from julianc269/master
    
    Add Contact, Image and Command Aliases

[33mcommit a9244f09fea4d27d2ea5814fab1ab0b6e7c78b48[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 23:05:26 2018 +0800

    Revert "edit to User Guide"
    
    This reverts commit 18319ae79faf41b349169356b2134fa568e2e456.

[33mcommit d8e217391e2e291feac2834ec379a3ce293c98ae[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 23:04:56 2018 +0800

    Revert "edit Development guide"
    
    This reverts commit c14f67d21f50594eac73e3122b3f9c3f328a1651.

[33mcommit 35e7cf4f184d5fbdd789f9be6a00c17dccb7f435[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 23:04:29 2018 +0800

    Revert "Revert "edit AboutUs""
    
    This reverts commit 0396b9655bc7249af439d936876b3bbe5fb03e60.

[33mcommit 0396b9655bc7249af439d936876b3bbe5fb03e60[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 23:03:50 2018 +0800

    Revert "edit AboutUs"
    
    This reverts commit 82ec932350a9596141fc156753a545e2a7d96f87.

[33mcommit 96470f5e35192a5450fac8d7a805c05736d1a7d4[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 23:00:42 2018 +0800

    Amend the docs
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 29e67c15248ab949d2aa6fd3332754bec1960f4c[m
Merge: e10284ab e0c08e03
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 22:54:53 2018 +0800

    Add images for docs and edit docs as per LO requirements
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit e0323ed755f3aeb40584b7fd7515a091597a6832[m
Merge: beea1ab8 e0c08e03
Author: Julian Cheong <42330762+julianc269@users.noreply.github.com>
Date:   Tue Sep 18 22:16:15 2018 +0800

    Merge branch 'master' into master

[33mcommit 70ee89f6de146c455428f8ea8a0492e27b3f1945[m
Merge: bac66922 6aa375c4
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:11:30 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit bac66922d5e42343a5ba78dcf7103a13e2f4b5c9[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:11:27 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 6aa375c49b13b22e3a3391babf3717e7370fce9b[m
Merge: 0cc06f21 a99956ea
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:10:35 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 0cc06f21594bc516f223636552347e350402d23d[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:09:49 2018 +0800

    Add contact

[33mcommit a99956eaf458b9a887d1c49a3f9e8400477e9bf3[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:06:50 2018 +0800

    Add contact

[33mcommit 4fe020a665d3b6e4b74e76a0490e3d216d2c2de4[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 22:05:15 2018 +0800

    Add contact

[33mcommit e0c08e03219ce2a85830c361e0ccae47524b22cb[m
Merge: 57940f02 949171fb
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 21:58:03 2018 +0800

    Merge pull request #7 from weiqing-nic/master
    
    Add Image!

[33mcommit beea1ab8f8ea6089ba8a7200a6ad5be4221658c2[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Sep 18 21:56:44 2018 +0800

    Add command aliases

[33mcommit c8026dbc280649e9de934074121edffd006bcc56[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Sep 18 21:37:09 2018 +0800

    Add team member image: julian.jpg

[33mcommit 2e17e123e86966c7ca8326cbc9e479164801ca1a[m
Author: unknown <julian_269@hotmail.com>
Date:   Tue Sep 18 21:34:45 2018 +0800

    Add Contact to ContactUs.adoc

[33mcommit 949171fb31593408193f82840d06684f9001d2bc[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 21:24:29 2018 +0800

    Add image

[33mcommit 085bc0210b36c995a66a053069685bd77d189c69[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 21:21:42 2018 +0800

    Add contact Wei Qing

[33mcommit cfb29c006667d5d1bdf095bf250f29d333761a53[m
Merge: 9fbe8aa2 57940f02
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 21:18:10 2018 +0800

    Merge branch 'master' of https://github.com/weiqing-nic/debt-tracker

[33mcommit 9fbe8aa297ca827b3815e8e0b3d1b764cc614a63[m
Author: weiqing-nic <yoweiqing@gmail.com>
Date:   Tue Sep 18 21:17:58 2018 +0800

    Merge pull request #1 from aaditkamat/edit-readme
    
    README.adoc: add second name to team members section in README

[33mcommit 57940f020215568280414d2ce27f9589d9da9bbd[m
Merge: b8468f7a 31b2762e
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 20:51:30 2018 +0800

    Merge pull request #5 from Bellaaarh/Ysabella
    
    README.adoc update (except UI mockup)

[33mcommit 31b2762ea3db2af71583c0da4c2f5db3a1be5f1a[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Sep 18 17:01:49 2018 +0800

    Add docs/images/Ui.jpg

[33mcommit e10284abba2130df623aee01fa63dedd3edda5b1[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 16:40:56 2018 +0800

    Remove codacy badge
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit b8468f7ab2001ac1a2f0d572d736a72993351a2e[m
Merge: a294940e d3bfbc01
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 16:29:59 2018 +0800

    Merge pull request #3 from aaditkamat/edit-readme
    
    Add v1.0 User Guide and Developer Guide to project docs

[33mcommit d3bfbc01ac1e5c7cdcd00e10d6ccb062889a873b[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 16:19:25 2018 +0800

    Remove Lou Shaw Yeong.txt
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit eb98af22726ad1b0279b14aef31c9bd9291263a3[m
Author: DESKTOP-2HNCDPM\Ysabella <e0201472@u.nus.edu>
Date:   Tue Sep 18 15:34:53 2018 +0800

    README.adoc update (except UI mockup)

[33mcommit c14f67d21f50594eac73e3122b3f9c3f328a1651[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 15:29:27 2018 +0800

    edit Development guide

[33mcommit 18319ae79faf41b349169356b2134fa568e2e456[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 15:23:09 2018 +0800

    edit to User Guide

[33mcommit 82ec932350a9596141fc156753a545e2a7d96f87[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 15:05:54 2018 +0800

    edit AboutUs

[33mcommit a9920b90f3519fb407ab2c2eb8b1511c7f3f7477[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 18 15:02:29 2018 +0800

    add image of team member Lou Shaw Yeong
    add the contact information of Lou Shaw Yeong

[33mcommit 5d42ebc0d2396551b96b92f769114ac8482faca3[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Tue Sep 18 01:22:15 2018 +0800

    Add v1.0 User Guide and Developer Guide to project docs
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit a294940ec303c4472d548bab5dfd6e43af4eafa1[m
Merge: 7f3b6b38 fb8eaa28
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 12 11:35:09 2018 +0800

    Merge pull request #1 from aaditkamat/edit-readme
    
    README.adoc: add second name to team members section in README

[33mcommit fb8eaa283acd15e85b76015a868c2bf9f18c1581[m
Merge: 6b5ab753 7f3b6b38
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 12 11:33:53 2018 +0800

    Merge branch 'master' of github.com:cs2103-project-group/debt-tracker into edit-readme
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>
    
    # Conflicts:
    #       README.adoc

[33mcommit 7f3b6b381efc4dd92557970257f39b57a9d0ca75[m
Merge: 5383298a 88707da1
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 12 11:20:23 2018 +0800

    Merge pull request #2 from xiaoyeong/LouShawYeong
    
    Add team member name to README

[33mcommit 88707da1da1d9a00176de0f38c3635fac9eed43c[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Wed Sep 12 00:22:29 2018 +0800

    Add new line in README.adoc

[33mcommit 6b5ab75305df0647a8fd628a4992d6b88fc13ce2[m
Author: Aadit Kamat <aadit.k12@gmail.com>
Date:   Wed Sep 12 00:07:48 2018 +0800

    Add name to team members section in README
    
    Signed-off-by: aaditkamat <aadit.k12@gmail.com>

[33mcommit 5383298a0ba19243fabb28e5621a6ba4c604b43c[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sat Sep 8 05:23:50 2018 +0800

    DeveloperGuide: update "Setting up" section
    
    Due to an ongoing issue[1] with some of the newer versions of IntelliJ,
    the IDE may report code errors for JAXB or JavaFx APIs depending on the
    Intellij Edition being used, although the code can be build and run
    successfully since we have already imported the dependencies through
    gradle.
    
    This may cause confusion amongst users.
    
    Let's update the "Setting up" section to address this issue, and how
    to resolve it.
    
    [1]: https://youtrack.jetbrains.com/issue/IDEA-189060

[33mcommit 0d9c9e02e895e2b6bc1320a579b9e0300e60eb1c[m
Author: Lou Shaw Yeong <39236896+xiaoyeong@users.noreply.github.com>
Date:   Tue Sep 11 17:29:50 2018 +0800

    Add a file "Lou Shaw Yeong"

[33mcommit 4bc8fdce4ccffdd3cb9bc8cf6a6fde86338e4db5[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Sep 8 00:49:05 2018 +0800

    HelpWindowTest: fix bogus "focus on another stage" code
    
    When run in head-full mode, HelpWindowTest fails with the following
    exception:
    
        seedu.address.ui.HelpWindowTest > focus_helpWindowNotFocused_focused FAILED
            java.lang.AssertionError at HelpWindowTest.java:64
    
    The line in question is from the following:
    
        assertFalse(helpWindow.getRoot().isFocused());
    
    which comes right after:
    
        // Focus on another stage to remove focus from the helpWindow
        FxToolkit.setupStage(Stage::requestFocus);
    
    However, despite what the comment claims, the call to
    FxToolkit.setupStage(...) does not "focus on another stage". This is
    because the Stage registered with TestFX is the HelpWindow stage itself.
    In other words, we are just requesting the HelpWindow to focus itself,
    which is the complete opposite of "removing focus from the helpWindow".
    
    This "focus on another stage" code was written in 1c6071fa
    (HelpWindowTest: fix failing test in non-headless mode, 2018-04-16). At
    that point in time, the stage registered with TestFX _was_ "another
    stage"[1] and so the code was correct. However, in a42ededd (Fix
    stalling HelpWindowTest, 2018-06-26) this was changed such that the
    stage registered with TestFX is the HelpWindow stage itself. Yet, the
    code was not modified to properly operate in the new world order[2].
    
    Fix this piece of code by creating a temporary stage to focus on, so
    that the goal of "removing focus from the helpWindow" is properly
    achieved.
    
    [1]: Somewhat-ish. The full story can be found in a42ededd (Fix stalling
         HelpWindowTest, 2018-06-26).
    
    [2]: And obviously, the author did not run tests in head-full mode :-S

[33mcommit 83699f1e96c2a9392dafaf3196091bc7df96d645[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 15 15:11:29 2018 +0800

    checkstyle: add SingleSpaceSeparator
    
    Most of the code in our the code base only puts a single space between
    non-whitespace characters,
    
        "Like " + "this."
    
    It is highly likely that there will not be a case where we will need to
    put more than a single space between non-whitespace characters,
    
        "Like "  + "this."
    
    To enforce consistency throughout the code base, let's add the
    SingleSpaceSeparator module to our checkstyle configuration, and fix all
    of the existing violations in our code base.

[33mcommit 385809b3d4967bd0a225223f70a3ef3e77cbae3d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Aug 16 20:01:17 2018 +0800

    AddCommandSystemTest: remove outdated comment
    
    The bug mentioned in the comment refers to this comment that was in
    AddressBook.java:
    
        // TODO: the tags master list will be updated even though the below line fails.
        // This can cause the tags master list to have additional tags that are not tagged to any person
        // in the person list.
    
    which was added in 1eb8b138 (teach classes in Model to execute edit,
    2016-12-13).
    
    However, the bug was fixed in d51894a8 (AddressBook: remove master tag
    list, 2018-03-29).
    
    So, this comment is not relevant any more. Let's remove it.
    
    No other changes will need to be done to the test case itself: any tag
    will be suitable for this test case, since HOON himself does not have
    any tags.

[33mcommit 5fedf269242b3437cd87288abc8bce879bf71321[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 15 21:32:33 2018 +0800

    ModelManager: remove synchronization from methods
    
    Synchronized methods are only useful when multiple threads could access
    the same object at the same time[1].
    
    However, when our application is run, only the JavaFX application thread
    should have access to the model. When running GUI tests, the main thread
    (running the tests) and the JavaFX application thread will both have
    access to the model, but the synchronization implemented internally in
    TestFX should ensure that only one thread accesses the model at any
    given time.
    
    As such, the model does not require synchronization. If any of the above
    conditions do not hold, it is a bug and should be fixed directly, not
    papered over by adding locks. Depending on the JVM's implementation
    details and whether is having a good or bad day, such careless use of
    synchronization could lead to a performance penalty[2].
    
    So, let's remove the synchronization from ModelManager's methods, and
    remove the synchronization requirement from its javadoc.
    
    [1]: But even then, they're not a silver bullet.
    [2]: https://stackoverflow.com/a/8524882

[33mcommit 618e597ff145ff6881d0ebaa7944b0bb7a63c9df[m
Merge: d96c9451 d655a2eb
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 15 10:44:45 2018 +0800

    [#856] Remove unnecessary uses of `this` (#903)
    
      [1/2] Remove unnecessary uses of `this`
      [2/2] XmlAdaptedPerson#toModelType(): remove shadowing of fields

[33mcommit d655a2eb64017e1148c24bc583048f687615f6dd[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 14 22:28:23 2018 +0800

    XmlAdaptedPerson#toModelType(): remove shadowing of fields
    
    The method body references the fields of XmlAdaptedPerson (`name`,
    `phone`, etc.), but also shadows them later on by declaring local
    variables with the same name.
    
    Such mixing of instance fields and local variables within the same
    method is out of the ordinary in the code base, and can be accidentally
    mis-read if the reader is not paying attention.
    
    Let's take the path of least surprise by renaming the local variables
    such that they do not shadow XmlAdaptedPerson's fields.

[33mcommit 4e0d182148877c022f734a172fb44e8bcba5b75c[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 14 19:34:13 2018 +0800

    Remove unnecessary uses of `this`
    
    According to our Java coding standard[1], we should only use the `this`
    keyword when the field is shadowed by a method or constructor parameter.
    
    So, let's remove all unnecessary uses of `this` from our code base.
    
    [1] https://oss-generic.github.io/process/codingStandards/CodingStandard-Java.html

[33mcommit d96c9451e26e23a6066788a6e222b8561f28d4ca[m
Merge: 407a283e c3a54065
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Aug 14 09:35:51 2018 +0800

    [#829] Update TestUtil to use filteredList (#900)
    
    Methods in TestUtil such as getMidIndex(Model), getLastIndex(Model)
    and getPerson(Model, Index) return the index and person based on the
    entire address book instead of the model's filtered list.
    
    When tests require a filtered list, we will get the incorrect person
    or index upon calling these methods in TestUtil.
    
    Let's update these methods in TestUtil to return values from the
    model's filtered list.

[33mcommit c3a54065e06a6ac6d044e90844497ec0d9f28121[m
Author: LiXiaowei <lixiaowei0535@gmail.com>
Date:   Mon Aug 13 23:37:11 2018 +0800

    Update SelectCommandSystemTest to use methods from TestUtil

[33mcommit 9fbc8c49924791696b954ee15bf833061a5d18aa[m
Author: LiXiaowei <lixiaowei0535@gmail.com>
Date:   Mon Aug 13 23:36:53 2018 +0800

    Update TestUtil to use filteredList
    
    Methods in TestUtil such as getMidIndex(Model), getLastIndex(Model)
    and getPerson(Model, Index) return the index and person based on the
    entire address book instead of the model's filtered list.
    
    When tests require a filtered list, we will get the incorrect person
    or index upon calling these methods in TestUtil.
    
    Let's update these methods in TestUtil to return values from the
    model's filtered list.

[33mcommit 407a283e1e93b4749bd11b6168f056028a361136[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 13 20:22:47 2018 +0800

    XmlSerializableAddressBook: check for duplicate person(s)
    
    When the address book XML file happens to contain duplicate person(s),
    XmlSerializableAddressBook#toModelType() will throw an unchecked
    DuplicatePersonException instead of the checked IllegalValueException
    which it promises to throw.
    
    This is because XmlSerializableAddressBook#toModelType() relied on
    AddressBook#addPerson(Person) throwing DuplicatePersonException when a
    duplicate person is encountered. Since DuplicatePersonException
    inherited from DuplicateDataException, which in turn inherited from
    IllegalValueException, this gave rise to the expected behavior.
    
    However, 6817bd35 (model: make DuplicatePersonException a
    RuntimeException, 2018-08-07) made DuplicatePersonException inherit from
    RuntimeException. Since this commit, all callers of
    AddressBook#addPerson(Person) are expected to perform the duplicate
    person check using AddressBook#hasPerson(Person). Yet,
    XmlSerializableAddressBook#toModelType() was not updated.
    
    Fix this by teaching XmlSerializableAddressBook#toModelType() to
    explicitly check for duplicate persons using
    AddressBook#hasPerson(Person). Add a test to prevent future regressions.

[33mcommit 8a474ab849ab3e28b1f252dc1b8b11846770ff2f[m
Merge: a2fe5658 d5ab4fd1
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 13 21:44:35 2018 +0800

    Combine Command#setData(...) and Command#execute() together (#898)
    
    Ensure that all command tests verify their model state and command
    history.
    
    Our commands forgot that their bound model and commandHistory are part
    of their state, and did not check them in their `#equals(...)`
    implementations. Combine Command#setData(...) and Command#execute()
    together to fix this, and allow us to streamline our command testing
    code by removing all of the `prepareCommand(...)` helper methods.
    
      [1/5] SelectCommandTest: verify model state as well
      [2/5] FindCommandTest: verify entire model state
      [3/5] HelpCommandTest: verify model state as well
      [4/5] Command tests: verify CommandHistory as well
      [5/5] Command: combine setData(...) and execute() together

[33mcommit d5ab4fd18d9461736d3a34031cbf334080bf9414[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 18:44:59 2018 +0800

    Command: combine setData(...) and execute() together
    
    To execute a command, (e.g. AddCommand), we need to
    
      1. Construct it:
    
             AddCommand addCommand = new AddCommand(person);
    
      2. Bind the model and command history to it:
    
             addCommand.setData(model, commandHistory);
    
      3. And then execute it:
    
             addCommand.execute();
    
    However, there is no reason why step (2) and step (3) must be separate,
    when it could just be:
    
        addCommand.execute(model, commandHistory);
    
    In fact, it causes more trouble:
    
      * Since the model and commandHistory are stored as protected fields in
        the Command base class, many commands forget to handle them
        appropriately. For example, all commands don't consider the model
        and commandHistory in their `#equals(...)` methods, even though
        these fields are part of their state.
    
      * Many command tests need to introduce a helper `prepareCommand(...)`
        method to streamline the command "setData and execute" process.
    
    So, let's fix this by combining Command#setData(...) and
    Command#execute() together. We can then simplify all the command tests
    by removing their `prepareCommand(...)` helper methods.

[33mcommit e41c8001e0ff4248a8b87b9a2466290e2027d251[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 18:53:34 2018 +0800

    Command tests: verify CommandHistory as well
    
    When executing a command, LogicManager will pass its CommandHistory to
    the command being executed.
    
    While commands can examine the CommandHistory, they should not modify
    it. However, our command tests (in `seedu.address.logic.commands`) do
    not verify the CommandHistory at all.
    
    Let's teach them to verify the CommandHistory. This is done by teaching
    CommandTestUtil.assertCommandSuccess(...) and
    CommandTestUtil.assertCommandFailure(...) to verify that the
    CommandHistory is not modified.
    
    We also need to implement CommandHistory#equals(Object), otherwise
    assertEquals(...) will not work with it.

[33mcommit 1971ea7a8e0149ccdf8f3eefe0c51fee556d5d86[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 23:12:30 2018 +0800

    HelpCommandTest: verify model state as well
    
    When executed, HelpCommand should:
    
     (1) Raise a ShowHelpRequestEvent, and
    
     (2) Not modify the model at all.
    
    HelpCommandTest verifies (1), but does not verify (2).
    
    Given that in the actual application, LogicManager will pass the Model
    to HelpCommand, we should verify that HelpCommand behaves as expected
    and does not modify the model.
    
    As such, let's make HelpCommandTest verify the model state as well. This
    is done by rewriting it to use
    `CommandTestUtil.assertCommandSuccess(...)`, for consistency with the
    other command tests.

[33mcommit 2595aa50cf70fbe0df744649373dbe66f45497fe[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 23:05:20 2018 +0800

    FindCommandTest: verify entire model state
    
    FindCommandTest only verifies some parts of the model state, namely the
    contents of `model.getAddressBook()` and
    `model.getFilteredPersonList()`.
    
    However, the Model contains much more than that -- it also encapsulates
    the address book history, for example. The Model may also grow to store
    other pieces of data in the future. We need to ensure that FindCommand
    does not needlessly meddle with the other data stored in the model.
    
    As such, let's make FindCommandTest verify the entire model state.
    This is done by rewriting it to use
    `CommandTestUtil.assertCommandSuccess(...)`, to make it consistent with
    the other command tests.

[33mcommit c109251efd98fd5315c3bf4514b07a91ff360bc4[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 22:43:28 2018 +0800

    SelectCommandTest: verify model state as well
    
    SelectCommand, when executed, should:
    
     (1) Raise a JumpToListRequestEvent (if the provided selection index is
         valid), and
    
     (2) Not modify the model at all.
    
    SelectCommandTest verifies (1), but does not verify (2).
    
    Given that in the actual application, LogicManager will pass the Model
    to SelectCommand, we should verify that SelectCommand behaves as
    expected and does not modify the model.
    
    As such, let's make SelectCommandTest verify the model state as well.
    This is done by rewriting it to use
    `CommandTestUtil.assertCommandSuccess(...)` and
    `CommandTestUtil.assertCommandFailure(...)`, for consistency with the
    other command tests.

[33mcommit a2fe565873d9225f24bb5f7b2e7f7c8970b9f3c4[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Aug 9 00:23:13 2018 +0800

    UserPrefs: remove addressBookName
    
    It is not used in our application at all.

[33mcommit db126b99092d533ee7424a2001de0836f00619b0[m
Merge: c9b222cb b2875e00
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Aug 9 17:58:52 2018 +0800

    model: convert checked exceptions to runtime exceptions (#896)
    
    DuplicatePersonException and PersonNotFoundException are checked
    exceptions. They are thrown by methods to signify that their relevant
    preconditions were violated.
    
    Using checked exceptions for such a purpose is slightly useful in that
    it will force callers to handle the case where the above preconditions
    are not met, such as when the methods are called with invalid user
    input.
    
    However, it imposes a HUGE cost on callers where the preconditions are
    already known to be met (e.g. in test code, or when the user input has
    already been validated before hand). In such a case, callers are forced
    to add try-catch blocks around the method call even if they know that
    the exception will never be thrown, bloating up the code. It is also
    impossible to test the catch blocks as well since correct code will
    ensure that the precondition holds and thus the exception will never be
    thrown, leading to reduced code coverage.
    
    Checked exceptions also don't work very well with the Java Streams API,
    since the API doesn't accept lambdas which could throw checked
    exceptions.
    
    In AB-4, the amount of code which benefits from DuplicatePersonException
    and PersonNotFoundException being checked exceptions is much smaller
    than the amount of code which is negatively impacted.
    
    As such, let's make the tradeoff in the other direction, by making
    DuplicatePersonException and PersonNotFoundException runtime exceptions.
    New callers _could_ forget to check that the preconditions hold before
    calling the methods in question (although test cases should catch that),
    but this is balanced out by the huge benefit of having more concise and
    testable code.
    
      [1/11] Remove redundant throws clauses
      [2/11] model: expose hasPerson(Person) functionality
      [3/11] AddCommand: explicitly perform duplicate person check
      [4/11] EditCommand: explicitly perform duplicate person check
      [5/11] model: make DuplicatePersonException a RuntimeException
      [6/11] model: make PersonNotFoundException a RuntimeException
      [7/11] AddressBookSystemTest: remove unnecessary catch block
      [8/11] commons: remove DuplicateDataException
      [9/11] UniquePersonList: check for null arguments more thoroughly
      [10/11] UniquePersonListTest: move to `seedu.address.model.person` package
      [11/11] UniquePersonListTest: add some more tests

[33mcommit b2875e000e2b97ca77402bd65e6269a1e6994b2e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 16:19:10 2018 +0800

    UniquePersonListTest: add some more tests
    
    More test coverage is always nice.
    
    In particular, we want to check that UniquePersonList's methods throw
    DuplicatePersonException and PersonNotFoundException where relevant.
    These cases were not tested by existing test code.

[33mcommit 8e370e418958244d8a842b32161762d545f401e7[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Aug 9 14:23:49 2018 +0800

    UniquePersonListTest: move to `seedu.address.model.person` package
    
    Since UniquePersonList is in the `seedu.address.model.person` package,
    its corresponding test UniquePersonListTest should be in the same
    package as well.

[33mcommit e7473900c12426764aebbc582f2ecebb247a6b89[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 16:29:36 2018 +0800

    UniquePersonList: check for null arguments more thoroughly
    
    Some methods do not explicitly check that their arguments are non-null
    with `requireNonNull(...)`.
    
    Let's fix them to be consistent with the rest of the code base.

[33mcommit bc1b0686b21ab8ad3a511b154bd634ee056daef1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 23:26:28 2018 +0800

    commons: remove DuplicateDataException
    
    It is not used anymore.

[33mcommit 1c39319fe333c53037f0f03d37b8693a41e905fb[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 23:14:34 2018 +0800

    AddressBookSystemTest: remove unnecessary catch block
    
    The code in the `try` block does not throw any checked exceptions.

[33mcommit 73693de3a3ada76e08fe72922c15edbaf415e15d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 23:11:14 2018 +0800

    model: make PersonNotFoundException a RuntimeException
    
    PersonNotFoundException is a checked exception. It is thrown by methods
    such as `UniquePersonList#remove(Person)`,
    `UniquePersonList#setPerson(Person, Person)` etc. to signify that
    certain preconditions were not met -- namely that the person provided to
    those methods does not exist in the address book/UniquePersonList.
    
    Using checked exceptions for such a purpose is slightly useful in that
    it will force callers to handle the case where the above preconditions
    are not met, such as when the methods are called with invalid user
    input.
    
    However, it imposes a HUGE cost on callers where the preconditions are
    already known to be met (e.g. in test code, or when the user input has
    already been validated before hand). In such a case, callers are forced
    to add try-catch blocks around the method call even if they know that
    the exception will never be thrown, bloating up the code. It is also
    impossible to test the catch blocks as well since correct code will
    ensure that the precondition holds and thus the exception will never be
    thrown, leading to reduced code coverage.
    
    Checked exceptions also don't work very well with the Java Streams API,
    since the API doesn't accept lambdas which could throw checked
    exceptions.
    
    In AB-4, the amount of code which benefits from PersonNotFoundException
    being a checked exception is much smaller than the amount of code which
    is negatively impacted.
    
    As such, let's make the tradeoff in the other direction, by making
    PersonNotFoundException a RuntimeException. New callers _could_ forget
    to check that the preconditions hold before calling the methods in
    question (although test cases should catch that), but this is balanced
    out by the huge benefit of having more concise and testable code.

[33mcommit 6817bd359355bc3c1fbee1f75b51de60afc4c97e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 22:24:17 2018 +0800

    model: make DuplicatePersonException a RuntimeException
    
    DuplicatePersonException is a checked exception. It is thrown by methods
    such as `UniquePersonList#add(Person)`,
    `UniquePersonList#setPerson(Person, Person)` etc. to signify that
    certain preconditions were not met -- namely that the operation would
    cause the "no duplicate persons in address book/UniquePersonList"
    constraint to be violated.
    
    Using checked exceptions for such a purpose is slightly useful in that
    it will force callers to handle the case where the above preconditions
    are not met, such as when the methods are called with invalid user
    input.
    
    However, it imposes a HUGE cost on callers where the preconditions are
    already known to be met (e.g. in test code, or when the user input has
    already been validated before hand). In such a case, callers are forced
    to add try-catch blocks around the method call even if they know that
    the exception will never be thrown, bloating up the code. It is also
    impossible to test the catch blocks as well since correct code will
    ensure that the precondition holds and thus the exception will never be
    thrown, leading to reduced code coverage.
    
    Checked exceptions also don't work very well with the Java Streams API,
    since the API doesn't accept lambdas which could throw checked
    exceptions.
    
    In AB-4, the amount of code which benefits from
    DuplicatePersonException being a checked exception is much smaller than
    the amount of code which is negatively impacted.
    
    As such, let's make the tradeoff in the other direction, by making
    DuplicatePersonException a RuntimeException. New callers _could_ forget
    to check that the preconditions hold before calling the methods in
    question (although test cases should catch that), but this is balanced
    out by the huge benefit of having more concise and testable code.

[33mcommit e66d31c483a0fcaeb953287e2af56962284c2841[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 22:57:18 2018 +0800

    EditCommand: explicitly perform duplicate person check
    
    In the next few commits, we will convert DuplicatePersonException into a
    runtime exception.
    
    In preparation for that, let's teach EditCommand to not depend on
    catching DuplicatePersonException for its control flow.
    
    Since DuplicatePersonException is still a checked exception, we need to
    add an ugly `throw new AssertionError("should not happen")`, but this
    will be removed in later commits once we convert
    DuplicatePersonException into a runtime exception.

[33mcommit 5e14e423d39aba11f5ccf5697e30ffa3c72823ca[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Aug 7 22:39:15 2018 +0800

    AddCommand: explicitly perform duplicate person check
    
    In the next few commits, we will convert DuplicatePersonException into a
    runtime exception.
    
    In preparation for that, let's teach AddCommand to not depend on
    catching DuplicatePersonException for its control flow.
    
    Since DuplicatePersonException is still a checked exception, we need to
    add an ugly `throw new AssertionError("should not happen")`, but this
    will be removed in later commits once we convert
    DuplicatePersonException into a runtime exception.

[33mcommit ac42c32ff5c7eb604a751dc35964eb7388bf8bb4[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 6 18:57:26 2018 +0800

    model: expose hasPerson(Person) functionality
    
    In the next few commits, we are going to be converting
    DuplicatePersonException and PersonNotFoundException into runtime
    exceptions.
    
    To do that, we need to be able to query the model to determine if a
    person exists in the address book.
    
    This functionality is already available in
    `UniquePersonList#contains(Person)`, but was simply not exposed. Let's
    expose it.

[33mcommit 000dbd1645d4c193088a2f94429642fca5c1e203[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Aug 8 17:12:26 2018 +0800

    Remove redundant throws clauses
    
    These redundant throws clauses were identified using IntelliJ's
    Analyze->Inspect Code feature, and analyzing the whole project.

[33mcommit c9b222cb2870b23760122cadb82248769442fa96[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 8 21:30:55 2018 +0800

    ClearCommandTest: fix tautological tests
    
    Tests in ClearCommandTest always pass because the actual and expected
    model refer to the same instance;
    `assertEquals(expectedModel, actualModel)` is always true because
    expectedModel and actualModel reference the same object.
    
    As a result, the model's state isn't correctly verified.
    
    Let's update these tests to correctly verify the model's state.

[33mcommit 6ae95915822de14c87e2c2cb672a902f6a14b53c[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jul 10 22:28:01 2018 +0800

    ParserUtil: remove `Optional` variants of parse methods
    
    As the comment[1] at the top of ParserUtil says, methods that take
    `Optional` as a parameter are bad.
    
    So, let's remove them.
    
    (It could be argued that leaving these methods in the code base could
    serve as an example for students of what not to do, but really, (1) the
    number of things that are forbidden under "best practice" is quite
    numerous, and trying to add an example of every single one of them in
    our code base would just lead to an annoyingly smelly code base, and (2)
    students will need to spend time cleaning up all of these negative
    examples, which is an unnecessary burden. These things would be better
    documented in style guides.)
    
    [1] Comment added in 84d6516f ([#557] ParserUtil: Update header comments
        on Optional usage (#558), 2017-07-18)

[33mcommit e186102b646d2307b53928142dd22932a6f4c86d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 6 19:16:42 2018 +0800

    Replace uses of `org.junit.Assert.fail` with `throw new AssertionError(...)`
    
    The source code of `org.junit.Assert.fail(String)` is[1]:
    
        public static void fail(String message) {
            if (message == null) {
                throw new AssertionError();
            }
            throw new AssertionError(message);
        }
    
    where `AssertionError` is our favorite `java.lang.AssertionError`.
    
    In other words, calling `fail(String)` is no different from writing
    `throw new AssertionError(...)`.
    
    The latter has a further benefit, though -- it informs the Java compiler
    that the code path terminates at that point. This is useful when we are
    inside a function that has a non-void return type -- if we used
    `fail(String)`, we will still need to `return` a dummy value at the end
    to satisfy the compiler, whereas if we used
    `throw new AssertionError(...)` we do not need to do that.
    
    So, let's use `throw new AssertionError(...)` consistently throughout
    the code base.
    
    [1] https://github.com/junit-team/junit4/blob/02c328028b4d32c15bbf0becc9838e54ecbafcbf/src/main/java/org/junit/Assert.java#L85-L90

[33mcommit 9bc3b33ea8e2b7bab786a159fc64935326ba97a5[m
Merge: 6632b4e3 69728c1f
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 6 23:28:50 2018 +0800

    parsers: throw ParseException consistently (#893)
    
    Some parsers in the `parsers` package throw ParseException on a parse
    error, others throw IllegalValueException.
    
    Given that they are *all* parsers, let's make them all throw
    ParseException for consistency.
    
      [1/4] ParserUtil methods: throw ParseExceptions on invalid input
      [2/4] parsers: remove unnecessary catch-throws of ParseExceptions
      [3/4] Remove use of `junit.framework` package
      [4/4] Use chained exceptions consistently throughout the code base

[33mcommit 69728c1f2531e96265a04d79a33168abd3cb586e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 6 18:20:04 2018 +0800

    Use chained exceptions consistently throughout the code base
    
    In some places of our code, we respond to an exception by throwing
    another exception.
    
    In such a situation, it is good practice to _chain_ the exceptions by
    passing the initial exception as a `cause` to the next exception. This
    is because it provides more information to higher-level exception
    handlers, allowing them to e.g. provide more meaningful stack traces
    that show how the exception is handled and transformed as it is
    propagated through the call stack.
    
    However, certain places in our code base do not use exception chaining
    when they could. These were discovered by grepping the code base for
    `\bthrow\b` and seeing if any of the thrown exceptions fit the criteria
    described above.
    
    Let's fix them to use chained exceptions.
    
    See https://docs.oracle.com/javase/tutorial/essential/exceptions/chained.html
    for more information on chained exceptions.

[33mcommit d7b3f1cc02bf1cda215891964f254925fb543c3a[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Aug 6 21:29:10 2018 +0800

    Remove use of `junit.framework` package
    
    There are certain places in our code base where we use classes from the
    `junit.framework` package.
    
    The `junit.framework` package exists for backwards-compatibility with
    JUnit 3[1]. We are not a legacy code base stuck on JUnit 3, thus we
    should use the JUnit 4 API.
    
    Replace uses of the `junit.framework` package with the JUnit 4 API
    equivalents, namely:
    
     * Rather than using `junit.framework.TestCase.assertNotNull`, use the
       JUnit 4 API's `org.junit.Assert.assertNotNull`[2].
    
     * Rather than using `junit.framework.AssertionFailedError`, use
       `java.lang.AssertionError` instead, since that is what is thrown by
       the JUnit 4 API on assertion failures.
    
    [1] From the package-info.java of `junit.framework` at
        https://github.com/junit-team/junit4/blob/02c328028b4d32c15bbf0becc9838e54ecbafcbf/src/main/java/junit/framework/package-info.java#L2
    
        "Provides JUnit v3.x core classes"
    
    [2] https://stackoverflow.com/a/291074
    
        "JUnit 3.X: junit.framework.Assert
    
         JUnit 4.X: org.junit.Assert
    
         Prefer the newest one, especially when running JDK5 and higher with
         annotation support."

[33mcommit c348aa9690128c11f0f169760cb2b574e611a5bc[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jul 10 22:20:31 2018 +0800

    parsers: remove unnecessary catch-throws of ParseExceptions
    
    These try-catch blocks simply catch the ParseException, and then throw a
    new ParseException with the exact same message and the caught
    ParseException as its cause.
    
    This catch-throwing of ParseExceptions does not add any value, so let's
    remove them. This has the side benefit of removing one level of
    indentation from the code.

[33mcommit 2ae8dddb4dd051843dc38fd144953a2f9bc24322[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jul 10 22:10:39 2018 +0800

    ParserUtil methods: throw ParseExceptions on invalid input
    
    Given that ParserUtil#parseName(String), ParserUtil#parsePhone(String)
    etc are, as their name implies, *parsers*, it would thus make more sense
    for them to be throwing `ParseException` on a parse failure, rather than
    the more generically-named `IllegalValueException`.

[33mcommit 6632b4e3f81b75dfc8808481adc79aa082abf695[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jul 10 22:07:29 2018 +0800

    ParserUtil: remove unused field MESSAGE_INSUFFICIENT_PARTS

[33mcommit b410fcafaeb5c76772da30bfb86c350acb5ee2e8[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Jul 28 12:50:29 2018 +0800

    .gitattributes: treat all *.pdf files as binary
    
    Some students may wish to commit PDF files into their downstream repos.
    
    The PDF file format[1] is _mostly_ text-like. As such, it is likely that
    the first 8000 bytes of any PDF file will _not_ contain a NUL byte,
    leading Git to treat the PDF file as a text file[2].
    
    In AddressBook-Level4, our Travis `run-checks` scripts requires all text
    files, as determined by Git, to fulfill certain requirements such as
    only having LF line endings and not having any trailing whitespace.
    
    However, PDF files, although usually determined by Git to be text files,
    may not actually be _fully_ text. Particularly, PDF files may contain
    embedded binary streams which contain arbitrary binary data.
    
    This arbitrary binary data can cause PDF files to fail our Travis
    `run-checks` scripts.
    
    Given that PDFs _can_ contain binary data, it would thus make more sense
    to treat the entire file as binary. This both allows them to pass our
    `run-checks` scripts, as well as to prevent Git from giving
    not-very-useful text diffs when the PDF files are modified.
    
    As such, let's tell Git to treat all *.pdf files as binary.
    
    [1] https://en.wikipedia.org/wiki/PDF#File_structure
    [2] https://github.com/git/git/blob/ffc6fa0e396238de3a30623912980263b4f283ab/xdiff-interface.c#L201-L207

[33mcommit ac37d6e2ed08c693de17ecb7badb7be38e42f2fe[m
Merge: c47a1e39 73765025
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 25 20:04:22 2018 +0800

    [#855] Refactor PersonBuilder constructor to use TypicalPersons as argument (#889)
    
    When creating a Person for testing, some tests specify almost all of
    the fields of an existing TypicalPerson, with only a slight variation
    in one or two fields. For example, the code below builds on top of
    TypicalPerson#AMY with only changes to address and tags:
    
        toAdd = new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)
                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_BOB)
                .withTags(VALID_TAG_FRIEND).build();
    
    This is long-winded and unnecessary, as PersonBuilder allows us to start
    from a ready-made Person, and modify as necessary. For example, the code
    above can be refactored to:
    
        toAdd = new PersonBuilder(AMY).withAddress(VALID_ADDRESS_BOB).build();
    
    Let's refactor the calls to PersonBuilder to make them more concise.

[33mcommit 737650257dd96ff63737c6ad34e5b54f13ddda5d[m
Author: LiXiaoooowei <lixiaowei0535@gmail.com>
Date:   Wed Jul 25 01:41:52 2018 +0800

    Shorten calls to PersonBuilder
    
    When creating a Person for testing, some tests specify almost all of
    the fields of an existing TypicalPerson, with only a slight variation
    in one or two fields. For example, the code below builds on top of
    TypicalPerson#AMY with only changes to address and tags:
    
        toAdd = new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)
                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)
                .build();
    
    This is long-winded and unnecessary, as PersonBuilder allows us to start
    from a ready-made Person, and modify as necessary. For example, the code
    above can be refactored to:
    
        toAdd = new PersonBuilder(AMY).withAddress(VALID_ADDRESS_BOB).build();
    
    Let's refactor the calls to PersonBuilder to make them more concise.

[33mcommit c47a1e394e2d3b3a3f1d06aac92ef248f9f23745[m
Merge: a1b29c20 d9467665
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Jul 6 22:54:15 2018 +0800

    Decouple UndoableCommand from ReadOnlyAddressBook (#861)
    
    The undo/redo mechanism uses an UndoRedoStack stored in the
    LogicManager, which uses 2 stacks to store executed and undone
    UndoableCommands. The UndoableCommands stores the previousAddressBook
    state before execution, which is used to restore the AddressBook state
    during an undo command.
    
    This results in unnecessary coupling between the UndoableCommand (within
    the Logic Layer) and AddressBook (within the Model Layer).
    
    Let's add a new class, VersionedAddressBook which extends AddressBook
    and shift the undo redo machanism from UndoRedoStack in LogicManager to
    VersionedAddressBook in ModelManager. This VersionedAddressBook class
    will use a list to keep track of the different versions of AddressBook
    by maintaining a list of AddressBook States.
    
    Since VersionedAddressBook will store all the AddressBook states,
    UndoableCommand will no longer need to store the
    previousAddressBookState in itself.
    
      [1/5] System Tests: remove model verification checks
      [2/5] Add VersionedAddressBook Class
      [3/5] Remove UndoRedoStack class
      [4/5] Remove UndoableCommand class
      [5/5] DeveloperGuide: update section on UndoRedoStack to VersionedAddressBook

[33mcommit d946766560e633e075335b5cfe055f5f49889b08[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Thu Apr 19 19:06:07 2018 +0800

    DeveloperGuide: update section on UndoRedoStack to VersionedAddressBook
    
    The app previously uses UndoRedoStack which stores the UndoableCommands
    in LogicManager for the undo/redo mechanism.
    
    Since the undo/redo machanism has been shifted to VersionedAddressBook
    which stores ReadOnlyAddressBook in a List, and has been moved to Model
    layer instead, the sections on undo/redo feature, Logic and Model
    component in DeveloperGuide is out of date.
    
    Also, commands that do not mutate the address book, such as
    FindCommand and ListCommand, will no longer clear the redoable
    address book states. This allows for redo commands to pass when we
    undo commands and execute a non-mutating command afterwards.
    
    UndoableCommand has also been removed from the codebase as well.
    
    Let's update the out of date sections in the DeveloperGuide, such
    as switching from UndoRedoStack to the updated VersionedAddressBook,
    how the undo/redo mechanism works, and remove any reference
    to UndoableCommand in DeveloperGuide.

[33mcommit 8fb3f9af3829117dc4a8bc92974c85c54f67210f[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Thu Apr 19 19:04:53 2018 +0800

    Remove UndoableCommand class
    
    UndoableCommand was previously used to undo and redo commands through
    its UndoableCommand#undo() and UndoableCommand#redo() method
    respectively.
    
    The undo/redo mechanism now uses an VersionedAddressBook which uses a
    list to keep track of the AddressBook's history. As such there is no
    longer a need for UndoableCommand class, and it should be removed for
    code quality purposes.
    
    Let's remove UndoableCommand class and its corresponding tests, as
    well as making all commands extend from Command class instead.
    
    Following this change, UndoableCommand#preprocessUndoableCommand() is
    no longer called when it is required for commands such as DeleteCommand
    and EditCommand. The intention of having
    UndoableCommand#preprocessUndoableCommand() was to resolve an issue[1]
    in our app.
    
    Since this issue is also resolved here by moving the undo/redo
    mechanism from UndoRedoStack to VersionedAddressBook which tracks
    AddressBook states instead of UndoableCommands, there is no longer a
    need for a separate method to preprocess the commands.
    
    Let's inline DeleteCommand#preprocessUndoableCommand() into
    DeleteCommand#execute() and EditCommand#preprocessUndoableCommand()
    into EditCommand#execute().
    
    [1] Issue with undo/redo and modifications to filtered lists:
    https://github.com/se-edu/addressbook-level4/issues/737

[33mcommit 1975187184ee7be5e457d94902b11b2db776c7e0[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Thu Apr 19 18:20:03 2018 +0800

    Remove UndoRedoStack class
    
    The undo/redo mechanism previously uses UndoRedoStack which stores
    UndoableCommands.
    
    Since the undo/redo mechanism has switched from using UndoRedoStack to
    VersionedAddressBook, UndoRedoStack is no longer used. As such, it
    should be removed for code quality purposes.
    
    Let's remove UndoRedoStack class and its corresponding tests.

[33mcommit ece049f7a66b3f3b4a5a8a4e65b173e84464019d[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Mon Jun 11 13:42:43 2018 +0800

    Add VersionedAddressBook Class
    
    The undo/redo mechanism uses an UndoRedoStack stored in the
    LogicManager, which uses 2 stacks to store executed and undone
    UndoableCommands. The UndoableCommands stores the previousAddressBook
    state before execution, which is used to restore the AddressBook state
    during an undo command.
    
    This results in unnecessary coupling between the UndoableCommand
    (within the Logic Layer) and AddressBook (within the Model Layer).
    
    Let's add a new class, VersionedAddressBook which extends AddressBook
    and shift the undo redo machanism from UndoRedoStack in LogicManager
    to VersionedAddressBook in ModelManager. This VersionedAddressBook
    class will use a list to keep track of the different versions of
    AddressBook by maintaining a list of AddressBook States.
    
    Since VersionedAddressBook will store all the AddressBook states,
    UndoableCommand will no longer need to store the
    previousAddressBookState in itself.

[33mcommit 8a80e587624262c0cef516cb35328b620626e5ef[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sun Apr 22 15:32:30 2018 +0800

    System Tests: remove model verification checks
    
    Whenever System Tests asserts if a command is executed correctly,
    there will be a verification to check that the internal
    components, such as the model, is correct.
    
    As System Tests are categorised as black box testing, it isn't
    necessary to verify the internal components, such as the model.
    
    Let's remove model verification checks for System Tests.

[33mcommit a1b29c20c825312a14ffe6b8242baee056cb5017[m
Merge: 686ec9ac 047b2c07
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Jul 5 22:01:18 2018 +0800

    Add se-edu branding + navigation bar to website (#888)
    
    We would like to give visitors easy access to the AddressBook-Level4
    documentation as well as other SE-EDU projects, in order to build a
    cohesive SE-EDU brand image.
    
    Add two navigation bars to the top of the AddressBook-Level4 website --
    one SE-EDU navigation bar that links to other SE-EDU projects, and one
    site navigation bar that provides easy access to AddressBook-Level4's
    User Guide, Developer Guide etc.
    
      [1/12] build.gradle: asciidoctor: specify template_dirs
      [2/12] docs/templates: import asciidoctor reference template
      [3/12] docs/templates/helpers.rb: remove unused code
      [4/12] docs/templates: remind devs to restart the gradle daemon
      [5/12] docs/templates/_footer: fix condition for emitting
      [6/12] docs: add site navigation bar
      [7/12] Site navbar: add a "View on GitHub" link
      [8/12] HelpWindow: don't show site navigation bar
      [9/12] docs: add SE-EDU navigation bar
      [10/12] gh-pages.css: override some asciidoctor.css rules
      [11/12] docs/templates/_footer: horizontally center footer text in page
      [12/12] Site navbar: add "Learning Outcomes" as an SE-EDU specific item

[33mcommit 047b2c0780640e79c79b7d104d8c99271b0feddc[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 13:07:52 2018 +0800

    Site navbar: add "Learning Outcomes" as an SE-EDU specific item
    
    Students browsing the SE-EDU website may wish to have easy access to the
    Learning Outcomes for AddressBook-Level4.
    
    As such, let's add a "Learning Outcomes" link to the navigation bar.
    
    Downstream projects have no use for the "Learning Outcomes" document,
    since they are supposed to be standalone products. Hence, let's make the
    "Learning Outcomes" link SE-EDU-only, visible only when the `site-seedu`
    attribute is set.

[33mcommit 8fde696d2c30440d496c6c1aa3edc1c5d254c942[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 15:39:14 2018 +0800

    docs/templates/_footer: horizontally center footer text in page
    
    Our navigation bars and page content are all horizontally centered, thus
    it makes sense to center the footer text as well.

[33mcommit 5a974c6ec2a9a8b81c2aea492944b245c48f4e1f[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 12:59:05 2018 +0800

    gh-pages.css: override some asciidoctor.css rules
    
    While the styling defined by asciidoctor.css looks very pleasant
    overall, some of its colors and fonts don't look very cohesive with our
    site design.
    
    Fix this by overriding some select style rules in gh-pages.css.

[33mcommit a83ed0b46e30f8d8c0ecaeae384f2997264a7ddb[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 12:32:13 2018 +0800

    docs: add SE-EDU navigation bar
    
    We would like to give visitors easy access to other SE-EDU projects, as
    well as build a cohesive SE-EDU brand image across all SE-EDU projects.
    
    As such, let's add a SE-EDU navigation bar to the top of every page.
    This navigation bar will display the SE-EDU logo, and provide links to
    other SE-EDU project. It will also highlight which project the reader is
    currently viewing.
    
    Our downstream projects, however, are not official SE-EDU projects, and
    so they have no need for this SE-EDU navigation bar. As such, let's make
    it such that the SE-EDU navigation bar is only rendered if the
    `site-seedu` attribute is set.

[33mcommit 9cdc224f43cce7083995680d6f060319569a7182[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 01:57:01 2018 +0800

    HelpWindow: don't show site navigation bar
    
    The help window launched by the `help` command displays the rendered
    User Guide (UserGuide.html). However, it contains a navigation bar.
    
    This navigation bar is non-functional -- clicking on the links will not
    do anything because the files that they link to are not found. This
    is because we only copy in `UserGuide.html` to the resources directory,
    and not the rest of the documentation.
    
    As such, let's hide the navigation bar when the User Guide is displayed
    in the Help Window.
    
    To do this, introduce a separate document, HelpWindow.adoc, that is only
    meant to be displayed inside the help window. This document just
    includes the contents of UserGuide.adoc verbatim, with one exception: it
    sets the `no-site-header` attribute, thus disabling the rendering of the
    navigation bar.

[33mcommit fdb060977a4495794e213ce74de9691e5bd7ddd1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jul 2 13:34:26 2018 +0800

    Site navbar: add a "View on GitHub" link
    
    We'd like to encourage visitors to contribute to our project via GitHub.
    
    As such, let's add an easily-accessible link to our GitHub repo page to
    the navigation bar.
    
    Our downstream forks may also wish to do the same, so make the URL
    configurable through the `site-githuburl` attribute.

[33mcommit 5f5b6ed40cea2252b840aeccf71602d24a2784ab[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Jul 1 21:35:18 2018 +0800

    docs: add site navigation bar
    
    To give readers a more cohesive browsing experience, let's add a
    navigation bar to the top of every page.
    
    This navigation bar will remind readers the name of the website they are
    browsing (AddressBook-Level4), and will provide convenient links to
    frequently-used documents, such as the User Guide and Developer Guide.
    
    Implement this navigation bar using the templating mechanism that we
    have set up over the past few commits, and document it in the Developer
    Guide.
    
    Some important concerns that we need to handle are:
    
     1. Given that AddressBook-Level4 is meant to be used by students as a
        base to build their own products, which may or may not be an address
        book app, we should be able to easily specify the site name that is
        displayed in the navigation bar.
    
        Solution: Teach the navigation bar to use the asciidoc attribute
        `site-name` as the site name.
    
     2. Not all documents may wish to have a navigation bar displayed at the
        top of their page.
    
        Solution: Teach the navigation bar to check if the asciidoc
        attribute `no-site-header` is set. If it is, then we don't render
        the navigation bar.
    
     3. The rendered documentation should be browsable locally. Thus, links
        in the navigation bar must be relative, and the proper relative
        links must be generated no matter how deep the documentation
        directory tree is.
    
        Solution: Introduce an asciidoc attribute `site-root`, which should
        store the absolute path of the root documentation directory. In
        other words, it should be the same as the `sourceDir` specified in
        build.gradle. This is used to workaround the fact that the
        asciidoctor gradle plugin only passes in individual filenames, and
        not the sourceDir, to asciidoctor.
    
        The navigation bar can then compare the current directory with the
        `site-root` directory, and use it to generate the correct relative
        paths.
    
     4. It looks nicer if the item that the reader is currently browsing is
        highlighted in the navigation bar. e.g. If the current page is the
        Developer Guide, the "Developer Guide" item will be highlighted in
        the navigation bar.
    
        This requirement is complicated by the fact that the "Developer
        Guide" actually comprises of many documents: UsingGradle, Using
        Travis, UsingAppVeyor etc.
    
        Solution: Teach the navigation bar to examine the `site-section`
        attribute of the document, and highlight the appropriate navigation
        item.
    
     5. The templating mechanism is extremely advanced and requires some
        knowledge of Ruby and Asciidoctor's API. Downstream projects may
        modify the template file, break it, and then file an issue expecting
        support from us.
    
        Solution: Explicitly state in the Developer Guide that we do not
        provide support for modified template files. If downstream projects
        break the files, they get to keep the pieces.
    
    Thanks to the additional configuration attributes that we have added,
    downstream projects will need to do more configuration to tweak the
    documentation settings to match their fork. Update the developer guide
    to mention this.

[33mcommit 011fd6dc5eb28770f73eeb8fbad1486336a493c9[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Jul 1 16:58:30 2018 +0800

    docs/templates/_footer: fix condition for emitting <br>
    
    The footer has unnecessary empty vertical space.
    
    This is because if the `last-update-label` attribute is specified, an
    extra <br> is added, which is meant to separate the "Last updated" line
    from the document revision number line.
    
    However, if the document has no revision number, then it would seem that
    the footer has unnecessary empty vertical space.
    
    Fix this by only emitting the <br> if there is a revnumber AND a
    last-update-label.

[33mcommit 4eabe89c56769129a9f8f653c18abba71699020d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Jul 1 16:35:18 2018 +0800

    docs/templates: remind devs to restart the gradle daemon
    
    For the purpose of speed, the asciidoctor gradle plugin will "reuse the
    asciidoctor instance to avoid reinstantiating the jruby runtime"[1].
    
    This has the effect of keeping the old template files in memory, meaning
    that if the template files are modified while the gradle daemon is
    running, the changes won't be reflected in the running gradle daemon.
    The documentation will still use the old template even when the
    `asciidoctor` task is rerun.
    
    This optimization is however, still beneficial: developers are more
    likely to edit the documentation adoc files compared to modifying the
    template files. As such, they will benefit from the speed increase
    gained from keeping the template files in memory. Thus, we will not make
    any attempt to work around this.
    
    Instead, let's add a comment to the top of every template file,
    reminding developers that if they wish for their changes to the template
    files to be reflected in the generated HTML files, they will need to
    restart the Gradle daemon.
    
    [1] https://github.com/asciidoctor/asciidoctor-gradle-plugin/commit/0b9d614fb10fcf79747588e0a8257fca5b96033a

[33mcommit 87e5627482c9a820816cdc711c2c7da6fc30b3f5[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Jul 1 16:48:24 2018 +0800

    docs/templates/helpers.rb: remove unused code
    
    In the previous commit, we imported helpers.rb, as well as other
    template files, from the asciidoctor-backends[1] repo.
    
    However, as we did not import all of the template files, some of the
    code in helpers.rb is unused.
    
    The unused code is an unnecessary maintenance and readability burden, so
    let's remove them.
    
    [1] https://github.com/asciidoctor/asciidoctor-backends/tree/master/slim/html5

[33mcommit cd9ea3a63f7859ea855c0715479f5b02bc7a3ffa[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 15 14:04:57 2017 +0800

    docs/templates: import asciidoctor reference template
    
    We are trying to implement a navigation bar in the SE-EDU website using
    asciidoctor's template mechanism[1].
    
    Asciidoctor's template mechanism works by allowing template developers
    to override the rendering of certain blocks in asciidoctor's syntax
    tree. For our case, if we want to add a navigation bar to the top of the
    page, we will need to override asciidoctor's `document` block handling.
    
    The problem is: the rendering logic for the document block itself is
    quite coarse -- covering everything from the header <meta> and <script>
    tags to the footer's "last updated" text. If we just want to add a
    navigation bar without changing the rest of the document's output, we
    will need to re-implement a large part of asciidoctor's HTML5 backend.
    
    Fortunately, the asciidoctor-backends[2] repository has done most of the
    hard work for us -- it features complete re-implementation of templates
    that mirror asciidoctor's default HTML5 output. By using these templates
    as a base, we can then make minimal changes on top to get our navigation
    bar.
    
    The asciidoctor-backends repo has templates for three different template
    engines: ERB, HAML and Slim. All three template engines are supported by
    the asciidoctor Gradle plugin, since AsciidoctorJ bundles them inside
    its JAR file[3].
    
    Following the recommendation of asciidoctor's project lead[4], let's use
    the Slim backend.
    
    Import the necessary template files, contained within the slim/html5/
    directory, from the latest commit
    (8ffcad1f9194fe2638f673aea7e41ed28c654800) of the asciidoctor-backends
    repo.
    
    Since we only need to modify the handling of the `document` block, we
    just need to import `document.html.slim`, as well as its dependencies.
    
    [1] https://asciidoctor.org/docs/user-manual/#provide-custom-templates
    
    [2] https://github.com/asciidoctor/asciidoctor-backends
    
    [3] https://github.com/asciidoctor/asciidoctorj#project-layout
    
        "Also bundles optional RubyGems needed at runtime, such as coderay,
        tile, haml and slim."
    
    [4] https://github.com/asciidoctor/asciidoctor-backends/issues/118#issuecomment-99609554
    
        "We should point out that ERB is complex and that, in our
        experience, the templates were exceptionally hard to maintain when
        done in ERB. In contrast, the templates are simple and clear when
        done in Slim and we have convenient facilities for simplifying the
        templates further with utility methods. Slim is a smarter
        engineering choice."

[33mcommit 887261111616b77c0cb5e3050e2cf55554b7170e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Nov 10 22:27:04 2017 +0800

    build.gradle: asciidoctor: specify template_dirs
    
    In the upcoming commits, we will be adding a navigation bar to the
    SE-EDU website using asciidoctor's template mechanism[1].
    
    In preparation of that, let's teach the asciidoctor gradle plugin to
    look for our template files inside the docs/templates/ directory by
    specifying the template_dirs option.
    
    Likewise, to guarantee correctness of the build, teach Gradle to rebuild
    our documentation if any of the template files change by specifying the
    template files as task inputs[2].
    
    [1] https://asciidoctor.org/docs/user-manual/#provide-custom-templates
    [2] https://docs.gradle.org/4.8.1/userguide/more_about_tasks.html#sec:runtime_api_for_adhoc

[33mcommit 686ec9ac9b9a17e5962c2341c08471e89d452d23[m
Merge: a42ededd 544d89bf
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Jul 4 10:04:08 2018 +0800

    Allow running tests through Gradle on JDK 10 (#885)
    
    Upgrade our Gradle version to 4.8.1 so as to allow JDK 10 installations
    to run our tests successfully.
    
    Due to a JavaFX bug, JDK 10 on Windows will fail to run tests in
    headless mode. Update our documentation and build.gradle script to warn
    devs against using JDK 10 on Windows, and recommend that they use JDK 9
    instead.
    
      [1/2] Gradle wrapper: upgrade to Gradle 4.8.1
      [2/2] Warn developers against using JDK 10 on Windows

[33mcommit 544d89bf68595ba0a99be410025342d840db3893[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Jun 30 21:29:37 2018 +0800

    Warn developers against using JDK 10 on Windows
    
    Due to a JavaFX bug[1], JDK 10 on Windows will fail to run tests in
    headless mode.
    
    As such, let's warn developers against using JDK 10 on Windows in our
    documentation, and recommend that they use JDK 9 instead.
    
    Some developers who have both JDK 9 and JDK 10 installed on their
    systems may have trouble coaxing Gradle to use JDK 10. As such, to make
    it easier to troubleshoot the setup of such developers, let's teach
    build.gradle to print a warning to console if it detects that it is
    running with JDK 10 on Windows.
    
    [1] https://github.com/javafxports/openjdk-jfx/issues/66

[33mcommit 0ea25fb408c6085d3a08f7d789e176aae523d157[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 8 00:35:11 2018 +0800

    Gradle wrapper: upgrade to Gradle 4.8.1
    
    With JDK 10, `./gradlew allTest` fails to run tests, instead spewing out
    the following errors on the console:
    
        Exception in thread "main" java.lang.reflect.InvocationTargetException
                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
                at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                at java.base/java.lang.reflect.Method.invoke(Method.java:564)
                at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:510)
        FATAL ERROR in native method: processing of -javaagent failed
                at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:522)
        Caused by: java.lang.RuntimeException: Class java/lang/UnknownError could not be instrumented.
                at org.jacoco.agent.rt.internal_290345e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:139)
                at org.jacoco.agent.rt.internal_290345e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:100)
                at org.jacoco.agent.rt.internal_290345e.PreMain.createRuntime(PreMain.java:55)
                at org.jacoco.agent.rt.internal_290345e.PreMain.premain(PreMain.java:47)
                ... 6 more
        Caused by: java.lang.NoSuchFieldException: $jacocoAccess
                at java.base/java.lang.Class.getField(Class.java:1958)
                at org.jacoco.agent.rt.internal_290345e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:137)
                ... 9 more
    
    ... and so forth
    
    According to a PR[1] on the JaCoCo's issue tracker, this occurs because
    "Classes of JDK 10 EA b35 use a new classfile version number and so
    JaCoCo Agent 0.7.9 as well as agent from current build of master branch
    fail to start". This has been fixed as of JaCoCo 0.8.1, which also
    happens to be the latest release.
    
    We do not explicitly specify the version JaCoCo to use in our
    build.gradle file, and so the `jacoco` gradle plugin just uses its
    default, which happens to be 0.8.0[2] on Gradle 4.6 (the version we are
    using). This version of JaCoCo still has this bug, and so we get these
    errors.
    
    Fix this by upgrading to the latest version of Gradle (4.8.1). Since
    Gradle 4.7[3] the default JaCoCo plugin has been upgraded to version
    0.8.1, and so upgrading to the latest version of Gradle will fix this
    problem and allow us to run tests on JDK 10.
    
    The Gradle wrapper upgrade was performed by running the command:
    
        ./gradlew wrapper --gradle-version 4.8.1
    
    and then converting the line endings of gradlew.bat to unix to satisfy
    our travis line ending checks.
    
    Also, update any references to the Gradle version we are using in the
    code base to 4.8.1.
    
    [1] https://github.com/jacoco/jacoco/pull/629
    [2] https://github.com/gradle/gradle/commit/8a09484f4166737cf60ea945409d49340ffb8ae3
    [3] https://docs.gradle.org/4.7/release-notes.html#default-jacoco-version-upgraded-to-0.8.1

[33mcommit a42ededd0a4f986397105ea5a3e835ac13c3777c[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jun 26 11:20:55 2018 +0800

    Fix stalling HelpWindowTest
    
    When running `gradlew headless allTests`, gradle will sometimes stall on
    HelpWindowTest.
    
    While we do not know the exact cause of this stalling, we have narrowed
    it down to the following conditions[1] which must all be present for the
    stalling to occur:
    
      1. The test must be running in headless mode.
    
      2. There must be two stages created, one with a WebView, and one with
         no scene.
    
      3. Both stages must be shown.
    
    Since it is pretty difficult and time-consuming to debug and find out
    the exact cause of this stalling, let's fix this issue by removing one
    of its trigger conditions.
    
    (1) obviously cannot be removed, since we want headless testing to work
    on our code. For (2), the HelpWindow needs to have a WebView to show the
    user guide, and so we can't remove the WebView.
    
    But really, stepping back a bit, we can see that the whole test setup
    which leads to (2) and (3) being present in the first place is pretty
    strange:
    
        // (a)
        guiRobot.interact(() -> helpWindow = new HelpWindow());
        // (b)
        Stage helpWindowStage = FxToolkit.setupStage((stage) -> stage.setScene(helpWindow.getRoot().getScene()));
        // (c)
        FxToolkit.showStage();
        helpWindowHandle = new HelpWindowHandle(helpWindowStage);
        [...]
        // (d)
        guiRobot.interact(helpWindow::show);
    
    In (a), we create an instance of HelpWindow, which has its own Stage
    which can be retrieved with HelpWindow#getRoot().
    
    However, in (b) we transfer the HelpWindow's scene to the TestFX's
    primary stage, leaving the helpWindow with no scene. But: there is no
    reason to use the TestFX's registered primary stage when HelpWindow
    already has its own Stage.
    
    And in (c), we show the TestFX primary stage, and then later in (d) we
    show the helpWindow. However, given that helpWindow does not have a
    scene and is thus not showing anything, it would be deceptive to use it
    for tests which are meant to verify that the application works
    correctly.
    
    As such, let's fix the stalling by fixing the root of the problem: the
    bogus test setup. Rather than having two stages, let's just use
    HelpWindow's stage directly for all tests, and register it as the TestFX
    primary stage using FxToolkit#registerStage(...). This has the effect of
    removing trigger conditions (2) and (3), since we now only have one
    Stage, thus fixing the stalling.
    
    NOTE: Even with this fix, focus_helpWindowNotFocused_focused() still
    cannot be run in headless mode, although for a different reason compared
    to when this skip was introduced in 2cf5b98 (HelpWindowTest: skip test
    with buggy behavior in headless mode, 2018-04-21). Now, this test will
    fail due to a different JavaFX bug[2]. Clarify this by adding comments
    explaining why the test is skipped in headless mode.
    
    ---
    [1] Minimal reproducer for the stalling:
    
        package seedu.address.ui;
    
        import org.junit.Test;
        import org.testfx.api.FxRobot;
        import org.testfx.api.FxToolkit;
    
        import javafx.scene.Scene;
        import javafx.scene.web.WebView;
        import javafx.stage.Stage;
    
        public class HelpWindowTest {
            @Test
            public void test() throws Exception {
                FxToolkit.registerPrimaryStage();
                FxRobot fxRobot = new FxRobot();
                fxRobot.interact(() -> {
                    Stage stage1 = new Stage();
                    stage1.setScene(new Scene(new WebView()));
                    Stage stage2 = new Stage();
    
                    // Order in which stages are shown does not matter
                    stage1.show();
                    stage2.show();
                });
    
                // May or may not stall here depending on your luck
                fxRobot.interact(() -> {});
            }
        }
    
    [2] https://github.com/javafxports/openjdk-jfx/issues/50

[33mcommit 8d2322b44be089d1cf2ec332157e40912913a97b[m
Merge: e968a297 fc69d109
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Apr 24 21:53:03 2018 +0800

    HelpWindowTest: fix failing test in non-headless mode (#880)
    
    HelpWindowTest#focus_helpWindowNotFocused_focused() test checks that
    the HelpWindow#focus() method will cause the HelpWindow to be in focus
    when called. The test first asserts that the HelpWindow is not in focus
    first after it is shown, being calling this method and asserting that
    the HelpWindow is now in focus.
    
    When tests are run in non-headless mode, the HelpWindow will be in
    focus immediately after it is shown, thus our first assertion is
    incorrect, causing the test to consistently fail in non-headless mode.
    
    Let's add a method GuiRobot#removeFocus(), and update the test to call
    this method to remove focus from the HelpWindow after it is shown
    to ensure the first assertion is correct in non-headless mode.
    
      [1/3] HelpWindowTest: fix failing test in non-headless mode
      [2/3] HelpWindowTest: skip test with buggy behavior in headless mode
      [3/3] build.gradle: enable logging of skipped tests

[33mcommit fc69d109980a26e9ede441c84b986ee530107073[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sat Apr 21 17:59:30 2018 +0800

    build.gradle: enable logging of skipped tests
    
    Our build.gradle configuration does not log to the console tests that
    were skipped. These tests may have been skipped for certain reasons,
    e.g. they do not support headless mode and should be run in
    non-headless mode instead.
    
    As these tests that are skipped may actually be failing, we should
    enable logging of these tests so that users know which tests needs
    to be tested separately.
    
    Lets update build.gradle to enable logging of tests that were skipped.

[33mcommit 2cf5b9816afa83977b2b4452cbe8b5076dde1d3e[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sat Apr 21 17:52:00 2018 +0800

    HelpWindowTest: skip test with buggy behavior in headless mode
    
    HelpWindowTest#focus_helpWindowNotFocused_focused test checks
    whether calling HelpWindow#focus() will bring the HelpWindow to focus.
    Normally, when HelpWindow#show() is called, the HelpWindow's
    Stage should automatically be in focus.
    
    However, when tests are run in headless mode, the HelpWindow in
    HelpWindowTest#focus_helpWindowNotFocused_focused test does not
    automatically come into focus after it is shown.
    
    This is due to HelpWindowStage in setUp() setting the HelpWindow's
    Scene to itself. According to the JavaFx docs for
    Window#setScene(Scene)[1], a Scene can only be on one Stage at a time,
    and setting a Scene on a different Stage will cause the old Stage to
    lose the reference. As a result, the HelpWindow's Stage will not have a
    reference to any Scene, resulting in the HelpWindow's Stage not coming
    into focus automatically, due to a bug with Monocle's headless mode.
    
    Let's skip HelpWindowTest#focus_helpWindowNotFocused_focused test when
    tests are run in headless mode as it is relying on buggy behavior.
    
    [1]: JavaFx docs for Window#setScene(Scene):
    https://docs.oracle.com/javase/8/javafx/api/javafx/stage/Window.html#setScene-javafx.scene.Scene-

[33mcommit 1c6071fa439f23f3aa1ce378b5788c73682162a0[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Mon Apr 16 18:17:58 2018 +0800

    HelpWindowTest: fix failing test in non-headless mode
    
    HelpWindowTest#focus_helpWindowNotFocused_focused() asserts that the
    HelpWindow is not in focus when it is first shown, and then asserts
    that the HelpWindow comes into focus after calling HelpWindow#focus().
    
    When tests are run in non-headless mode, the HelpWindow will be in
    focus when it is first shown, thus rendering our first assumption false
    and causing the test to fail.
    
    Let's update the test to focus on another TestFx Stage, which will
    remove focus from the HelpWindow when it is first shown, ensuring that
    the initial assumption is true.

[33mcommit e968a2972fc847688918a9ad23dbd9619ebbdce4[m
Merge: c8f40d86 50771f42
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Apr 22 12:27:00 2018 +0800

    [#750] Use java.nio.file for file/path handling (#866)
    
    String operations are used for the construction of file paths. Also,
    many APIs in the codebase take in String arguments as file paths.
    
    This method of file/path handling is error prone as creating paths using
    string concatenation can lead to the creation of invalid paths.
    Furthermore, checking if two paths resolve to the same file using string
    equality is incorrect as it only tests if the strings are equal.
    
    Let's refactor the codebase to use java.nio.file for file/path
    handling as it provides a safe and platform-independent way to
    perform operations on paths and properly separate the concerns of
    parsing/stringifying paths and manipulating paths.
    
    More information on why String operations are error-prone:
    http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings

[33mcommit 50771f42d4e126bddfe40b2711a0d0e729a467ab[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Thu Apr 12 23:51:33 2018 +0800

    ConfigUtilTest: use platform-independent path for preferences
    
    ConfigUtilTest#getTypicalConfig() uses a path for the user preference
    file that is only meant for the Windows operating system.
    
    This should not be the case as AddressBook is meant to run on all
    platforms.
    
    Let's update ConfigUtilTest#getTypicalConfig() to use a
    platform-independent path for the user preference file. Following this,
    ExtraValuesConfig.json and TypicalConfig.json should be updated to
    reflect this change as well.

[33mcommit 2afeb5eb35747dff517ed96eb24e12f51aec7990[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Thu Apr 12 23:12:48 2018 +0800

    FileUtil: remove unused methods
    
    After refactoring the codebase to use java.nio.file for file/path
    handling, several methods became unused. Following that, FileUtilTest
    would be testing unused methods.
    
    For code quality purposes, unused methods and tests should be removed.
    
    Let's remove unused methods in FileUtil and FileUtilTest.

[33mcommit c539921c210e43412c6df3ddeda8400c9dc1070e[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Sun Apr 15 02:03:32 2018 +0800

    FileUtil: use void for the return type of FileUtil#createFile(Path)
    
    The return value of FileUtil#createFile(Path) is unused.
    
    For code quality purposes, methods with unused return types should have
    void as a return type instead.
    
    Let's use void for the return type of FileUtil#createFile(Path).

[33mcommit 9eac635d9da1a71c81587ba66cab1911977a863b[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sat Apr 21 00:24:27 2018 +0800

    Refactor codebase to use java.nio.file for file/path handling
    
    String operations are used for the construction of file paths. Also,
    many APIs in the codebase take in String arguments as file paths.
    
    This method of file/path handling is error prone as creating paths using
    string concatenation can lead to the creation of invalid paths.
    Furthermore, checking if two paths resolve to the same file using string
    equality is incorrect as it only tests if the strings are equal.
    
    Let's refactor the codebase to use java.nio.file for file/path
    handling as it provides a safe and platform-independent way to
    perform operations on paths and properly separate the concerns of
    parsing/stringifying paths and manipulating paths.
    
    More information on why String operations are error-prone:
    http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings

[33mcommit 0bd4b85c23c1eb5a8ae54325f69144636b26a205[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sat Apr 21 00:20:04 2018 +0800

    MainApp: extract handling of application parameters into AppParameters
    
    The handling of application parameters is done in the MainApp.
    
    This decreases cohesiveness as handling and parsing of application
    parameters should be done separately and not in the MainApp as
    command-line parsing is at a much lower level compared to the high level
    setup of the application architecture. This also allows the parsing of
    application parameters to be tested independently.
    
    Let's extract the handling of application parameters from MainApp into
    the AppParameters for future parsing of application parameters.

[33mcommit 75fdb9bb6a07290ab5d4b277012b2d2f4eb6ecfe[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sat Apr 21 00:15:41 2018 +0800

    Replace use of java.io.File with java.nio.file.Path
    
    There are many usages of java.io.File throughout the codebase.
    
    Since Path is meant to replace File as mentioned in the Oracle
    Documentation on Legacy File I/O Code, let's convert all usages of File
    in the codebase to Path.
    
    Oracle Documentation on Legacy File I/O Code:
    https://docs.oracle.com/javase/tutorial/essential/io/legacy.html

[33mcommit c8f40d862938406c9b76b81c05020775a9820bca[m
Merge: 69b40e4b 71b993a7
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Apr 20 23:14:17 2018 +0800

    [#742] Add different levels of comparison to equality methods of Person class (#844)
    
    Person class contains only one equality method Person#equals(Object)
    which checks if all fields of the Person except tags are identical.
    
    Two Persons of the same name that have at least one other equivalent
    identity field (phone or email) but different data fields (address and/
    or tags), are considered different even though they are actually the
    same person.
    
    Let's add another equality method, Person#isSamePerson(Person), for
    performing comparisons between identity fields and use this equality
    check when adding or editing a person.

[33mcommit 71b993a7d23c4621e6ed2991d6ebf7d5378ba00e[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Wed Apr 18 17:19:05 2018 +0800

    Person: add an equality check for tags
    
    The equality methods that check for both identity and data fields,
    Person#equals(Object) and PersonCardHandle#equals(Person), checks if all
    fields of the Person except tags are identical.
    
    Since these methods check for the equality of both identity and data
    fields, it should test for the equality of all fields including tags.
    
    Let's add an equality check for tags in Person#equals(Object) and
    PersonCardHandle#equals(Person).
    
    Also, TypicalPersons#DANIEL now contains the "friends" tag while
    typicalPersonsAddressBook.xml#DANIEL does not. This causes the
    XmlSerializableAddressBookTest#toModelType_typicalPersonsFile_success
    test to fail. To prevent that, let's add the "friends" tag to
    typicalPersonsAddressBook.xml#DANIEL.

[33mcommit 695a2d8ba3b6fff01a05e565d77feffa36a9b184[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Thu Apr 12 20:41:44 2018 +0800

    CollectionUtil: remove CollectionUtil#elementsAreUnique(Collection<?>)
    
    After adding an equality method for identity fields in Person,
    CollectionUtil#elementsAreUnique(Collection<?>) becomes unused.
    Following that, the corresponding tests in CollectionUtilTest would be
    testing an unused method.
    
    For code quality purposes, unused methods and tests should be removed.
    
    Let's remove CollectionUtil#elementsAreUnique(Collection<?>) and the
    corresponding tests in CollectionUtilTest.

[33mcommit a72d1b33b066b03810f96f0de6af4ffacb287b3e[m
Author: Unknown <vivekscl5@gmail.com>
Date:   Thu Apr 19 09:37:51 2018 +0800

    Person: add equality method for identity fields
    
    Person class contains only one equality method Person#equals(Object)
    which checks if all fields of the Person except tags are identical.
    
    Two Persons of the same name that have at least one other equivalent
    identity field (phone or email) but different data fields (address and/
    or tags), is considered different even though they are actually the same
    person.
    
    Let's add another equality method, Person#isSamePerson(Person), for
    identity fields in Person class. Adding an equality method for identity
    fields will allow detection of such cases which may be unintuitive to
    users.
    
    Following this change, some tests throw DuplicatePersonException when
    they try to add the default person using PersonBuilder to a model that
    already contains TypicalPersons#ALICE. This is because the default
    person in PersonBuilder has the same values for the name and phone
    fields as ALICE. To prevent that, let's change the value of the phone
    field for ALICE.
    
    Furthermore, PersonListPanelTest#createXmlFileWithPersons(int) throws a
    DuplicatePersonException as all Persons created have the same name and
    email. To prevent that, let's change the format of the name and phone
    creation such that each Person is unique.
    r

[33mcommit 69b40e4b1a5db3552b3570228fb7e81eb6860a42[m
Merge: 87f50bea 21ab01fc
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sat Apr 14 13:07:23 2018 +0800

    [#706] Tidy up build.gradle (#860)
    
    build.gradle contains style issues, usage of deprecated API, unused
    system property etc.
    
    Let's resolve these issues.

[33mcommit 21ab01fcded7adc1a206c498eda6cbf8348d28cd[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Apr 14 12:19:21 2018 +0800

    Replace all usages of: /* comments */ with // comments
    
    These kind of /* comments */ can then be used for commenting out blocks
    of code during debugging.

[33mcommit 8351f7c4e5abaacb18fde3d2120ddec1c51a5102[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Apr 11 13:15:12 2018 +0800

    build.gradle: standardize String objects to be enclosed by single quotes
    
    Some string constants are enclosed by double quotes.
    
    This violates Groovy style guide. [1]
    
    Let's standardize string constants to be enclosed by single quotes.
    
    [1]: http://groovy-lang.org/style-guide.html

[33mcommit 41f7873996dd2482107e3bdaa5a494e808a4f2eb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 29 13:15:18 2018 +0800

    build.gradle: remove unused headless system property
    
    java.awt.robot is unused. To verify, download openjdk9 [1] and perform
    `grep -r 'java\.awt\.robot' .` in that directory. There will be no
    results, indicating that java.awt.robot is unused in openjdk9.
    Therefore, setting java.awt.robot to true in build.gradle does not do
    anything.
    
    Let's remove it.
    
    [1]: http://jdk.java.net/9/

[33mcommit b8837082f2c56175af0f9f87c67cdd50f9eca9f5[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 29 13:13:33 2018 +0800

    build.gradle: remove unused dependency
    
    testfx-legacy is unused and deprecated. [1]
    
    Let's remove it.
    
    [1]: https://github.com/TestFX/TestFX#testfx-legacy-deprecated

[33mcommit 2fc6e8224941091eb7cb9e386ce9098cd2cd08f8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 29 10:04:18 2018 +0800

    build.gradle: replace Task#leftShift(Closure) with Task#doLast(Action)
    
    Task#leftShift(Closure) is deprecated. [1]
    
    Let's replace it with Task#doLast(Action).
    
    [1]: http://mrhaki.blogspot.sg/2016/11/gradle-goodness-replacing-operator-for.html

[33mcommit e537a833666eb537cb628b0fb208287518d79f89[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 29 10:02:02 2018 +0800

    build.gradle: upgrade Shadow plugin
    
    The current version of this plugin uses deprecated features of Gradle.
    
    Let's update this plugin to the newest version, which does not use
    the deprecated features of Gradle.

[33mcommit fd8ea4a812626d1eb96aaeab167cd7a331a4acb6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 29 09:46:28 2018 +0800

    build.gradle: replace deprecated configurations
    
    compile, testCompile and testRuntime configurations are deprecated. [1]
    
    Let's replace these deprecated configurations with the newer
    configurations. [2]
    
    [1]: https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
    [2]: https://stackoverflow.com/a/44493379/8828382

[33mcommit 59c8526b68cca7cb0f6760586e7036e18d8d94f7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Mar 27 22:58:35 2018 +0800

    build.gradle: remove usage of allprojects
    
    AddressBook-Level4 is not a multi-project build. Therefore, there is no
    need to specify allprojects.
    
    Let's remove all usages of allprojects.

[33mcommit 1479c25ceea229b28d2dcf6e7912dcb13e26274a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:32:11 2018 +0800

    build.gradle: make String concatenation more explicit
    
    IntelliJ prompts that the compiler is unable to infer argument types for
    String concatenation as `descriptor` is of type Object.
    
    Let's make String concatenation to be more explicit by using string
    interpolation.

[33mcommit eb1cb71cdd275bcdd7c8c680d7d9ddc39ede3df9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:18:47 2018 +0800

    build.gradle: simplify setting of system properties
    
    systemProperty(String, Object) is called 5 times to set 5 system
    properties.
    
    This can be simplified.
    
    Let's simplify the setting of system properties by replacing 5 calls of
    systemProperty(String, Object) with 1 call of
    setSystemProperties(Map<String, ?>) instead.

[33mcommit e3e6aa30afe3df04e1c193e6e4f5cd767dcf420e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:12:05 2018 +0800

    build.gradle: update ambiguous method call
    
    IntelliJ reports that AsciidoctorTask#attributes method call is
    ambiguous as it does not know whether the argument is of type Object...
    or Map.
    
    Let's update the argument to be of type Map so that the method call
    is no longer ambiguous.

[33mcommit f81e01c9b2aeb573fcb40ce0476e6969541aa8e5[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:08:02 2018 +0800

    build.gradle: remove semi-colons
    
    Semi-colons are unnecessary in Groovy.
    
    Let's remove them.

[33mcommit 4393e1f638bf412d9638440f823ef983b586c608[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:06:22 2018 +0800

    build.gradle: replace deprecated API
    
    ConfigurableReport#setDestination(Object) is deprecated. [1]
    
    Let's replace this with ConfigurableReport#setDestination(File).
    
    [1]: https://docs.gradle.org/current/javadoc/org/gradle/api/reporting/ConfigurableReport.html#setDestination-java.lang.Object-

[33mcommit 6f1004b6167cafff95efb3ee405075b77cae3077[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Mar 24 13:03:52 2018 +0800

    build.gradle: update link to user guide
    
    The project is using Gradle version 4.6 while the link is pointing to
    the user guide for version 2.2.1.
    
    Let's update the link to the user guide for version 4.6.

[33mcommit 87f50bead95b48218961a4edd139bba7b3049b11[m
Merge: 94a5a195 df114b1c
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Apr 13 23:50:20 2018 +0800

    Clean up "d.FirstTimers" issues (#870)
    
    Clean up "d.FirstTimers" issues (#870)
    
    Resolve some first timer issues which have been left unresolved for some
    time.
    
      [1/15] build.gradle: remove field with default value
      [2/15] typicalPersonsAddressBook.xml: remove @code tag for header comment
      [3/15] Rename 'lastShownList' and 'last person listing' to level 4 equivalent
      [4/15] Person's field classes: remove the word "Person" from error messages
      [5/15] Person's field classes: remove the word "Person" from comments
      [6/15] Phone: standardize field constraints error message
      [7/15] TestDocument: remove file
      [8/15] CollectionUtilTest: remove usage of deprecated API
      [9/15] Inline Command#getMessageForPersonListShownSummary(int)
      [10/15] Rename CommandBox#handleCommandInputChanged()
      [11/15] CommandBoxHandle#run(String): update return type
      [12/15] UniquePersonList#asObservableList(): update method name
      [13/15] FindCommand: update messages to specify that it is case-insensitive
      [14/15] DarkTheme.css: update styleClass to stack-pane
      [15/15] README.adoc: update JUnit4 to JUnit5 in Acknowledgements

[33mcommit 94a5a1953ef16bacb77080292287a2956f476cfc[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Wed Apr 4 19:54:16 2018 +0800

    UsingCheckstyle.adoc: update documentation to include clicking `Apply`
    
    Clicking the Apply button after configuring the Checkstyle version is
    not explicitly specified in documentation.
    
    The Checkstyle-IDEA plugin will continue to use the previous version
    if the button was not clicked to apply the changes.
    
    Let's include clicking Apply button, after version configuration, in
    the UsingCheckstyle.adoc's instructions.

[33mcommit df114b1cbefc77a27969c1cc8a84afcf614f61e1[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 8 13:09:05 2018 +0800

    README.adoc: update JUnit4 to JUnit5 in Acknowledgements
    
    README.adoc references JUnit4 in its Acknowledgements. This is
    outdated as AddressBook-level4 now uses JUnit5.
    
    Let's update JUnit4 to JUnit5

[33mcommit 1b4a6a71ce2525005812688627dd68b663313689[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 03:13:00 2018 +0800

    DarkTheme.css: update styleClass to stack-pane
    
    CommandBox.fxml and StatusBarFooter.fxml both use StackPane as the
    root node. However, both use 'anchor-pane' as their styleClass.
    'anchor-pane' style class is not used elsewhere in the code base.
    
    Let's rename 'anchor-pane' to 'stack-pane'.

[33mcommit c677ee03f34531d6da919a19e780558dbb357059[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 03:05:54 2018 +0800

    FindCommand: update messages to specify that it is case-insensitive
    
    The header comment and MESSAGE_USAGE states that FindCommand is
    case-sensitive. This is not correct.
    
    Let's update the header comment and MESSAGE_USAGE to reflect that
    FindCommand is case-insensitive.

[33mcommit df8d631a82ed65af86ac66f7a1dd3c9fcd58d425[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Apr 5 03:58:02 2018 +0800

    UniquePersonList#asObservableList(): update method name
    
    UniquePersonList#asObservableList() returns an unmodifiable
    ObservableList.
    
    It is not very clear from the method name that the ObservableList we
    are returning is unmodifiable.
    
    Let's update the method name to asUnmodifiableObservableList().

[33mcommit 171a696904689337fd658c8aefce607e28957c07[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 02:41:17 2018 +0800

    CommandBoxHandle#run(String): update return type
    
    The return value from CommandBoxHandle#run(String) is unneccessary as
    it is not used.
    
    Let's update the return type of CommandBoxHandle#run(String) to void.

[33mcommit fb86c791b31ffce2d06ffb303f344c7b80de00d3[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 02:33:17 2018 +0800

    Rename CommandBox#handleCommandInputChanged()
    
    CommandBox#handleCommandInputChanged() method name is misleading as
    this event only triggers when the user presses the "Enter" button and
    not every time when the user types something.
    
    Let's rename CommandBox#handleCommandInputChanged() to
    CommandBox#handleCommandEntered().

[33mcommit 66048cd20c6cb739ca0b40c6d457d49aa3c9e417[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 02:26:35 2018 +0800

    Inline Command#getMessageForPersonListShownSummary(int)
    
    This method is only called by FindCommand.
    
    There is no need for this method to be placed in the super class
    Command as other commands do not use this method.
    
    Let's move getMessageForPersonListShownSummary(int) to FindCommand as a
    private method.
    
    It is unnecessary to have the logic of forming the message for the
    person list summary extracted as a separate method, since its logic
    isn't meant to be used by outsiders,and, while it does introduce a new
    level of abstraction, it is not useful enough.
    
    Let's inline FindCommand#getMessageForPersonListShownSummary(int).

[33mcommit be78a692a23e0fa3d0a42b083a3efa362d14717a[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 02:11:26 2018 +0800

    CollectionUtilTest: remove usage of deprecated API
    
    Upon compiling the test code, the message "CollectionUtilTest.java
    uses or overrides a deprecated API." is displayed. The new Integer(1)
    used is causing this warning to occur.
    
    Deprecated APIs should be removed for code quality purposes.
    
    Let's replace all instances of new Integer(1) with Integer.valueOf(1).

[33mcommit d184604b87c8c593f4adb7ecd9cb793046c6e8b0[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 02:03:52 2018 +0800

    TestDocument: remove file
    
    TestDocument.adoc was used to test whether the asciidoctor
    workflow works, at a time when all our documentation was still in
    markdown.
    
    Now that all our documentation has been converted to asciidoctor,
    docs/TestDocument.adoc is redundant.
    
    Let's remove TestDocument.adoc.

[33mcommit 29a66a9669ba325fca08db04a0242ff992478902[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Wed Apr 4 04:42:45 2018 +0800

    Phone: standardize field constraints error message
    
    Phone uses a different format from other error messages in Person's
    field classes: it uses the word "can" instead of "should", and leaves
    out "it" for the second part of its error message.
    
    Let's standardize Phone's error message to be similar to other
    Person's field classes.

[33mcommit 9e02f06d59aa5d1f49c9fbb6b46f14ce040a478a[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Apr 5 04:07:24 2018 +0800

    Person's field classes: remove the word "Person" from comments
    
    The header comments for `isValid` in each person's field - Address,
    Email, Phone, and Name - includes a redundant "Person" word.
    
    Let's remove the word "Person" in the comments of Person's field
    classes.

[33mcommit 2b5ef7e4c88491827b7d273a2a569ef05c2870c4[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Wed Apr 4 04:42:36 2018 +0800

    Person's field classes: remove the word "Person" from error messages
    
    The invalid values error message for each person's field - Address,
    Email, and Name - starts with a redundant "Person" word.
    
    Let's remove the word "Person" in the error messages of Person's
    field classes.

[33mcommit 32ae240536154a760b5036218beb245ffc944886[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sun Apr 1 01:51:36 2018 +0800

    Rename 'lastShownList' and 'last person listing' to level 4 equivalent
    
    The code base contains references to the lastShownList and last person
    listing.
    
    This is a relic of the AddressBook-Level3 code, which had a "last
    shown list". However, in AddressBook-Level4, we use a
    filteredPersonList instead.
    
    Let's update all references to lastShownList and last person listing
    to filteredPersonList and 'displayed person list'.

[33mcommit 691a53fc42cecf0ec9af412c6020fa5140383a3e[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Mar 29 14:04:51 2018 +0800

    typicalPersonsAddressBook.xml: remove @code tag for header comment
    
    The '@code' tag is used to refer to the AddressBook method that
    returns the values represented by this save file.
    
    The '@code' tag is used for javadoc files and not xml files.
    
    Let's remove it.

[33mcommit 0ab9d43ff228a589ae58ef17163e977e0b585802[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Mar 29 13:53:01 2018 +0800

    build.gradle: remove field with default value
    
    The line 'org.gradle.daemon=true' in gradle.properties is a default
    value as seen in
    https://docs.gradle.org/4.6/userguide/gradle_daemon.html
    
    It is unnecessary to specify default values.
    
    Let's remove it.

[33mcommit ae383756eaef6702531f5258fe501b7c0e2c831d[m
Merge: 285f0a1b 0f999220
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Apr 9 06:47:26 2018 +0800

    PersonListPanelTest: fix flaky test (#863)
    
    PersonListPanelTest#createBackingList(int) is used by
    performanceTest(). It logs the time taken for execution of this method
    and throws AssertionError if it takes too long to execute.
    
    performanceTest() should only concern itself with testing for the
    performance of creation and deletion of person cards; it should not
    concern itself with the performance of dependencies (in this case, the
    creation of the xml file). As such, there's no need to log the time
    taken for execution of this method and throw an AssertionError if it
    takes too long to execute.
    
    Let's remove this functionality.

[33mcommit 0f999220a1696d84d991d0221223d0e5f3e599ce[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Apr 4 13:01:12 2018 +0800

    PersonListPanelTest#performanceTest(): update header comment
    
    The header comment does not clearly specify what "too long" exactly
    refers to.
    
    Let's make the header comment clearer by specifying that this test
    should only take less than CARD_CREATION_AND_DELETION_TIMEOUT
    milliseconds to execute.

[33mcommit 5a6eafd7ca2278287bb9b14d33796d72184b2fac[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Apr 3 12:21:03 2018 +0800

    Simplify PersonListPanelTest#createBackingList(int)
    
    This method is used by performanceTest(). It logs the time taken for
    execution of this method and throws AssertionError if it takes too long
    to execute.
    
    performanceTest() should only concern itself with testing for the
    performance of creation and deletion of person cards; it should not
    concern itself with the performance of dependencies (in this case, the
    creation of the xml file). As such, there's no need to log the time
    taken for execution of this method and throw an AssertionError if it
    takes too long to execute.
    
    Let's remove this functionality.

[33mcommit 33fbcabf6cb73c861265d50c56fa5e677d56eba7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Apr 3 11:50:42 2018 +0800

    Simplify PersonListPanelTest#performanceTest()
    
    This test uses a stopwatch to record the execution time of creation
    and deletion of person cards. If the execution time exceeds a certain
    timing, the test fails. However, using the stopwatch alone does not
    allow the test to fail-fast; the test fails only after the creation and
    deletion of person cards have completed. As such, a timeout value is
    specified to allow the test to terminate earlier before the creation and
    deletion of person cards have completed.
    
    This logic is messy, and can be simplified by replacing with
    assertTimeoutPreemptively(...).

[33mcommit 285f0a1bf97537dffbcdcd2ec604edfa84ba4c5f[m
Merge: 760ee337 fd5c6ff6
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Apr 4 20:36:08 2018 +0800

    [#753] AddressBook: remove master tag list (#825)
    
    We keep track of a master tag list which holds all the tags in
    AddressBook.
    
    The tag list is not implemented correctly. The original intention was
    for tags in Person to point to the tags in the master tag list.
    However, implementing it in this way may be too complex for new
    developers to grasp, as discussed in #753. Furthermore, from the
    discussion in #794, the tag list in its current state is not needed.
    
    Let's remove the master tag list in AddressBook.
    
    Furthermore, without the master tag list in AddressBook,
    UniqueTagList is no longer necessary.
    
    Let's remove UniqueTagList.

[33mcommit 760ee337a8d2a73c54cb2f55581a7fe4ba063672[m
Merge: 435849cc eac78e4c
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Apr 4 19:31:21 2018 +0800

    [#685] TypicalPersons: Unintuitive interaction with PersonBuilder (#845)
    
    If no tag is set when constructing a new Person using PersonBuilder,
    the tag "friends" is added to the Person by default.
    
    This should not happen as tags are optional. As a result, all Persons
    in TypicalPersons have the "friends" tag while this isn't the case for
    the Persons in typicalPersonsAddressBook.xml, which is unintuitive.
    
    Let's replace the default tag in PersonBuilder with an empty set of
    tags.

[33mcommit eac78e4cba7cf5afff6e5277a7674c61cdde59cc[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Mon Mar 26 15:01:18 2018 +0800

    PersonBuilder: remove default tag
    
    If no tag is set when constructing a new Person using PersonBuilder,
    the tag "friends" is added to the Person by default.
    
    This should not happen as tags are optional. As a result, all Persons
    in TypicalPersons have the "friends" tag while this isn't the case for
    the Persons in typicalPersonsAddressBook.xml, which is unintuitive.
    
    Let's replace the default tag in PersonBuilder with an empty set of
    tags.
    
    The test that finds Persons by tags in FindCommandSystemTest uses the
    tags in the Person Daniel. Now that a tag is not added by default, the
    test fails as Daniel does not have any tags.
    
    Let's give Daniel the "friends" tag.

[33mcommit ea5662c0f8225da5c44763d4d05107dba85ab22d[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Mon Mar 26 15:01:04 2018 +0800

    PersonUtil: add getEditPersonDescriptorDetails(EditPersonDescriptor)
    
    AddressBookParserTest#parseCommand_edit() uses
    PersonUtil#getPersonDetails(Person) to create the argument to be
    parsed by EditCommandParser. It then compares this with a newly
    constructed EditCommand. However, in the case where a Person is being
    edited to be without tags, PersonUtil#getPersonDetails(Person) does
    not make a distinction between these two cases:
    1. The person originally has no tags.
    2. The person originally has tags, and we are clearing these tags.
    
    As a result, the AddressBookParserTest#parseCommand_edit() may fail if
    we want to test for case 2, but PersonUtil#getPersonDetails(Person)
    will only give us attributes for case 1 instead.
    
    Let's add a getEditPersonDescriptorDetails(EditPersonDescriptor) method
    to PersonUtil so that AddressBookParserTest#parseCommand_edit() can
    distinguish between the two cases.

[33mcommit fd5c6ff64ec2dde386632cc7ce3e36790d8bfe7b[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Mon Mar 26 12:27:45 2018 +0800

    Developer guide: update model component section
    
    AddressBook previously had a UniqueTagList linked to it, which was
    reflected in the model component diagram.
    
    Since AddressBook does not use a master tag list anymore, the model
    component diagram is not consistent with the program.
    
    Let's update the model component section in the developer guide.

[33mcommit f5d6eade2955210273dc684b97af85172e3624f9[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Mon Mar 26 12:27:35 2018 +0800

    UniqueTagList: remove UniqueTagList class
    
    Many methods in UniqueTagList, such as mergeFrom(UniqueTagList) and
    equalsOrderInsensitive(UniqueTagList), were previously used by only the
    AddressBook for the master tag list.
    
    Since AddressBook does not use a master tag list anymore, all these
    methods are no longer necessary. UniqueTagList now only serves to add
    complexity to the code base.
    
    Let's remove UniqueTagList.

[33mcommit bc08b4228506db69db388949e5141d578c3ba192[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Mar 29 07:05:38 2018 +0800

    XmlSerializableAddressBook: remove tags list
    
    XmlSerializableAddressBook keeps a list of tags, which is used for
    storing the master tag list in the AddressBook object.
    
    Since AddressBook no longer has a master tag list, it is unnecessary
    to store the master tag list in XmlSerializableAddressBook.
    
    Let's remove tags from XmlSerializableAddressBook.
    
    Similarly, it is now unnecessary for ReadOnlyAddressBook to have a
    method for retrieving the master tag list.
    
    Let's remove ReadOnlyAddressBook#getTagList().

[33mcommit d51894a83bb3d2fa81eb65175b9a275b3cf79b45[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Mar 29 07:05:29 2018 +0800

    AddressBook: remove master tag list
    
    We keep track of a master tag list which holds all the tags in
    AddressBook.
    
    The tag list is not implemented correctly. The original intention was
    for tags in Person to point to the tags in the master tag list.
    However, implementing it in this way may be too complex for new
    developers to grasp, as discussed in #753. Furthermore, from the
    discussion in #794, the tag list in its current state is not needed.
    
    Let's remove the master tag list in AddressBook.

[33mcommit 435849cc90112cc08c2a892352dd28a82e543a88[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Fri Mar 23 16:51:24 2018 +0800

    Gradle: upgrade to JUnit5
    
    Gradle uses JUnit 4.12 for testing which is an older version of JUnit.
    
    Let's upgrade to JUnit 5. To use JUnit 5, we need to add in additional
    dependencies junit-jupiter-api and junit-jupiter-engine.
    Junit-jupiter-engine is used to execute the JUnit 5 tests during
    runtime, while junit-jupiter-api provides the api required for writing
    tests. Also, we need to use JUnit Platform, which is how Gradle
    enables JUnit to run tests using its engine.
    
    JUnit 5 has a few differences with JUnit 4, which means the tests will
    need to be changed to run on the JUnit 5 engine. Some examples of
    differences between JUnit5 and JUnit4 tests:
    1. Different imports. (e.g. org.junit.jupiter.api.Test instead of
    org.junit.Test)
    2. Test cannot be used for specifying expectations. We use this to
    specify timeout in `PersonListPanelTest`. Instead we should now use
    assertTimeoutPreemptively
    3. @Before is renamed to @BeforeEach
    4. @After is renamed to @AfterEach
    5. @BeforeClass is renamed to @BeforeAll
    6. @AfterClass is renamed to @AfterAll
    7. We can group assertions together using assertAll
    8. @Rule and @ClassRule are not used in JUnit5. Instead, we need to
    @ExtendWith, which generally requires creating an extension class.
    
    Let's enable legacy support for JUnit 4 tests. By adding
    junit-vintage-engine as a dependency, JUnit 4 tests can be run
    normally.

[33mcommit cd082fb50934c25f1cd25fabd99e347e4f7ed0fb[m
Merge: a4ef5229 e2e5da3f
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sun Apr 1 10:07:19 2018 +0800

    [#819] HelpWindow: multiple help windows can be opened (#850)
    
    MainWindow creates and shows a new HelpWindow whenever
    MainWindow#handleHelp() is called. This allows multiple HelpWindows to
    be opened at the same time by executing HelpCommand, pressing Help menu
    button or F1 button multiple times.
    
    Since each HelpWindow is exactly the same, having extra copies is
    unnecessary and thus multiple HelpWindows should be disallowed.
    
    Let's update MainWindow to hold and show a single HelpWindow instance.

[33mcommit e2e5da3f4bdbb8275f9f1eb78c761ad4c8d50b25[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Thu Mar 15 13:36:46 2018 +0800

    MainWindow: focus on helpWindow if already open
    
    If the HelpWindow is already open, HelpWindow#show() does not focus
    on the already open window.
    
    This can be confusing to users since a HelpWindow does not seem to
    appear even after running any command to open the HelpWindow.
    
    Let's update MainWindow to focus on the HelpWindow if it's already
    open.
    
    Due to an issue with JavaFX Monocle[1], where multiple stages can be in
    focus when tests are run in headless mode, we are unable to test for
    checking if HelpWindow comes into focus if we call
    MainWindow#handleHelp() while the HelpWindow is open at the moment.
    
    [1] Issue with JavaFX Monocle where multiple stages can be in focus:
    https://github.com/javafxports/openjdk-jfx/issues/50

[33mcommit 1ae40e07be9c63d5154727c73c70434edee69538[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Thu Mar 15 12:49:52 2018 +0800

    MainWindow: add new helpWindow field
    
    MainWindow creates and shows a new HelpWindow whenever
    MainWindow#handleHelp() is called. This allows multiple HelpWindows to
    be opened at the same time by executing HelpCommand, pressing Help menu
    button or F1 button multiple times.
    
    Since each HelpWindow is exactly the same, having extra copies is
    unnecessary and thus multiple HelpWindows should be disallowed.
    
    Let's update MainWindow to hold and show a single HelpWindow instance.

[33mcommit a4ef5229e29bb1da91d462a650ee82c243ab1b7c[m
Merge: d0b0734b 0e9b9d0d
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Mar 19 21:04:23 2018 +0800

    [#796] PersonListPanel#personListView: revert type change (#818)
    
    personListView is of type ListView<PersonCard>. We use EasyBind library
    to map the Person objects to PersonCard objects. The mapping / applying
    of Function<? super F, ? extends E> occurs only when either get(int) or
    getRemoved() methods are called[1]; the creation of PersonCard objects
    occur only when either of these methods are called.
    
    The ClearCommand deletes all Person objects. When we have large number
    of persons and getRemoved() is called, all the corresponding cards
    will be created prior to them being removed. As creation of PersonCard
    objects are costly, the app slows down tremendously.
    
    Let's revert ListView<PersonCard> to ListView<Person>.
    PersonListViewCell will create the PersonCard object. According to
    javadoc for Cell that "it is not feasible to create an actual Cell for
    every single item in the control. We represent extremely large data
    sets using only very few Cells. Each Cell is "recycled", or reused."[2]
    A Cell is created for every row in the ListView that is displayed on
    the scene i.e. that is visible to the user, and additional Cells may be
    created for efficient scroll handling.[3] This implies that there will
    only be about 10 Cells at any point in time since the default screen
    size is only large enough to display 10 Cells. Therefore, there will
    only be about 10 PersonCard objects at any point. Creation of 10
    PersonCard objects is performed in negligible time, thus the app no
    longer slows down. This commit is performed by reverting from
    75cbfa3.
    
    Also, since PersonCard objects are only created when the card is
    displayed on the list view, let's teach
    GuiTestAssert#assertListMatching(PersonListPanelHandle, Person...) and
    AddressBookSystemTest#assertSelectedCardChange(Index) to navigate to
    the card that they are verifying before performing the verification.
    
    [1]: https://github.com/TomasMikula/EasyBind/blob/master/src/main/java/org/fxmisc/easybind/MappedList.java
    [2]: https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Cell.html
    [3]: https://stackoverflow.com/questions/18159303/listview-in-javafx-adds-multiple-cells

[33mcommit 0e9b9d0d8571c86432977c6844a5a4c9d9b6ba7f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jan 30 13:29:42 2018 +0800

    Gradle: remove EasyBind dependency
    
    EasyBind is no longer used in our code base.
    
    Let’s remove it. Also, let’s update README.md to reflect this change.

[33mcommit 4ec524489670b3a424c1b15aa3776bda84badacb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Feb 8 20:28:42 2018 +0800

    PersonListPanel#personListView: revert type change
    
    personListView is of type ListView<PersonCard>. We use EasyBind library
    to map the Person objects to PersonCard objects. The mapping / applying
    of Function<? super F, ? extends E> occurs only when either get(int) or
    getRemoved() methods are called[1]; the creation of PersonCard objects
    occur only when either of these methods are called.
    
    The ClearCommand deletes all Person objects. When we have large number
    of persons and getRemoved() is called, all the corresponding cards
    will be created prior to them being removed. As creation of PersonCard
    objects are costly, the app slows down tremendously.
    
    Let's revert ListView<PersonCard> to ListView<Person>.
    PersonListViewCell will create the PersonCard object. According to
    javadoc for Cell that "it is not feasible to create an actual Cell for
    every single item in the control. We represent extremely large data
    sets using only very few Cells. Each Cell is "recycled", or reused."[2]
    A Cell is created for every row in the ListView that is displayed on
    the scene i.e. that is visible to the user, and additional Cells may be
    created for efficient scroll handling.[3] This implies that there will
    only be about 10 Cells at any point in time since the default screen
    size is only large enough to display 10 Cells. Therefore, there will
    only be about 10 PersonCard objects at any point. Creation of 10
    PersonCard objects is performed in negligible time, thus the app no
    longer slows down. This commit is performed by reverting from
    75cbfa3804ff365646e903514282d9313da4300e.
    
    Also, since PersonCard objects are only created when the card is
    displayed on the list view, let's teach
    GuiTestAssert#assertListMatching(PersonListPanelHandle, Person...) and
    AddressBookSystemTest#assertSelectedCardChange(Index) to navigate to
    the card that they are verifying before performing the verification.
    
    [1]: https://github.com/TomasMikula/EasyBind/blob/master/src/main/java/org/fxmisc/easybind/MappedList.java
    [2]: https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Cell.html
    [3]: https://stackoverflow.com/questions/18159303/listview-in-javafx-adds-multiple-cells

[33mcommit 02b83a0b273bfcad4af5d84049aae98d31ac7622[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Feb 8 20:27:52 2018 +0800

    PersonListPanelHandle#navigateToCard(Person): update logic
    
    navigateToCard(Person) navigates to the card containing the person
    passed in as parameter, and selects the card.
    
    The selection of the card is an unexpected behaviour as it is not
    clear from the naming of the method. Also, there’s no need for this
    method to select the card.
    
    Let’s update this method to no longer select the card that it navigates
    to.

[33mcommit d0b0734bd186aeccfafbbebe88ff73534b8e4973[m
Merge: 2f4405c7 889a1051
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Mar 19 20:38:44 2018 +0800

    [#374] build.gradle: update to build project using Java 9 (#837)
    
    The project currently runs on Java 8.
    
    We should ensure compatibility with the latest public version as soon
    as it is out.
    
    Let's upgrade the project to run on Java 9.

[33mcommit 889a105171958f3436bc7d13a5c89810800c75f4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 1 13:48:10 2018 +0800

    build.gradle: upgrade to use Java 9
    
    The project currently runs on Java 8.
    
    We should ensure compatibility with the latest public version as soon
    as it is out.
    
    Let's upgrade the project to run on Java 9 and update the documentation
    accordingly.
    
    Some of the properties in gradle.properties are no longer supported.
    As PermGen has been replaced with Metaspace, -XX:MaxPermSize=size has
    ceased support [1] and has been replaced with -XX:MaxMetaspaceSize [2].
    Also, -XX:CMSPermGenSweepingEnabled has been superseded by
    -XX:+CMSClassUnloadingEnabled and removed in JDK 9 [3][4].
    -XX:+CMSClassUnloadingEnabled however, is useless now. When PermGen was
    used previously, this command line argument ensured that PermGen was
    garbage collected [5]. However, Metaspace is automatically garbage
    collected [6], therefore there's no replacement for this argument.
    Let's remove or update these properties accordingly.
    
    Travis & AppVeyor are building the project using JDK 8. Since we are
    now running on Java 9, let's update them to build the project using
    JDK 9.
    
    To run tests using TestFX on Java 9, we have to update the dependencies
    in build.gradle. Let's update it according to TestFX's
    documentation [7].
    
    Java 9 introduces a module system, causing internal packages such as
    javax.* and com.sun.* packages to be inaccessible. As our project uses
    these packages, our code is no longer compilable. Let's update
    build.gradle to import these modules.
    
    [1]: https://docs.oracle.com/javase/9/migrate/toc.htm
    [2]: http://java-latte.blogspot.sg/2014/03/metaspace-in-java-8.html
    [3]: http://www.oracle.com/technetwork/java/javase/9-removed-features-3745614.html
    [4]: https://stackoverflow.com/questions/3717937/cmspermgensweepingenabled-vs-cmsclassunloadingenabled
    [5]: https://stackoverflow.com/questions/3334911/what-does-jvm-flag-cmsclassunloadingenabled-actually-do
    [6]: http://kkgulati.blogspot.sg/2014/09/java-8-memory-model-metaspace.html
    [7]: https://github.com/TestFX/TestFX#java-9

[33mcommit e4ddf5349003df5facad7daef361ac6096d4e490[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Mar 1 14:44:13 2018 +0800

    build.gradle: upgrade to newest version
    
    The version of Gradle we are using is 2.12.
    
    This version of Gradle does not support projects that are using
    Java 9 [1]; an error of "Could not determine java version from
    '9.0.4'" occurs.
    
    Let's upgrade the version of Gradle to the newest version.
    
    [1]: https://blog.gradle.org/java-9-support-update

[33mcommit 2f4405c75cd21111952565a9706a9793b475c41e[m
Merge: 088db25e f0900903
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Mar 2 23:57:46 2018 +0800

    [#830] UniquePersonList, AddressBook: update return type for remove and removePerson (#836)
    
    AddressBook#removePerson(Person) returns true if the person passed into
    this method can be found in the internal list.
    UniquePersonList#remove(Person) returns true if the person passed into
    this method can be found in the internal list, and false otherwise.
    They both also throw PersonNotFoundException if a person cannot be
    found.
    
    Returning a boolean is not required as the thrown exception would
    indicate that the person cannot be found.
    
    Let's update the return type for AddressBook#removePerson(Person) and
    UniquePersonList#remove(Person) to void.

[33mcommit 088db25ef7d977f3aae56a71324cd1d8879ca1ee[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Fri Feb 16 22:57:51 2018 +0800

    MainWindow.fxml: update onCloseRequest event to call handleExit()
    
    The MainWindow does not have an event handler to handle external
    requests (such as the close button or through the taskbar) to close
    the MainWindow.
    
    This may cause the app to not close properly since MainApp#stop() is
    not called as the ExitAppRequestEvent is not raised. MainApp#stop() is
    the method used to call Platform#exit() and System#exit(int) which
    closes our app and all remaining open windows. Thus, if MainApp#stop()
    is not called, the app may continue to run even after the MainWindow is
    closed, causing existing HelpWindows to remain open even when the user
    expects the app to stop.
    
    According to the life-cycle section in the documentation on JavaFX
    Application[1], the app will only finish and call MainApp#stop() when
    the app either calls Platform#exit() or when the last window has been
    closed. Thus, should there be any HelpWindows still opened, the app
    will continue running, causing those HelpWindows to remain open.
    
    Let's add an event handler for the onCloseRequest event in the root of
    MainWindow.fxml. This event will call MainWindow#handleExit(), which
    raises an ExitAppRequestEvent, when there is an external request to
    close the app.
    
    EmptyMainWindowHandle does not contain a close button, thus to test if
    an ExitAppRequestEvent was raised, we fire a
    WindowEvent#WINDOW_CLOSE_REQUEST event which will trigger the
    onCloseRequest event.
    
    [1] JavaFx documentation for Application:
    https://docs.oracle.com/javafx/2/api/javafx/application/Application.html

[33mcommit f09009030214ae714fc7169ef281c02fa885472c[m
Author: nicholaschuayunzhi <nicholaschuayunzhi@gmail.com>
Date:   Wed Feb 28 14:48:10 2018 +0800

    UniquePersonList#remove(Person): update return type
    
    UniquePersonList#remove(Person) returns true if the person passed into
    this method can be found in the internal list, and false otherwise. It
    also throws PersonNotFoundException if a person is not found.
    
    Returning a boolean is not required as the exception is thrown before
    the value is returned.
    
    Let's update the return type for UniquePersonList#remove(Person) to
    void.

[33mcommit 0cc5f3991569ca71853e182b8baa7c8e15e3c14e[m
Author: nicholaschuayunzhi <nicholaschuayunzhi@gmail.com>
Date:   Wed Feb 28 15:05:36 2018 +0800

    AddressBook#removePerson(Person): update return type
    
    AddressBook#removePerson(Person) returns true if the person passed into
    this method can be found in the internal list, and throws a
    PersonNotFoundException otherwise.
    
    Returning a boolean is not required as the thrown exception would
    indicate that the person cannot be found.
    
    Let's update the return type for AddressBook#removePerson(Person) to
    void.

[33mcommit 529d75ffaf497d650fc077251bb3eb0fe976c5e8[m
Merge: ee0cc820 cf8761d3
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Feb 22 18:12:32 2018 +0800

    [#634] Replace all verbose loops with lambda expression (#805)
    
    Many loops are verbose.
    
    This leads to longer lines of code that are not concise nor clean.
    
    Let's replace these verbose loops with lambda expressions to improve
    code quality.

[33mcommit ee0cc82032e634d04943edf94abf0baaf360a90e[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Tue Feb 20 18:20:09 2018 +0800

    Add documentation to set up and use Netlify
    
    There is no documentation on how to set up Netlify.
    
    With a detailed explanation, new developers can set up Netlify easily
    and preview the updated documentation when a pull request is made.
    
    Let's add detailed documentation on how to set up Netlify along with
    additional information on customization.

[33mcommit 3f0c7a11bcd741ad229009c1e2074e0dc8557c50[m
Merge: 4578b2c6 1a171114
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sun Feb 18 19:04:51 2018 +0800

    [#725] XmlAdaptedPerson#toModelType(): Enforce checking of required parameters (#806)
    
    XmlAdaptedPerson#toModelType() does not have a non-null check for each
    parameter in person before the isValid*(String).
    
    When null value is passed into the parameter's isValid*(String) check,
    a NullPointerException is thrown, causing the app to crash.
    
    Let's update XmlAdaptedPerson#toModelType() to have a separate non-null
    check for each parameter before passing them into the isValid*(String)
    check.

[33mcommit 4578b2c65608f99d3d8347f41ae207e2e98689b7[m
Merge: 465b9241 fd9745e7
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Feb 15 08:40:43 2018 +0800

    [#784] Rebase PRs used in suggested programming tasks (#789)
    
    The suggested programming tasks contains sample solutions in the form
    of PRs.
    
    These PRs need to be rebased and updated to ensure that it still works
    in the newer version of the codebase.
    
    Let's update the links for the sample solutions to point to the new
    PRs, and update the writeups for any changes to the solution itself.

[33mcommit 1a17111472e3e486d98608bda7ea69a885c38d97[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sat Jan 20 15:37:23 2018 +0800

    XmlAdaptedPerson#toModelType: add non-null check for parameters
    
    XmlAdaptedPerson#toModelType() does not have a non-null check for
    Person's fields before isValid*(String) is called.
    
    When null value is passed as a parameter into isValid*(String), a
    NullPointerException is thrown, causing the app to crash.
    
    Let's update XmlAdaptedPerson#toModelType() to perform a separate
    non-null check for each parameter before passing them to
    isValid*(String).
    
    Let's also update the old tests in XmlAdaptedPersonTest to call
    Assert#assertThrows(Class, String, VoidCallable) instead to verify
    that the correct error message is thrown too, and add tests in
    XmlUtilTest for reading of XmlAdaptedPerson from .xml files.

[33mcommit 972ac5455b7bfd9df7c387b9065fe57993448615[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Tue Feb 13 01:21:06 2018 +0800

    XmlAdaptedPerson: update equals(Object) method
    
    XmlAdaptedPerson#equals(Object) does an equality check by calling the
    equals(Object) method for each of its field.
    
    As it is possible for some of these fields to be null due to a
    corrupted .xml save file, directly calling equals(Object) for any
    of these fields is not safe as it may lead to NullPointerException.
    
    Let's update XmlAdaptedPerson#equals(Object) to call the safer
    Objects.equals(Object, Object) method for the necessary fields.

[33mcommit eaf27da4e7b0de4aac5575ee68856c349b418eb5[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Fri Feb 9 17:27:33 2018 +0800

    Assert: add overloaded method assertThrows(Class, String, VoidCallable)
    
    Assert#assertThrows(Class<? extends Throwable>, VoidCallable) is a test
    utility method that helps to test if certain method call throws the
    specified class of Exception.
    
    Some methods tested throws different instances of the same Exception
    class with different exception messages to indicate different errors.
    Thus there is a need for a stronger test to ensure we are testing for
    the correct Exception instance for these methods.
    
    Let's add an overloaded method
    assertThrows(Class, String, VoidCallable) which takes in an additional
    expectedMessage String parameter for an additional verification check
    of the exception message.

[33mcommit fd9745e7e05a4eccab8bf65aedb39895735573db[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jan 7 11:00:14 2018 +0800

    DeveloperGuide: Add scenarios to suggested programming tasks
    
    The suggested programming tasks are just a list of tasks to do.
    
    Providing the background context of the tasks makes them more
    interesting and real, which will give a better motivation for the
    students to implement the features.
    
    Let's add some fictional scenarios to the suggested programming
    tasks.

[33mcommit 152c0a96ec6e5af82de2ff6228e53305fc79e9dd[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Feb 11 12:24:55 2018 +0800

    DeveloperGuide: Update 'remark' suggested programming task

[33mcommit 53fe6910de7bcb524e4ac71632c8866d4df00790[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Feb 11 12:06:16 2018 +0800

    DeveloperGuide: Update 'storage' suggested programming task
    
    * Update writeup to mention that we need to implement it in 2
    classes instead of 1.

[33mcommit 67485c6f1b65ff19bfafda8cc510da150ddfff23[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Feb 11 11:59:38 2018 +0800

    DeveloperGuide: Update 'ui' StatusBar suggested programming task
    
    * Change PR url to the updated version.
    * Update solution writeup to include system tests.

[33mcommit 39a277c0e03488d9997d6138c765080dfdccee8c[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jan 31 17:33:23 2018 +0800

    DeveloperGuide: Update 'ui' ResultDisplay suggested programming task
    
    * Change PR url to the updated version.
    * Update solution writeup to include unit tests and system tests.
    * Update solution writeup to mention that you should "read one commit at
      a time"

[33mcommit b5495cc8b712d0e923df9ed914de2677730ac836[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jan 31 17:02:11 2018 +0800

    DeveloperGuide: Update the images for 'ui' tags task

[33mcommit cb350e89805e9329014ede509d3ecb777c3286e6[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jan 31 17:14:54 2018 +0800

    DeveloperGuide: Update 'ui' tags suggested programming task
    
    * Change PR url to the updated version.
    * Update solution writeup to include tests.
    * Update solution writeup to include a basic description of how the
      color generation works.
    * Update hints because the method that it was mentioning no longer exist.
    * Update hints to talk about modifying css files for pre-defined colors.

[33mcommit 7414339c3423f2070776c219e0be5a433b720998[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Jan 27 23:41:35 2018 +0800

    DeveloperGuide: Update 'model' suggested programming task
    
    * Change PR url to the updated version.
    * Update solution writeup to include tests.
    * Update hints to mention about the SLAP design.
    * Added a note about the tags flaw in the codebase.

[33mcommit ce82a961f90c7e96a75c7e8a7ea61048bfa6f6fe[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jan 7 10:24:39 2018 +0800

    DeveloperGuide: Update 'logic' suggested programming task
    
    * Change PR url to the updated version.
    * Update solution writeup to include tests and documentation.

[33mcommit 465b9241ec9fa220bb163ab5e98cecd735c8da69[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 13:17:37 2017 +0800

    README.adoc: add Gitter badge
    
    Let the world know where all the cool people hang out.

[33mcommit 433390f0c405892624687cf6677a0be047b6a18c[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Tue Feb 13 23:28:47 2018 +0800

    HelpWindow: modify HelpWindow#show() to use Stage#show()
    
    opened by typing help in the command box. For instance, the command box
    does not display the result message of subsequent commands. However,
    this does not occur when opening the help window by pressing F1 or
    pressing help from the help menu.
    
    This occurs due to a combination of using the default Dispatcher used
    by the Guava EventBus system, Dispatcher#perThreadDispatchQueue(),
    along with calling Stage#showAndWait(). Calling Stage#showAndWait(),
    starts a nested event loop to handle subsequent JavaFX events. However,
    the default Dispatcher used by the EventBus does not allow nested
    callback invocations, and instead queues them to be invoked after the
    current invoked callback, the MainWindow#handleShowHelpEvent()
    completes. As such, EventBus events are queued up in the meantime
    resulting in the subscribers of these events having to wait until the
    nested event loop is terminated (i.e. when the callback completes,
    after the help window is closed.) And so, the UI components will only
    receive these events and therefore update after the help window is
    closed.
    
    However, in the case of pressing F1 or pressing help from the help menu,
    MainWindow#handleHelp() is called immediately without posting the
    MainWindow#handleShowHelpEvent(). Since this event never enters the
    EventBus's queue, the nested event loop started by Stage#showAndWait()
    does not block it and subsequent EventBus events get dispatched as
    usual.
    
    Let's replace Stage#showAndWait() with Stage#show(), so
    that there will be no entering of a nested loop and hence no blockage
    of the Guava EventBus system.
    
    Likewise, this could be fixed by using the Dispatcher#immediate()
    dispatcher instead of the default dispatcher used by the Guava EventBus
    system. However, replacing Stage#showAndWait() with Stage#show() is
    more suitable in this case as it is sufficient to show the help window
    instead of starting a nested event loop to handle subsequent JavaFX
    events while waiting for the help window to be closed.
    
    JavaFX documentation for Stage:
    https://docs.oracle.com/javase/8/javafx/api/javafx/stage/Stage.html
    
    Code and documentation for the Guava Dispatcher:
    https://github.com/google/guava/blob/master/guava/src/com/google/common/eventbus/Dispatcher.java
    
    More information on the Guava EventBus system:
    https://github.com/google/guava/wiki/EventBusExplained

[33mcommit ad1931da167821973ba96acef54eb1fef8c8abe5[m
Merge: eaa0cfbe 4be7dd7d
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Feb 13 09:07:48 2018 +0800

    [#737] Issue with undo/redo and modifications to filtered lists (#792)
    
    EditCommand and DeleteCommand stores the target index of the person to edit
    or delete respectively.
    
    As a result, redoing of these index-based commands will be executed on the incorrect
    person due to different indexing in differing views.
    
    Let's update EditCommand and DeleteCommand to find and store the personToEdit
    or personToDelete respectively before it's first execution. This ensures that future
    execution of the same command will be on the correct person.

[33mcommit 4be7dd7dec961db460bc0f91364d8d6fe6f4453a[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sun Jan 28 01:23:16 2018 +0800

    EditCommandTest: add integration tests with Undo/RedoCommand
    
    EditCommandTest does not have any integration tests for the interaction
    with UndoCommand and RedoCommand on an unfiltered list.
    
    Let's add integration tests for the interaction of EditCommand with
    UndoCommand and RedoCommand on an unfiltered list.

[33mcommit ea2d584d8cbb1a8484aee258c6a69c481f19d264[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Sun Jan 28 01:23:16 2018 +0800

    DeleteCommandTest: add integration tests with Undo/RedoCommand
    
    DeleteCommandTest does not have any integration tests for the
    interaction with UndoCommand and RedoCommand on an unfiltered list.
    
    Let's add integration tests for the interaction of DeleteCommand with
    UndoCommand and RedoCommand on an unfiltered list.

[33mcommit 3563cea0184935f5542fd554c3cf685164111ac4[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Tue Jan 23 02:39:51 2018 +0800

    EditCommand#preprocessUndoableCommand(): find and store personToEdit
    
    EditCommand stores the target index of the person to edit.
    
    As a result, redoing of EditCommand will be executed on the incorrect
    person due to different indexing in differing views.
    
    Let's update EditCommand#preprocessUndoableCommand() to find and store
    the personToEdit before its first execution. This ensures that future
    execution of the same command will be on the correct person,
    independent of the current view.
    
    Let's also update EditCommand#equals(Object) method to include checking
    of personToEdit. This allows other classes to know that EditCommand
    transits between 2 states, preprocessed and not-preprocessed.

[33mcommit d840c89cb12c18786d9c12ebadbb3e1a52aa0441[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Tue Jan 23 02:39:03 2018 +0800

    DeleteCommand#preprocessUndoableCommand(): find store personToDelete
    
    DeleteCommand stores the target index of the person to delete.
    
    As a result, redoing of DeleteCommand will be executed on the incorrect
    person due to different indexing in differing views.
    
    Let's update DeleteCommand#preprocessUndoableCommand() to find and
    store the personToDelete before its first execution. This ensures
    that future execution of the same command will be on the correct person,
    independent of the current view.
    
    Let's also update DeleteCommand#equals(Object) method to include
    checking of the personToDelete. This allows other classes to know that
    DeleteCommand transits between 2 states, preprocessed and
    not-preprocessed.

[33mcommit 3825b9928e5a04ea485ae960f45c3f7391ec3345[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Wed Jan 31 14:19:57 2018 +0800

    CommandTestUtil: update showFirstPersonOnly(Model)
    
    CommandTestUtil#showFirstPersonOnly(Model) shows only the first
    person on the filtered list.
    
    Some other tests may require showing a person that is not the first in
    the unfiltered list. However, writing new methods to show a different
    single person on the filtered list will lead to boilerplate code.
    
    Let's update and rename showFirstPersonOnly(Model) to
    showPersonAtIndex(Model, Index) so that we can input any arbitrary
    index for the single person we want to have displayed on the filtered
    list.

[33mcommit 5c9b14d7a76dfd21ed11042e9ed122beef5a386d[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Tue Jan 23 02:16:31 2018 +0800

    UndoableCommand: add preprocessUndoableCommand() method
    
    UndoableCommand does not have a method to preprocess and generate
    the values required for the execution of the command.
    
    This leads to the commands handling the preprocessing step within the
    UndoableCommand#executeUndoableCommand() method. This violates SRP,
    as each method is only supposed to do only one thing.
    
    Let's add a new method preprocessUndoableCommand() for these commands
    to run their preprocessing step on.

[33mcommit eaa0cfbee95d15b88f550122d0c9f115f1c9a551[m
Merge: fa58ce52 3d99555b
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Feb 9 20:26:35 2018 +0800

    [#733] BrowserPanel: load dummy page (#793)
    
    BrowserPanel loads the Google search page whenever a person card
    is selected. The tests written for this feature verifies that the
    loaded web page is indeed the Google search page with the person's
    name.
    
    When many forks of this project are running automated tests, too many
    search requests are sent to Google, causing us to exceed the search
    service’s rate limits. This is an abuse of Google’s search service.
    Also, this causes our tests to fail as the loaded web page will be
    redirected to a captcha page.
    
    Let’s update BrowserPanel to load DummySearchPage.html which is hosted
    on GitHub Pages. GitHub Pages serve static web pages which requires
    much less processing power, thus it is more unlikely for us to exceed
    the search service’s rate limits.

[33mcommit fa58ce528b9f07575c06265474f99a1e44e515a5[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Fri Feb 9 11:24:21 2018 +0800

    Email: modify email regex to accept RFC 5322 permitted characters
    
    The email regex validation rejects valid inputs such as
    peter+jack@example.com. This due to the regex rejecting valid special
    characters such as "+".
    
    Rejecting such inputs prevents the user from adding contacts with an
    email that contains special characters.
    
    Let's modify the email regex validation to accept characters permitted
    by RFC 5322, the Internet Message Format.
    
    More details on email validation:
    https://en.wikipedia.org/wiki/Email_address#Syntax

[33mcommit 3d99555b370087fcbb5921cdf97d9ca595043246[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jan 26 10:57:51 2018 +0800

    BrowserPanel: load placeholder page instead of Google search page
    
    BrowserPanel loads the Google search page whenever a person card is
    selected, and there’s tests written for this feature.
    
    When many forks of this project are running automated tests, too many
    search requests are sent to Google, causing us to exceed the search
    service’s rate limits. This is an abuse of Google’s search service.
    Also, this causes our tests to fail as the loaded web page will be
    redirected to a captcha page.
    
    Let’s update BrowserPanel to load DummySearchPage.html which is hosted
    on GitHub Pages. GitHub Pages serve static web pages which requires
    much less processing power, thus it is more unlikely for us to exceed
    the search service’s rate limits.
    
    Also, let’s remove Google String constants as they are no longer used.

[33mcommit 29b02b499919a35c4fab269b12cb720069003176[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Feb 2 12:36:26 2018 +0800

    docs: add DummySearchPage.html
    
    BrowserPanel loads the Google search page whenever a person card is
    selected. The tests written for this feature verifies that the loaded
    web page is indeed the Google search page with the person's name.
    
    When many forks of this project are running automated tests, too many
    search requests are sent to Google, causing us to exceed the search
    service’s rate limits. This is an abuse of Google’s search service.
    Also, this causes our tests to fail as the loaded web page will be
    redirected to a captcha page.
    
    As part of updating BrowserPanel to no longer load from Google search
    page, let’s create a DummySearchPage.html in our docs folder. This file
    will be automatically deployed onto GitHub Pages whenever we push a
    commit to the master branch. GitHub Pages serve static web pages which
    requires much less processing power, thus it is more unlikely for us to
    exceed the search service’s rate limits and also more unlikely for us
    to be redirected to a captcha page.

[33mcommit 2e7f092c5e58dff587347304f59b0b8286abdaee[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Thu Feb 8 01:18:09 2018 +0800

    Tests: replace java assert with JUnit assert
    
    We use java assert in a few tests, and JUnit assert in others.
    
    Java asserts should not be used in test cases. This is because they can
    be disabled through the command line, causing these tests to pass while
    skipping over the assertion.
    
    Let's replace assert statements with junit.Assert.

[33mcommit 95611eb437b8e84e51f4b0555fa483fbad05a16b[m
Merge: 30857444 8846a3e9
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Feb 8 12:35:54 2018 +0800

    [#749] Storage layer needs proper error handling (#816)
    
    XmlSerializableAddressBook does not have a method to convert itself to
    an AddressBook object. It implements ReadOnlyAddressBook and has
    getPersonList() and getTagList() methods, which the caller uses to
    create an AddressBook object.
    
    By implementing ReadOnlyAddressBook, the overridden getPersonList()
    and getTagList() methods are unable to throw IllegalValueException to
    higher level components for error handling if there's errors in the
    .xml save file.
    
    Let's implement a toModelType() method in XmlSerializableAddressBook
    to allow the XmlSerializableAddressBook to convert itself to an
    AddressBook and remove it's implementation of ReadOnlyAddressBook.
    Let's also override the equals(Object) method in XmlAdaptedPerson,
    XmlAdaptedTag and XmlSerializableAddressBook

[33mcommit 8846a3e9d187f25917e8a0cce499226540e253a9[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Wed Jan 31 15:54:07 2018 +0800

    XmlSerializableAddressBook: override equals(Object) method
    
    XmlSerializableAddressBook does not override the equals(Object).
    
    This forces us to convert the XmlSerializableAddressBook to the
    model's AddressBook object before we can do equality testing between
    XmlSerializableAddressBook objects.
    
    Let's override equals(Object) in XmlAdaptedPerson and XmlAdaptedTag
    to compare by their values and override equals(Object) in
    XmlSerializableAddressBook to compare by their list of
    XmlAdaptedPerson and XmlAdaptedTag values.

[33mcommit 9ddcf41db702340951c13fb24b3edeb53cdc45ec[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Wed Jan 31 16:32:39 2018 +0800

    XmlSerializableAddressBook: remove ReadOnlyAddressBook implementation
    
    XmlSerializableAddressBook implements ReadOnlyAddressBook as we
    previously did not have a method to convert XmlSerializableBook to
    the model's AddressBook object.
    
    Since XmlSerializableAddressBook now has a toModelType() method to
    convert itself to the model's AddressBook object, there is no longer
    a need for XmlSerializableAddressBook to implement ReadOnlyAddressBook.
    
    Let's remove XmlSerializableAddressBook implementation of
    ReadOnlyAddressBook.

[33mcommit 913cf5b1d8cdd2692f650215d6db622e0aba4d33[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Mon Jan 29 00:24:20 2018 +0800

    XmlAddressBookStorage: call XmlSerializableAddressBook#toModelType()
    
    XmlAddressBookStorage#readAddressBook(String) treats the
    XmlSerializableAddressBook read as type ReadOnlyAddressBook. As such,
    the XmlSerializableAddressBook will be converted into an AddressBook
    through calling its methods getPersonList() and getTagList().
    
    As XmlSerializableAddressBook implements ReadOnlyAddressBook, the
    overridden getPersonList() and getTagList() methods are unable to
    throw IllegalValueException to higher level components for error
    handling if there's errors in the .xml save file.
    
    As part of removing XmlSerializableAddressBook implementation of
    ReadOnlyAddressBook, let's call
    XmlSerializableAddressBook#toModelType() in
    XmlAddressBookStorage#readAddressBook(String), allowing data
    conversion errors to be caught and handled.

[33mcommit 4bf6aebea998a9c32ccda4bf3397e7173885a50c[m
Author: Jun An <e0002937@u.nus.edu>
Date:   Mon Jan 29 00:14:15 2018 +0800

    XmlSerializableAddressBook: add toModelType() method
    
    XmlSerializableAddressBook does not have a method to convert itself to
    an AddressBook object. It implements ReadOnlyAddressBook and has
    getPersonList() and getTagList() methods, which the caller uses to
    create an AddressBook object.
    
    By implementing ReadOnlyAddressBook, the overridden getPersonList()
    and getTagList() methods are unable to throw IllegalValueException to
    higher level components for error handling if there's errors in the
    .xml save file.
    
    As part of removing XmlSerializableAddressBook implementation of
    ReadOnlyAddressBook, let's add a toModelType() method to convert
    the XmlSerializableAddressBook to the model's AddressBook object.
    
    In order to test that the toModelType() method throws
    IllegalValueException, we first need to construct an invalid
    XmlAdaptedPerson or XmlAdaptedTag. However, XmlSerializableAddressBook
    can only add XmlAdaptedPerson and XmlAdaptedTag to itself through
    it's constructor, which takes a ReadOnlyAddressBook. The model Person's
    object fields prevent us from assigning illegal values through
    execution of the app. Thus, the only way we can assign XmlAdaptedPerson
    or XmlAdaptedTag with illegal values to XmlSerializableAddressBook is
    through creating a .xml file with these illegal values, and reading
    the .xml file using XmlUtil#getDataFromFile(File, Class).

[33mcommit 308574442bc558c29975c721c79b607e774c14df[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Thu Jan 25 19:47:23 2018 +0800

    Checkstyle: remove unnecessary properties with default values
    
    Several properties in checkstyle.xml are using default values.
    
    According to the Checktyle documentation, these are not required if the
    default value is satisfactory.
    
    Let's remove these unnecessary properties to improve code quality.
    
    The following are links to the Checkstyle documentation for reference:
    SuppressionFilter:
    http://checkstyle.sourceforge.net/config_filters.html
    
    CustomImportOrder, AvoidStarImport:
    http://checkstyle.sourceforge.net/config_imports.html
    
    ConstantName, StaticVariableName, MemberName:
    http://checkstyle.sourceforge.net/config_naming.html
    
    LineLength:
    http://checkstyle.sourceforge.net/config_sizes.html
    
    NeedBraces, RightCurly:
    http://checkstyle.sourceforge.net/config_blocks.html
    
    Severity:
    http://checkstyle.sourceforge.net/config.html

[33mcommit a36b6375f749ea6d36e9cd9cc980e932c2f25d28[m
Author: Shradheya Thakre <tshradheya@gmail.com>
Date:   Thu Jan 25 18:03:09 2018 +0800

    DeveloperGuide.adoc: fix broken hyperlink to coding standard

[33mcommit a9a9c33b65d84463091baf1a15752428c586fdfd[m
Author: Joanne <joanneong225@gmail.com>
Date:   Thu Jan 25 00:37:35 2018 +0800

    LogicManager: remove unnecessary `this` in constructor
    
    The LogicManager constructor initializes several fields
    using the `this` keyword.
    
    As the history, addressBookParser and undoRedoStack fields
    are not shadowed by a method or constructor parameter, using
    `this` keyword is unnecessary and does not conform to coding
    standards [1].
    
    Let's remove unnecessary `this` keywords from LogicManager
    constructor to reduce noise and conform to coding standards.
    
    [1] https://github.com/oss-generic/process/blob/master/codingStandards/CodingStandard-Java.adoc#variables

[33mcommit e8de4c1614c89c4942d598da7938acbc929bc220[m
Author: A0162011A <e0112235@u.nus.edu>
Date:   Sat Jan 20 10:30:05 2018 +0800

    UiManager: delete duplicate code
    
    Both UiManager and MainWindow call primaryStage.setTitle().
    
    The setting of the title should not be the job of UiManager as different
    Windows may have different titles; each Window should be responsible for
    assigning its own title.
    
    Let's remove the duplicate code in UiManager.

[33mcommit cf8761d36dd906123d37b255eb20358e6e13f799[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sun Jan 21 20:07:22 2018 +0800

    UniquePersonList#setPersons(List<Person>): refactor verbose loop
    
    The for loop in UniquePersonList#setPersons(List<Person>) is verbose
    and it can be simplified.
    
    Since lambda expressions cannot handle exceptions, this loop cannot be
    replaced by a lambda expression and needs to be simplified instead.
    
    Let's simplify this for loop using
    CollectionUtil#elementsAreUnique(Collection<?>).

[33mcommit f5be0202febf4a8cb56e6ecf1c286a0a32bf41f0[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sun Jan 21 20:05:45 2018 +0800

    Replace verbose loops with lambda expressions
    
    Many loops are verbose.
    
    This leads to longer lines of code that are not concise nor clean.
    
    Let's replace these verbose loops with lambda expressions to improve
    code quality.

[33mcommit e7f43d3f05fd8e336c4387e059af92ed50a70512[m
Merge: 5928ea9f 9589b269
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jan 18 21:20:07 2018 +0800

    [#795] EditPersonDescriptor: update methods to perform defensive copy
    
    getTags() returns the same set of tags stored by this object, while
    setTags(Set<Tag>) assigns the given Set<Tag> to its field without
    defensive copy.
    
    Callers can modify the state of the Set<Tag> externally, thus breaking
    EditPersonDescriptor’s encapsulation.
    
    Let's update getTags() to return an unmodifiable set, and
    setTags(Set<Tag>) to perform a defensive copy of the input before
    assigning it to its field.

[33mcommit 5928ea9f44994c49428ff867e5859a10efe9606d[m
Merge: 0ea0ec44 82596b7b
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jan 18 21:12:11 2018 +0800

    [#751] Edit Make Person immutable (#765)
    
    Person is mutable.
    
    This is bad as:
    1. It is easy to break invariants by mutating an existing object which
    we do not own.
    2. No code uses Person’s setter methods.
    
    By making Person immutable, we can make the following improvements:
    1. Simplify the class hierarchy as we no longer require ReadOnlyPerson.
    2. Remove the need for defensive copying of Person objects.
    
    Let’s make Person immutable.

[33mcommit 82596b7b65d0e8e35333cfebf321c597a3c71350[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jan 10 12:11:55 2018 +0800

    Person: Remove copy constructor
    
    This copy constructor existed for the purpose of defensive copying.
    
    Person is immutable. There is no need for defensive copying.
    
    Let’s remove it.
    
    Some methods depended on Person's copy constructor to throw
    NullPointerException if the given Person object is null. Let's teach
    those methods to verify that the given Person object is non-null.

[33mcommit 765b316c046281420c2e62d17287d35abec30713[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jan 10 12:07:54 2018 +0800

    Remove UniquePersonList#mappedList
    
    mappedList is exactly the same as internalList.
    
    There’s no need to have 2 variables having the exact same content.
    
    Let’s remove mappedList.

[33mcommit 345d05f6ef97f13a3a0419a60117582dbb4e0506[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jan 10 12:03:56 2018 +0800

    Remove ReadOnlyPerson
    
    ReadOnlyPerson provides a read-only immutable interface for Person.
    
    Person is already immutable. This removes the need for ReadOnlyPerson.
    
    Let's replace all instances of ReadOnlyPerson with Person.
    
    Mechanical changes:
    1. Delete ReadOnlyPerson. Ensure that all
    "import seedu.address.model.person.ReadOnlyPerson;" statements are
    deleted.
    2. Use the replace all functionality to replace
    "? extends ReadOnlyPerson" with "Person" for all text files.
    3. Use the replace all functionality to replace
    "ReadOnlyPerson" with "Person" for all text files.
    
    At this point, the code base will not compile as the
    "import seedu.address.model.person.Person;" statement is missing in
    some files. You will have to manually add this line to those files,
    using your IDE's tooling if applicable. On Eclipse, you can press
    Ctrl + Shift + O to do so.
    
    Furthermore, in AddressBook#updatePerson(Person, Person), the code will
    not compile because a variable is re-defined. This will also need to be
    manually fixed as well.
    
    Finally, rewrap some lines which have become too short as a result of
    the find-and-replace in steps 2 and 3.
    
    This commit was performed using IntelliJ.

[33mcommit c4758e1847989a7d2d5fe776a6273cccb8e9168d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jan 10 09:24:49 2018 +0800

    Person: Inline ReadOnlyPerson’s methods
    
    ReadOnlyPerson#isSameStateAs(ReadOnlyPerson) and
    ReadOnlyPerson#getAsText() are used by Person.
    
    In the next commit, we will be deleting ReadOnlyPerson. In preparation
    for that, let's inline these methods into Person.

[33mcommit b2eeb18be647ff929beb79e3ff4e864bc41b974d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Dec 20 12:04:41 2017 +0800

    Person: Make immutable
    
    Person is mutable.
    
    This is bad as:
    1. It is easy to break invariants by mutating an existing object which
    we do not own.
    2. No code uses Person’s setter methods.
    
    By making Person immutable, we can make the following improvements
    in future commits:
    1. Simplify the class hierarchy as we no longer require ReadOnlyPerson.
    2. Remove the need for defensive copying of Person objects.
    
    Let’s make Person immutable.
    
    Also, let’s remove redundant test in PersonCardTest.
    
    PersonCardTest verifies that whenever a Person object (Model) is
    updated, the corresponding PersonCard (View) is updated as well.
    
    As we are making Person to be immutable, this test is no longer
    necessary.

[33mcommit 937ae1585ed6433719ef80df7d4a690041719379[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Dec 20 12:02:49 2017 +0800

    PersonBuilder: Update methods to not use Person’s setter methods
    
    PersonBuilder creates a Person object upon initialization, and uses
    Person’s setter methods to update the values of the Person object.
    
    As part of making Person to be immutable, let's update these methods
    to not use Person’s setter methods. Instead of having a field of type
    Person, PersonBuilder will have 5 fields of types Name, Phone, Email,
    Address & Set<Tag> to represent the values of the Person object that it
    is building.

[33mcommit 4ef1b8eb362f77e56eae457e3b49fb0ece24dc61[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Dec 20 11:51:13 2017 +0800

    AddressBook#resetData(ReadOnlyAddressBook): Reorder logic
    
    resetData(...) performs the following operations in order:
    * Setting new values for UniquePersonList `persons` and UniqueTagList
    `tags`
    * Synchronizing the tags in `persons` with `tags`
    
    This order of execution requires Person to be mutable so that the tags
    in `persons` can be synchronized with `tags`.
    
    As part of making Person to be immutable, let's reorder the logic by
    performing the synchronization before setting new values for
    UniquePersonList `persons`.
    
    Also, let's update syncMasterTagListWith(Person) to take in a
    ReadOnlyPerson instead since we are making Person immutable and should
    no longer set a Person's tags. As a result,
    syncMasterTagListWith(Person) will have to return a Person object.
    Let's also update the method name and header comments to reflect these
    changes.

[33mcommit 9589b269136b8d9291417f9ffff9521c6f07bf8a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jan 11 19:56:32 2018 +0800

    EditPersonDescriptor#getTags(): return unmodifiable set
    
    getTags() returns the same set of tags stored by EditPersonDescriptor.
    
    Callers can modify the state of the Set<Tag> externally, thus breaking
    EditPersonDescriptor’s encapsulation.
    
    Let’s teach getTags() to return an unmodifiable set of tags instead.
    As such, callers will no longer be able to modify the set of tags stored
    by EditPersonDescriptor externally.

[33mcommit 28ff2e4d1a73b62c010294fd46c96532828e7a72[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jan 15 22:11:44 2018 +0800

    EditPersonDescriptor: update copy constructor to use setter methods
    
    The copy constructor assigns tags through setter method, but other
    fields are assigned values directly.
    
    This is inconsistent.
    
    Let's update the copy constructor to call the setter methods to assign
    values to the fields.

[33mcommit 3575eaa280a65ea7ed6c32a4da07575b41f629c1[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jan 11 19:52:49 2018 +0800

    EditPersonDescriptor#setTags(Set<Tag>): perform defensive copy
    
    setTags(Set<Tag>) does not perform defensive copy of the input Set<Tag>
    before assigning it to its field.
    
    Callers can modify the state of the Set<Tag> externally, thus breaking
    EditPersonDescriptor’s encapsulation.
    
    Let’s update setTags(Set<Tag>) to perform a defensive copy of the input
    before assigning it to its field.
    
    Also, let's update the copy constructor to assign tags through the
    setter method.

[33mcommit 0ea0ec44c167a5b8486e284b93c2f424332bd465[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Mon Jan 15 22:56:30 2018 +0800

    Add documentation on how to set up and use Coveralls
    
    There is no documentation on how to set up Coveralls.
    
    With a detailed explanation, new developers can set up Coveralls easily
    and receive coverage report after each Travis build.
    
    Let's add detailed documentation on how to set up Coveralls along with
    additional information on customization.

[33mcommit 1bee16fe4bcefbb02c8c87191e136aaadcbe53e8[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Wed Jan 10 20:46:21 2018 +0900

    [#415] Ui: fix default PersonListPanel background color (#791)
    
    Normally, the background of the PersonListPanel is gray in color.
    However, it changes to white color when no Person is listed.
    
    This does not fit the dark theme style of other parts of the Ui as the
    difference in color makes the PersonListPanel stand out rather
    prominently.
    
    Let's fix this by setting the default background color of
    PersonListPanel to match the rest of the Ui.

[33mcommit 6b8ea09ef882b4b2a609b98cf681a44ee7a5db83[m
Merge: 3a228ef6 659e5c2c
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Jan 8 20:02:00 2018 +0800

    [#264] Replace use of `assert false` with `throw new AssertionError()` (#788)
    
    In some places of the code, we use `assert false` to indicate the
    execution has reached an unacceptable state.
    
    This is not compliant with our code style (as revised by [1]) which
    states `throw new AssertionError()` is preferred for such situations.
    
    Let's replace `assert false` with `throw new AssertionError()` where
    applicable.
    
    [1] oss-generic/process#19

[33mcommit 659e5c2c6f774ddc94fa08ae3209474e37b35ac5[m
Author: YAMIDARK\Jun An <e0002937@u.nus.edu>
Date:   Fri Jan 5 10:59:28 2018 +0800

    Replace use of `assert false` with `throw new AssertionError()`
    
    In some places of the code we use `assert false` to indicate the
    execution has reached an unacceptable state.
    
    This is not compliant with our code style (as revised by [1])  which
    states `throw new AssertionError()` is preferred for such situations.
    
    Let's replace `assert false` with `throw new AssertionError()` where
    applicable.
    
    [1] https://github.com/oss-generic/process/issues/19

[33mcommit 3a228ef6fcdfc527cf29b95de2483ecc158f330b[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Jan 5 10:59:28 2018 +0800

    [#775] Developer Guide: specify target user profile and value proposition (#776)
    
    One needs to have a clearly defined target user profile and a value
    proposition for the app before other requirements are defined. Both
    are not specified in the Developer Guide.
    
    Let's add a sample target user profile and a value proposition to the
    DG as a separate appendix named 'Product Scope'.

[33mcommit 775c99611be1ed6d7cec80a20eac5539d60f64a1[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jan 4 19:16:16 2018 +0800

    [#766] Developer Guide: Update Undo/Redo numbering (#766)
    
    There's '3.1.1. Design Considerations', but there aren’t any further
    numberings such as 3.1.2.
    
    Let’s update the header 'Undo/Redo mechanism' to 'Undo/Redo feature',
    and let’s segment this section to have 2 sub-headers
    'Current Implementation' and 'Design Considerations'.

[33mcommit ba819b252a9a3d5435adfd16de63a80bba79c844[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Jan 4 19:13:32 2018 +0800

    [#781] README: acknowledge use of third-party libraries (#782)
    
    While it is not strictly necessary (and is a maintenance burden) to
    list third-party libraries in the README, it may be beneficial as a
    reminder to students to be as open about reuse of libraries as possible.
    
    Let's acknowledge in the README the libraries used by the app.

[33mcommit ac5f832aab7d9cabc7f067c8ada14b5d3cac91ac[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Jan 4 19:12:42 2018 +0800

    [#779] User Guide: add an introduction (#780)
    
    Let's add an introduction to the UG which specifies the following:
    * target user profile
    * value proposition
    
    Benefits:
    1. the reader gets an early preview of if the app is a good fit for
       her needs
    2. students peer-testing an app based on the UG has easy access to
       the target user profile and the value proposition

[33mcommit 78efa6a82326f6dd4bccea157ca53a455d8cace5[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Jan 4 19:10:36 2018 +0800

    [#777] Developer Guide: add instructions for manual testing #777 (#778)
    
    Students need instructions for manual testing an app when they are
    peer-testing apps.
    
    Let's add instructions for manual testing as an appendix of the DG,
    which will eliminate the need for students to submit that information
    as a separate document in their project submissions.

[33mcommit ee1720b839a6d18be9e23925db4c8d0ae77c6aec[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Jan 4 19:01:58 2018 +0800

    [#773] Developer Guide: tweak undo/redo diagrams (#774)
    
    Some diagrams in the the explanation of the undo/redo feature take more
    space than they need. This is especially a problem because that segment
    is included in the sample Project Portfolio Page which has a page limit.
    
    Let's tweak the relevant diagrams to be more space efficient.

[33mcommit 3c0a29c961a3417e57a6586f13895e784fe6d546[m
Merge: ab7a0601 73b2c0fe
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Jan 4 18:52:30 2018 +0800

    [#771] Restructure sample Project Portfolio Page for easier reading (#772)
    
    The structure of the sample Project Portfolio Page (PPP) makes it
    difficult to read due to,
    1. mixing of UG/DG extracts inside the main document body.
    2. mismatch of PPP heading levels and those of UG/DG extracts
    
    Let's restructure it to clearly separate,
    1. summary of Contributions in point form
    2. contributions to the UG
    3. contributions to the DG
    
    Also, let's tweak heading levels of PPP so that headings of included
    extracts match the the heading structure of PPP.
    
    To match the restructured sample PPP, let's tweak existing docs
    as follows:
    1. Add 'proposed' features to the DG and UG so that they can be
       included in the sample PPP.
    2. Remove horizontal lines in the DG segments included in PPP
       so that they don't interfere with the visual hierarchy of the
       sample PPP.
    3. Use italics for 'notes to students' in other docs to follow the
       convention used in the sample PPP.

[33mcommit 73b2c0fed594b7087bbc003d4abea087adf8ca71[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Dec 30 15:41:00 2017 +0800

    Use italics for 'notes to students'
    
    The restructured sample Project Portfolio Page uses italics for 'notes
    to students' e.g. _{more to be added}_ so that they are easy to
    distinguish from normal contents.
    
    Let's update other docs to follow the same convention.

[33mcommit 5c6a858886e3f408ebd6b754e9d01c3c9c75cbe0[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Dec 30 18:06:15 2017 +0800

    Developer Guide: Remove horizonal lines in undo/redo explanation
    
    The explanation of the undo/redo feature in the DG contains a number of
    horizontal lines which are used to show visual hierarchy of the content.
    This part of DG is included in the sample Project Portfolio Page (PPP)
    and that results in the said horizontal lines interfering with the
    visual hierarchy of the sample PPP.
    
    Let's remove the offending horizontal lines and use headings and bullet
    points to show the visual hierarchy instead.

[33mcommit 7c11978bf271bf239efe9f185e8edb3e7dd659d2[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Dec 30 17:59:28 2017 +0800

    Restructure sample Project Portfolio Page
    
    The structure of the sample Project Portfolio Page (PPP) makes it
    difficult to read due to,
    1. mixing of UG/DG extracts inside the main document body.
    2. mismatch of PPP heading levels and those of UG/DG extracts
    
    Let's restructure it to clearly separate,
    1. summary of Contributions in point form
    2. contributions to the UG
    3. contributions to the DG
    
    Also, let's tweak heading levels of PPP so that headings of included
    extracts match the the heading structure of PPP.

[33mcommit 04dca829eb25c0edc8f514fdd1d31cf4cfe62f6d[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Dec 30 17:52:58 2017 +0800

    Add 'proposed' features to User Guide and Developer Guide
    
    Students are expected to use 'proposed' features to increase their
    contribution to the UG and DG if the features they implemented do not
    meet the minimum requirement for contributions to the UG and the DG.
    
    Let's add dummy 'proposed' features to UG and DG to serve as examples
    and reminders for students. This addition is also in preparation for
    them to be included in the sample Project Portfolio Page provided.

[33mcommit ab7a0601d8a4713fb0b562a35c8e1f2a3b6b25ee[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:51:18 2017 +0800

    build.gradle: teach test tasks to work together
    
    The allTests, nonGuiTests, guiTests tasks are implemented as separate
    tasks which are unaware of whether each other is being run. This leads
    to strange behavior such as the following command which runs some tests
    multiple times:
    
        ./gradlew allTests nonGuiTests guiTests
    
    These tasks are also not integrated with the `test` task, which is
    provided by default by the `java` plugin. This is the de facto task for
    running tests, and is run by default by other commonly-used tasks such
    as `./gradlew check` and `./gradlew build`.
    
    Fix this by making all of these tasks aware of each other. The `test`
    task is configured to be *the* task that runs the tests, while the
    nonGuiTests and guiTests tasks are converted to dummy tasks which just
    serve to inform the `test` task of whether to run the GUI tests or not.
    
    Everything works as normal, except that now
    `./gradlew allTests nonGuiTests guiTests` will have the expected result
    of running all tests only once. Other task combinations, such as
    `./gradlew headless test` and `./gradlew headless check` now also have
    the correct behavior of running tests in headless mode.

[33mcommit 4a412474c299ff7e4b3712c7ce3c5c8a0ef5262b[m
Merge: eb1fbb8c 43b33c61
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 26 13:27:10 2017 +0800

    Improve separation of concerns between parser/storage layer and model layer (#667)
    
    The model classes Name, Email, Address, Phone and Tag perform input
    validation and string trimming even though that is not the
    responsibility of the model layer.
    
    Fix this by moving the input validation and string trimming logic from
    these classes to the parser/storage layer where they should rightfully
    be.
    
      [1/15] TestUtil#assertThrows(...): support checked exceptions
      [2/15] NameTest, PhoneTest, EmailTest, AddressTest, TagTest: add missing null tests
      [3/15] XmlAdaptedPersonTest: add tests for #toModelType()
      [4/15] Move string trimming responsibility from Name to ParserUtil#parseName(String)
      [5/15] Move Name validation step from model to the parser and storage layers
      [6/15] Move string trimming responsibility from Phone to ParserUtil#parsePhone(String)
      [7/15] Move Phone validation step from model to parser and storage layers
      [8/15] Move string trimming responsibility from Address to ParserUtil#parseAddress(String)
      [9/15] Move Address validation step from model to parser and storage layers
      [10/15] Move string trimming responsibility from Email to ParserUtil#parseEmail(String)
      [11/15] Move Email validation step from model to parser and storage layers
      [12/15] Move string trimming responsibility from Tag to ParserUtil#parseTag(String)
      [13/15] Move Tag validation step from model to parser and storage layers
      [14/15] Remove unnecessary IllegalValueException catches and throws in code base
      [15/15] EditPersonDescriptorBuilder: simplify code by using model constructors

[33mcommit 43b33c613a7076f45cac4a366b6f7671500a5733[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 23 12:59:14 2017 +0800

    EditPersonDescriptorBuilder: simplify code by using model constructors
    
    ParserUtil.parseName(String), ParserUtil.parsePhone(String), etc. throw
    checked IllegalValueExceptions, which leads to more verbose error
    handling code in EditPersonDescriptorBuilder.
    
    We can remove the error handling code by using the Name, Phone, etc
    constructors directly, since they throw unchecked exceptions on invalid
    input. The use of unchecked exceptions in test code is not a problem as
    they would be caught and reported by the test runner anyway.

[33mcommit dfa1ef1587d1c3fa067b29117cb403f38c44215d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:45:56 2017 +0800

    Remove unnecessary IllegalValueException catches and throws in code base
    
    In the previous commits, we have fixed up the Name, Email, Address and
    Tag classes to not throw the checked IllegalValueException any more.
    
    As a result of these changes, there are many other call sites in the
    code base which do not need to throw or catch IllegalValueException any
    more.  Let's clean up these call sites.

[33mcommit 019496c77318aec4181a170beb41e2304368831f[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:40:47 2017 +0800

    Move Tag validation step from model to parser and storage layers
    
    The Tag(String) constructor validates the passed in tag String,
    throwing a checked IllegalValueException error if the input fails
    validation.
    
    However, according to our architecture, the model layer should only be
    concerned with the storage of data in memory. Any data which reaches the
    model layer should have already been validated. As such, if for any
    reason the input tag String fails validation in the model layer, it is
    most likely a programmer error, and a runtime exception should thus be
    thrown instead.
    
    Fix this by moving the input validation step, and the throwing of the
    checked IllegalValueException, from the Tag constructor to the parser
    and storage layers. The Tag constructor will instead use the
    checkArgument(...) helper function to verify the "valid tag format"
    precondition.
    
    While we are here, rename the argument `name` to the more descriptive
    `tagName`.

[33mcommit 0b4671d57fcb687a6ad5b36f3437d03f6bf7f590[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:24:26 2017 +0800

    Move string trimming responsibility from Tag to ParserUtil#parseTag(String)
    
    Tag's constructor modifies the input string by trimming leading and
    trailing whitespace. However, given that the model component's
    sole responsibility is to store data in memory, it shouldn't be
    modifying any input. Rather, any munging of input should be done in the
    parser layer.
    
    Fix this by moving the string trimming logic from Tag to
    ParserUtil#parseTag(String).

[33mcommit 5084fae6d4019fdacd0c3884080aca3db79ed291[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:37:00 2017 +0800

    Move Email validation step from model to parser and storage layers
    
    The Email(String) constructor validates the passed in email String,
    throwing a checked IllegalValueException error if the input fails
    validation.
    
    However, according to our architecture, the model layer should only be
    concerned with the storage of data in memory. Any data which reaches the
    model layer should have already been validated. As such, if for whatever
    reason the input email String fails validation in the model layer, it is
    most likely a programmer error, and a runtime exception should thus be
    thrown instead.
    
    Fix this by moving the input validation step, and the throwing of the
    checked IllegalValueException, from the Email constructor to the parser
    and storage layers. The Email constructor will instead use the
    checkArgument(...) helper function to verify the "valid email format"
    precondition.
    
    Thanks to this fix, as Email's constructor does not throw checked
    exceptions any more, we can remove a try/catch block from PersonBuilder
    as well (otherwise the code won't compile).

[33mcommit 2a6d0993e02b1d9bafffc65b39ed773f42dfa391[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:19:07 2017 +0800

    Move string trimming responsibility from Email to ParserUtil#parseEmail(String)
    
    Email's constructor modifies the input string by trimming leading and
    trailing whitespace. However, given that the model component's
    sole responsibility is to store data in memory, it shouldn't be
    modifying any input. Rather, any munging of input should be done in the
    parser layer.
    
    Fix this by moving the string trimming logic from Email to
    ParserUtil#parseEmail(String).

[33mcommit 3c9fd61cfedbde606ee81adde50da28be6c0b69b[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:33:05 2017 +0800

    Move Address validation step from model to parser and storage layers
    
    The Address(String) constructor validates the passed in address String,
    throwing a checked IllegalValueException error if the input fails
    validation.
    
    However, according to our architecture, the model layer should only be
    concerned with the storage of data in memory. Any data which reaches the
    model layer should have already been validated. As such, if for any
    reason the input address String fails validation in the model layer, it
    is most likely a programmer error, and a runtime exception should thus
    be thrown instead.
    
    Fix this by moving the input validation step, and the throwing of the
    checked IllegalValueException, from the Address constructor to the
    parser and storage layers. The Address constructor will instead use the
    checkArgument(...) helper function to verify the "valid address format"
    precondition.
    
    Thanks to this fix, as Address's constructor does not throw checked
    exceptions any more, we can remove a try/catch block from PersonBuilder
    as well (otherwise the code won't compile).

[33mcommit 01e764b75251bcc6f8df134bf6825c6b06796300[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:14:18 2017 +0800

    Move string trimming responsibility from Address to ParserUtil#parseAddress(String)
    
    Address's constructor modifies the input string by trimming leading and
    trailing whitespace. However, given that the model component's
    sole responsibility is to store data in memory, it shouldn't be
    modifying any input. Rather, any munging of input should be done in the
    parser layer.
    
    Fix this by moving the string trimming logic from Address to
    ParserUtil#parseAddress(String).

[33mcommit cbee10bbc8160cb85f5201e2b63ef60f4ff7eea3[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:08:52 2017 +0800

    Move Phone validation step from model to parser and storage layers
    
    The Phone(String) constructor validates the passed in phone String,
    throwing a checked IllegalValueException error if the input fails
    validation.
    
    However, according to our architecture, the model layer should only be
    concerned with the storage of data in memory. Any data which reaches the
    model layer should have already been validated. As such, if for any
    reason the input phone String fails validation in the model layer, it is
    most likely a programmer error, and a runtime exception should thus be
    thrown instead.
    
    Fix this by moving the input validation step, and the throwing of the
    checked IllegalValueException, from the Phone constructor to the parser
    and storage layers.  The Phone constructor will instead use the
    checkArgument(...) helper function to verify the "valid phone format"
    precondition.
    
    Thanks to this fix, as Phone's constructor does not throw checked
    exceptions any more, we can remove a try/catch block from PersonBuilder
    as well (otherwise the code won't compile).

[33mcommit 31792dfb569ffe2ec655fefbcdf044ba940a932c[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 18:03:35 2017 +0800

    Move string trimming responsibility from Phone to ParserUtil#parsePhone(String)
    
    Phone's constructor modifies the input string by trimming leading and
    trailing whitespace. However, given that the model component's
    sole responsibility is to store data in memory, it shouldn't be
    modifying any input. Rather, any munging of input should be done in the
    parser layer.
    
    Fix this by moving the string trimming logic from Phone to
    ParserUtil#parsePhone(String).

[33mcommit c7e3d37dd235db81fe7075238fa96dbf04bde735[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue May 30 17:55:43 2017 +0800

    Move Name validation step from model to the parser and storage layers
    
    The Name(String) constructor validates the passed in name String,
    throwing a checked IllegalValueException error if the input fails
    validation.
    
    However, according to our architecture, the model layer should only be
    concerned with the storage of data in memory. Any data which reaches the
    model layer should have already been validated. As such, if for any
    reason the input name String fails validation in the model layer, it is
    most likely a programmer error, and a runtime exception should thus be
    thrown instead.
    
    Fix this by moving the input validation step, and the throwing of the
    checked IllegalValueException, from the Name constructor to the parser
    layer and storage layers. The Name constructor will instead use the
    checkArgument(...) helper function to verify the "valid name"
    precondition.
    
    Thanks to this fix, as Name's constructor does not throw checked
    exceptions any more, we can remove a try/catch block from PersonBuilder
    as well (otherwise the code won't compile).

[33mcommit a190aa6e473fb15c8a49c4f2063a25af816341d3[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon May 29 22:07:19 2017 +0800

    Move string trimming responsibility from Name to ParserUtil#parseName(String)
    
    Name's constructor modifies the input string by trimming leading and
    trailing whitespace. However, given that the model component's
    sole responsibility is to store data in memory, it shouldn't be
    modifying any input. Rather, any munging of input should be done in the
    parser layer.
    
    Fix this by moving the string trimming logic from Name to
    ParserUtil#parseName(String).

[33mcommit 0094d8adf7fe594f45f2fd8391240ab63a4cebfb[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 15:00:27 2017 +0800

    XmlAdaptedPersonTest: add tests for #toModelType()
    
    XmlAdaptedPersonTest#toModelType() doesn't have any dedicated tests.
    Let's add some.
    
    This is mainly done to prevent code coverage drops when we tweak
    XmlAdaptedPersonTest#toModelType() in later commits.

[33mcommit fd65824efcbb62e7c3057b9922834eefcd54c7e7[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Dec 4 14:48:52 2017 +0800

    NameTest, PhoneTest, EmailTest, AddressTest, TagTest: add missing null tests
    
    The constructors and isValidX() methods of these classes would throw
    NullPointerExceptions on null inputs, but this behavior is not tested.
    Let's add tests for them.

[33mcommit 21a1955a4c0b4cd085107a092dec13f66e86af66[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon May 29 22:16:53 2017 +0800

    TestUtil#assertThrows(...): support checked exceptions
    
    TestUtil#assertThrows(...) doesn't support functions which throw checked
    exceptions. For example,
    
        TestUtil.assertThrows(IllegalValueException.class, () -> { throw new IllegalValueException(""); });
    
    would not compile, with the compiler complaining with:
    
        error: unreported exception IllegalValueException; must be caught or declared to be thrown
    
    This is because assertThrows(...) takes in a Runnable, whose run()
    method does not have `throws Exception` declared.
    
    java.util.concurrent.Callable<V>, on the other hand, looks like what we
    want, as it is a functional interface whose call() method has
    `throws Exception` declared. Unfortunately, due to how Java's generics
    work, call() MUST return a value. This means we will need to tack on a
    `return null` at the end of our lambda bodies, which is too verbose. Not
    good.
    
    As such, let's define our own `VoidCallable` interface, and modify
    assertThrows(...) to take it. Like Callable<V>, VoidCallable#call method
    has `throws Exceptions` declared, so our lambdas passed to
    assertThrows(...) can throw checked exceptions.  Unlike Callable<V>, its
    call() method doesn't need to return a return value, allowing us to
    write succinct lambda expressions to pass to assertThrows(...).

[33mcommit eb1fbb8cc4f3df1303ec4110aa69ad1e35a0cc98[m
Merge: a3c88b17 affa9d72
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Dec 24 17:10:47 2017 +0800

    [#738] AddCommandParser accepts invalid command format (#763)
    
    AddCommandParser wrongly accepts an invalid command format in which the
    preamble is not empty. e.g.
    
        add formattingProblem123 n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #2-25 t/friends
    
    where "formattingProblem123" is an invalid argument without prefixes.
    
    Fix the bug by adding a check to ensure that the preamble is not empty.
    
      [1/2] AddCommandParserTest: remove use of AddCommand.COMMAND_WORD
      [2/2] AddCommandParser: add check to ensure preamble is empty

[33mcommit affa9d7224a107681a6daa929a5954be80f61e66[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sat Dec 23 14:32:37 2017 +0800

    AddCommandParser: add check to ensure preamble is empty
    
    AddCommandParser accepts an invalid command format, in which the
    preamble is not empty. For instance an invalid command that is accepted
    would be, "add formattingProblem123 n/John Doe p/98765432
    e/johnd@example.com a/311, Clementi Ave 2, #2-25
    t/friends" where "formattingProblem123" is an invalid argument without
    prefixes.
    
    A check to ensure that the preamble is empty is more user-friendly as
    the user is notified of the invalid input.
    
    Let's add a check to ensure that argMultimap.getPreamble() is empty.

[33mcommit 47aa0ab00e50243923821e1eb18381bcbec88003[m
Author: Vivek <vivekscl5@gmail.com>
Date:   Sat Dec 23 14:31:02 2017 +0800

    AddCommandParserTest: remove use of AddCommand.COMMAND_WORD
    
    There are many instances of using AddCommand.COMMAND_WORD in the
    userInput parameter.
    
    AddCommandParserTest should not be using AddCommand.COMMAND_WORD
    because it is testing at the AddCommandParser level; The user input
    that is passed to AddCommandParser already has the COMMAND_WORD
    stripped off.
    
    They need to be removed to prevent them from being detected as a
    preamble.
    
    Let's remove all instances of the AddCommand.COMMAND_WORD.

[33mcommit a3c88b17d2001ee5e5c1e2e13a8c1d28d8b85f92[m
Merge: e14293d8 5276c73a
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 16 22:54:14 2017 +0800

    Correctly model the scene graph hierarchy of MainWindow and HelpWindow (#747)
    
    As their names suggest, the root object of MainWindow and HelpWindow
    should be their Stage. However, this is presently not so. The root
    object of MainWindow and HelpWindow are both Regions, and the Stage and
    Scene which they manage is sneakily handled in their constructors.
    
    This violates the architecture of the UiPart system, which dictates that
    the return value of UiPart#getRoot(), as well as the root node of the
    FXML file, should be the root object of the scene graph which the UiPart
    manages. This derivation from the architecture may confuse readers.
    
    Fix this by using the <fx:root> feature of FXML files to achieve the
    aforementioned proper UiPart structure. The user interface from the
    user's point of view does not change.
    
      [1/9] UiPart: allow callers to specify the scenegraph root
      [2/9] SystemTestSetupHelper: use a new primary stage for each application
      [3/9] MainWindow: make the primary Stage the root object
      [4/9] MainWindow: move icon, minHeight, minWidth definitions into the FXML file
      [5/9] HelpWindow: remove unneeded call to createDialogStage(...)
      [6/9] UiPart: remove createDialogStage(...)
      [7/9] HelpWindow: make its Stage the root object
      [8/9] HelpWindow: move title, maximized, icon definitions to its FXML file
      [9/9] FxViewUtil: remove #setStageIcon(Stage, String)

[33mcommit 5276c73a1eccb437baa6a32023615d03867e1a20[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 1 19:18:34 2017 +0800

    FxViewUtil: remove #setStageIcon(Stage, String)
    
    It is not used in the code base, and it is unlikely to be used in the
    future since a window's icon can be directly set in its FXML file.
    
    Since #setStageIcon(...) is FxViewUtil's only method, remove FxViewUtil
    as well.

[33mcommit 787de47a2b81bf4e340e52395d702cfc3c0618df[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 1 19:16:00 2017 +0800

    HelpWindow: move title, maximized, icon definitions to its FXML file
    
    The title, maximized and icon properties specify the design of the
    HelpWindow UI, rather than its logic, and thus should be defined inside
    the FXML file.

[33mcommit 3148428e3ec2bb2313c68e3599b89d40734da252[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 1 18:20:23 2017 +0800

    HelpWindow: make its Stage the root object
    
    Readers would expect the root object of the UiPart `HelpWindow` to be
    its `Stage` window.  However, this is not so. The root object of
    `HelpWindow` is a `Region`, and the Stage and Scene which HelpWindow
    manages is sneakily handled inside the constructor.
    
    While this works, it goes against the architecture of the UiPart system,
    which dictates that the return value of UiPart#getRoot(), as well as the
    root node of the FXML file, should be the root object of the scene graph
    which the UiPart manages. This derivation from the architecture may
    confuse readers.
    
    Fix this by using the <fx:root> feature of FXML. This allows us to
    specify a javafx.stage.Stage as the root object of HelpWindow.fxml,
    while also allowing us to inject the Stage object at runtime when
    HelpWindow is constructed.
    
    While using <fx:root> is not strictly required in HelpWindow's case,
    this is done to be consistent with MainWindow, a similar UiPart which
    has a Stage as its root object.
    
    Likewise, just like MainWindow, introduce a HelpWindow(Stage)
    constructor which allows callers to pass in a Stage to use as its root
    object. To cater to the current use case where the HelpWindow is shown
    in a new Stage, introduce a HelpWindow() utility constructor which does
    the Stage construction for callers.

[33mcommit 6bb16fe6a92468e98ab48fee6106103f0793e5e2[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 29 19:51:43 2017 +0800

    UiPart: remove createDialogStage(...)
    
    It is not used.
    
    Besides, it is not very good practice to put utility methods as
    protected methods of a class, unless it requires access to internal
    state.

[33mcommit 72a3224975a9b8e258f2081ae90327bbdbd2ac84[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 29 19:49:55 2017 +0800

    HelpWindow: remove unneeded call to createDialogStage(...)
    
    Since createDialogStage(...) is called with no owner, the resulting
    stage created is non-modal, which is no different from creating a Stage
    directly with `new Stage()`.

[33mcommit 37dd247b189e1a37f56a2a2321b8e24bbdefec49[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 29 19:46:02 2017 +0800

    MainWindow: move icon, minHeight, minWidth definitions into the FXML file
    
    The icon, minHeight and minWidth properties specify the design of the
    MainWindow UI, rather than its logic, and thus should be defined inside
    the FXML file.

[33mcommit f710fcd6290a6cd71c4172994180b75f7fbe839c[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 29 19:26:40 2017 +0800

    MainWindow: make the primary Stage the root object
    
    Readers would expect the root object of the UiPart `MainWindow` to be
    its `Stage` window. However, this is not so. The root object of
    `MainWindow` is a `Region`, and the Stage and Scene which MainWindow
    manages is sneakily handled inside its constructor.
    
    While this works, it does against the architecture of the UiPart system,
    which dictates that the return value of UiPart#getRoot(), as well as the
    root node of the FXML file, should be the root object of the scene graph
    which the UiPart manages. This derivation from the architecture may
    confuse readers.
    
    At the same time, we can't directly specify a Stage as the root node
    inside the MainWindow.fxml file. This is because under the JavaFX
    architecture, we should use the "primary stage" which is created by the
    JavaFX framework, rather than constructing our own.
    
    Fix this by using the <fx:root> feature of FXML file. This allows us to
    specify a javafx.stage.Stage as the root object of MainWindow.fxml,
    while also allowing us to inject the "primary stage" object as the root
    at runtime when MainWindow is constructed.
    
    Note that with this change, MainWindow#setAccelerator(...) will now
    install an event filter on the primary stage. This could be problematic
    if the primary stage was somehow reused across applications, but
    fortunately in the previous commit we have already taken care of
    ensuring this is not possible.

[33mcommit 8bad9c254ba5bf494dbe8644b8596c051a812a71[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 9 20:45:44 2017 +0800

    SystemTestSetupHelper: use a new primary stage for each application
    
    By default, with TestFX, the same primary stage is shared between all
    system tests.
    
    This could cause state leaks between tests. For example, if one system
    test adds an event filter to its primary stage, this event filter will
    be preserved throughout all the other system tests, causing incorrect
    behavior.
    
    While our application does not modify the primary stage in a way which
    breaks tests if the primary stage is reused, we would be doing some
    tweaks to the code base in the next commit which would cause this to
    happen.
    
    As such, let's preemptively fix this problem by creating a new primary
    stage every time SystemTestSetupHelper#setupApplication(...) is called.
    This is done by modifying it to call:
    
        FxToolkit.registerStage(Stage::new);
    
    Since the primary stage created by FxToolkit.registerPrimaryStage()
    isn't actually used in the system tests, let's fix up the javadocs in
    SystemTestSetupHelper to take account this new state of affairs.
    
    In addition, let's rename SystemTestSetupHelper#initializeStage() to
    SystemTestSetupHelper#initialize() since its main purpose now isn't to
    create the "primary stage", but to call TestFX's initialization
    routines[1].
    
    [1] FxToolkit.registerPrimaryStage() will still need to be called even
        though the primary stage it creates is not used in tests.
        This is because, despite what its name implies, it actually does
        much more than just "creating the primary stage": it sets up JavaFX
        for headless testing and prevents JavaFX from shutting down when the
        last stage is hidden.

[33mcommit a9fe392638a65cf3bf3c9028586bf83ab74b75c0[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 29 19:08:21 2017 +0800

    UiPart: allow callers to specify the scenegraph root
    
    FXML files may wish to use the <fx:root> feature[1] where, rather than
    the FXML file specifying and creating the root object, a placeholder
    "root" is used instead which can then be specified when the FXML is
    loaded. This is useful in situations where we wish to use a preexisting
    object as the root.
    
    However, UiPart doesn't provide a way for callers to specify the root
    object, and thus the <fx:root> feature cannot be used.
    
    Fix this by introducing UiPart(URL, T) and UiPart(String, T)
    constructors which are similar to UiPart(URL) and UiPart(String), but
    allows callers to specify the root object to be used. This requires us
    to extract out some utility methods to share common functionality
    between these constructors.
    
    The next few commits will take advantage of this new feature.
    
    [1] https://docs.oracle.com/javase/8/javafx/api/javafx/fxml/doc-files/introduction_to_fxml.html#custom_components

[33mcommit e14293d869931183ad87a9f9f9c191ed5fd1a8e8[m
Merge: 0ade250e 8628533e
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 15 17:40:56 2017 +0800

    docs: use full xrefstyle and figure auto-numbering (#760)
    
    Switch to `full` xrefstyle so that cross references will display the
    section/figure numbers as well, allowing readers to easily find the
    referenced section/figure by their number.
    
    Switch to using asciidoctor's auto figure numbering which is less error
    prone and doesn't require us to pollute the commit diff when figure
    numbers need to be updated.
    
      [1/3] DeveloperGuide, UserGuide: use full xrefstyle
      [2/3] DeveloperGuide, UserGuide: use cross references instead of manual links
      [3/3] DeveloperGuide: use proper syntax for figure captions

[33mcommit 8628533e989e3a52358a8cb79c65dd3a6ac522c1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 13:33:33 2017 +0800

    DeveloperGuide: use proper syntax for figure captions
    
    The DeveloperGuide manually numbers each figure.
    
    Such manually numbering of figures is error prone and leads to a problem
    where inserting a figure between two other figures causes a "snowball"
    effect where all subsequent figure numbers needs to be updated, which
    pollutes the commit diff.
    
    As such, let's switch to using asciidoctor's automatic figure numbering
    instead, which kicks in when we switch to using the proper syntax for
    figure captions -- by defining the caption text as the title of the
    block image[1].
    
    As a side benefit of using the figure caption syntax, we can now also
    use the cross reference syntax to reference other figures, which will
    give us the desired behavior of referencing that figure with the correct
    figure number.
    
    One downside of this approach is that the automatic figure numbers are
    not hierarchical, i.e. they just go 1, 2, 3... without taking the
    section numbers into account. However, the upside of not having to
    manually update figure numbers is much more valuable.
    
    [1] http://asciidoctor.org/docs/user-manual/#images

[33mcommit 230a27eead6da49f4e3c4a31a8d913454dc4968e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 22:58:48 2017 +0800

    DeveloperGuide, UserGuide: use cross references instead of manual links
    
    The UserGuide and DeveloperGuide contains many links to other sections
    in the document. However, these links are written using the link: syntax
    rather than using the cross reference syntax.
    
    In many cases, the link text simply repeats the title of the referenced
    section. Such uses result in unnecessary verbosity, and are also fragile
    since someone who modifies the title of the referenced section could
    easily forget to change the link text of links referencing that section
    as well.
    
    Let's fix this by changing the links to use the cross reference syntax
    instead, which provide automatic link text, so we do not need to repeat
    the section titles.
    
    If the anchor IDs of the referenced sections change, it would lead to
    dead links as well. As such, let's also give the referenced sections
    explicit anchor IDs to make sure they do not change.

[33mcommit 442ec5d4f1760c0f73e708ab8125e7f8e53e4fc1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 13:36:09 2017 +0800

    DeveloperGuide, UserGuide: use full xrefstyle
    
    By default, the cross-reference text when cross-referencing another
    section, figure, table etc. will be the title of that section, figure,
    table etc.
    
    For example, the following cross-reference in the DeveloperGuide:
    
        <<architecture>>
    
    will be replaced with:
    
        Architecture
    
    which is the name of that section.
    
    However, in a printed or non-interactive medium, cross-reference
    hyperlinks do not work. As such, it would be more useful to provide the
    section/figure/table number as well, so that readers will be able to
    quickly locate the reference target by its number, rather than needing
    to manually find its name in the document.
    
    As such, lets set the xrefstyle of the UserGuide and DeveloperGuide to
    `full`. With this change, the <<architecture>> cross-reference would be
    replaced with:
    
        Section 2.1, "Architecture"
    
    As the xrefstyle feature[1] was only introduced in asciidoctor 1.5.6[2],
    we'll need to upgrade our asciidoctor plugin as well.
    
    [1] http://asciidoctor.org/docs/user-manual/#customizing-the-cross-reference-text
    [2] https://github.com/asciidoctor/asciidoctor/commit/8e80317dee56483e48a07451bff0cd14f0bfd59c

[33mcommit 0ade250e81b632da37e5e2384edd0697f29318a0[m
Merge: 63a82f55 c205d6f7
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 9 16:49:04 2017 +0800

    [#752] Simplify build.gradle file (#754)
    
    Simplify the build.gradle file by removing unnecessary/unused stuff, and
    standardizing the code style.

[33mcommit 63a82f55d6f3116de609da037c2de0b87fa92df8[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 21:34:50 2017 +0800

    docs: remove env-github outfilesuffix boilerplate
    
    Many of our adoc files have the following boilerplate:
    
        ifdef::env-github,env-browser[:outfilesuffix: .adoc]
    
    This boilerplate used to be required in order for inter-document cross
    references to work when viewing the adoc files directly on GitHub. This
    was because GitHub errnously set the outfilesuffix as `.html` instead of
    `.adoc`, which resulted in broken links.
    
    However, as the asciidoctor user guide[1] states:
    
        This configuration is no longer necessary on GitHub since GitHub now
        sets the value of outfilesuffix to match the file extension of the
        source file. However, it’s still required in GitHub-like
        environments such as GitLab.
    
    Indeed, this seems to be the case on GitHub. As our project is unlikely
    to be hosted on other "GitHub-like environments such as GitLab" in the
    near future, let's remove this boilerplate.
    
    [1] http://asciidoctor.org/docs/user-manual/#navigating-between-source-files

[33mcommit c205d6f7dd9c7aef0287fafd311092d3609702ab[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Dec 7 22:27:14 2017 +0800

    build.gradle: remove `forkEvery = 1`
    
    Setting `forkEvery = 1` has the effect of restarting the Java process
    for every test class run. As the JVM takes a long time to start up, this
    ends up making our test execution time unnecessarily long.
    
    As there doesn't seem to be a reason for why forkEvery has to be set to
    1, let's remove the setting. This will leave it at its default setting
    of zero, which means "don't restart the Java process at all".
    
    This significantly speeds up test execution. e.g. On my box,
    `./gradlew headless allTests` now takes only around a minute to run,
    compared to around 3 minutes before.

[33mcommit 50aeccd80d607f29b8d3eebb0b3b5789760586c9[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Dec 7 21:58:57 2017 +0800

    build.gradle: remove project.ext block
    
    The only project property inside, `libDir`, is not used in the build
    script at all.
    
    It is also unlikely that we would be using project properties in the
    future. They are only required when we have multi-project build, and the
    root project needs to share properties with its child projects[1]. In
    most other cases, local variables, scoped to the location where they are
    meaningful, would be more appropriate.
    
    To simplify the build.gradle script, let's remove the project.ext block.
    
    [1] See "Property and method inheritance" in
        https://docs.gradle.org/2.12/userguide/multi_project_builds.html

[33mcommit 0117663026d4a5c8463dcf2dcef0bf65cc597b42[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Dec 7 21:56:53 2017 +0800

    build.gradle: inline $checkstyleVersion project property
    
    If other parts of the build script wish to query the checkstyle
    toolVersion, they can simply just use "${checkstyle.toolVersion}"
    directly, no need to use a project property for that.
    
    Let's remove the checkstyleVersion project property.

[33mcommit d557cc07174dd062544ef3fbe2303f4cd69fd46b[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:35:26 2017 +0800

    build.gradle: standardize dependency specifications code style
    
    There are different styles of specifying dependencies in the
    build.gradle file, so let's standardize all of them into one single
    style.
    
    This style is chosen as it makes the groupId, artifactId, and version of
    the dependency obvious.
    
    Rather than defining the dependency versions as project.ext properties,
    just define them directly in the dependencies block so that the
    dependency version number is immediately obvious. An exception is made
    for the testfx dependencies since their version numbers are shared --
    use a local variable (since its only locally used) to define that
    instead.

[33mcommit c4be70dc2819a27b4c4739b6f9867d14e46ec504[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:31:04 2017 +0800

    build.gradle: remove redundant sourceSets definition
    
    These source sets are already specified by default with the correct
    srcDir values, and thus there is no need to define them.

[33mcommit 387d522f56bd7befe309f68c0510a610c7a544cb[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:30:41 2017 +0800

    build.gradle: remove unused repositories
    
    The recommended repos of our dependencies are:
    
     * easybind: Maven Central (snapshots are published on Sonatype
       snapshots repo[1], but we aren't using a snapshot)
    
     * controlsfx: Maven Central[2]
    
     * jackson: Maven Central[3]
    
     * guava: Maven Central[4]
    
     * junit: Maven Central[5]
    
     * testfx: Maven Central[6]
    
    From the above list, we can see that jcenter, the Sonatype snapshots
    repo and the eclipse repo are not used. Let's remove them to keep our
    repositories list short and succinct.
    
    [1] https://github.com/TomasMikula/EasyBind#use-easybind-in-your-project
    [2] See "Getting ControlsFX" in http://fxexperience.com/controlsfx/
    [3] Maven Central badge on https://github.com/FasterXML/jackson-databind
    [4] Maven Central badge on https://github.com/google/guava
    [5] No specific source, but it's available on Maven Central, and no
        other source saying otherwise :-P
    [6] Maven Central badge on https://github.com/TestFX/TestFX

[33mcommit d916a19d15123ab26915ad313b6192e4d162ee8a[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:30:33 2017 +0800

    build.gradle: remove `idea` plugin
    
    The `idea` plugin implements the `idea` task which helps developers
    generate IDEA configuration files for use in the IDE.
    
    However, this method of using IntelliJ IDEA for development in our code
    base is not supported by us. Instead, developers should import the
    project into IntelliJ IDEA using its "import Gradle project"
    functionality.
    
    To avoid misleading people, let's remove this plugin.

[33mcommit 984888e51e3813e834e0237e65505f82908d5368[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 5 13:30:01 2017 +0800

    build.gradle: remove `allprojects` block
    
    The use of `allprojects` is only required if we have a multi-project
    build and need to share build configurations between all of them[1].
    
    We don't use multi-project builds, and the use of `allprojects` would
    raise the barrier of entry to newcomers (especially those new to Gradle)
    in understanding our build.gradle file.
    
    So, in the spirit of YAGNI and to make our code base more approachable
    to newcomers, let's remove the use of `allprojects`.
    
    [1] https://docs.gradle.org/2.2.1/userguide/multi_project_builds.html

[33mcommit 3f0a1c1d69022cd5bcdec2b677585e58148061a1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 6 22:00:39 2017 +0800

    DeveloperGuide: use labeled list for glossary
    
    The glossary uses literal blocks for formatting definitions, which looks
    strange because literal blocks are usually used for preformatted text
    such as source code.
    
    Instead, let's use a labeled list, which has a formatting that is more
    in line with a glossary definition list.
    
    Convert the paragraph anchors into inline anchors[1], so that the items
    are joined into one single labeled list with two items, rather than
    being chopped into two separate labeled lists with one item each.
    
    [1] See http://asciidoctor.org/docs/user-manual/#anchordef for the
        difference between a paragraph anchor and an inline anchor.

[33mcommit d63190e989ac0aa6e74c8d46adf7ed503c439cb0[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sun Dec 3 15:53:48 2017 +0800

    ListElementPointer(List<String>): Update code to tally with comments
    
    The constructor’s header comments state that this object is backed by
    a defensive copy of the list that is passed in as parameter. However,
    the code does not reflect this behaviour.
    
    The constructor should use create a defensive copy of the list to
    prevent unintentional modifications to the backing list whenever the
    list passed in as parameter is modified.
    
    Let’s update ListElementPointer(List<String>) to create a defensive copy
    of the list.

[33mcommit edc42f0e2579c27c209b1f8f3c0f87ed04e83904[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Nov 22 14:21:59 2017 +0800

    check-eof-newline: handle filenames with spaces
    
    check-eof-newline.sh doesn't properly handle filenames with spaces,
    instead treating them as multiple files instead.
    
    For example, we can create a file whose name has spaces, e.g.
    'filename with spaces.txt'. Ensure that the file has some content inside
    so that Git will detect it as a text file so it will be checked by
    check-eof-newline.sh:
    
        echo 'content' >'filename with spaces.txt'
    
    Then use git-add to track the file:
    
        git add 'filename with spaces.txt'
    
    Then run check-eof-newline.sh:
    
        ./config/travis/check-eof-newline.sh
    
    check-eof-newline.sh will then spew out the following errors:
    
        tail: cannot open './filename' for reading: No such file or directory
        tail: cannot open './with' for reading: No such file or directory
        tail: cannot open './spaces.txt' for reading: No such file or directory
    
    While this won't cause check-eof-newline.sh to error out (it will simply
    ignore those bogus filenames), it is still incorrect behavior since the
    file 'filename with spaces.txt' doesn't actually get checked by the
    script.
    
    This happens because when check-eof-newline.sh is reading the list of
    filenames from git-grep, the IFS variable is not set, and thus the shell
    will split the lines of filenames on <space>, <tab> and <newline>,
    resulting in filenames with spaces getting split into multiple
    filenames.
    
    Fix this by explicitly setting the IFS variable to <newline> before
    reading from git-grep, so that the lines of filenames will only be split
    on newline boundaries -- filenames with spaces will be preserved.
    
    See http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_05_03
    for more info on the IFS variable.

[33mcommit e7db399f10b347f9f47c9eec0ec323f9d2415eb4[m
Merge: 74354ad8 bb6fd974
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 28 22:32:33 2017 +0800

    [#684] Guitests: Move tests to other packages (#692)
    
    AddressBookGuiTest and AddressBookSystemTest are very similar.
    
    It’s not necessary to have both of them.
    
    Let's remove AddressBookGuiTest by shifting out the children classes to
    inherit from AddressBookSystemTest instead.

[33mcommit 74354ad878b4937b613d6b25cc54fb935dc10c3e[m
Merge: 18b18a7e 06e0fd4e
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 28 21:57:35 2017 +0800

    Clean up AddCommandSystemTest (#688)
    
    AddCommandSystemTest can be cleaner. For example, the header
    comments can be updated to be written in point forms, and the test
    cases can be segmented into different categories.
    
    This causes it to be harder for future developers to understand the
    code.
    
    Let's clean up AddCommandSystemTest.

[33mcommit bb6fd97406704942ec5f5f7cfc174e04dcded2df[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:19:58 2017 +0800

    Update UsingGradle
    
    The running tests section of the UsingGradle document is outdated
    following the previous updates.
    
    Let’s update them.

[33mcommit b5fb6f5236cc67ea0310edca17f78d24da60ca75[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:14:47 2017 +0800

    Delete AddressBookGuiTest
    
    This class is no longer in use.

[33mcommit c3f5a0236ab9dbd3c38e0f46cca9173c481fdb29[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:14:20 2017 +0800

    SampleDataTest: Move to systemtests
    
    As AddressBookGuiTest and AddressBookSystemTest are very similar, it’s
    not necessary to have both of them.
    
    As part of removing AddressBookGuiTest, let’s move SampleDataTest to
    systemtests.

[33mcommit 3b366b6413f2467cc2b4c246b0ed4b396b81ff9d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:05:01 2017 +0800

    ErrorDialogGuiTest: Move to systemtests
    
    As AddressBookGuiTest and AddressBookSystemTest are very similar, it’s
    not necessary to have both of them.
    
    As part of removing AddressBookGuiTest, let’s move ErrorDialogGuiTest to
    systemtests.

[33mcommit ba119b62241052d214b8f754837139a9b86404fb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:03:18 2017 +0800

    HelpWindowTest: Move to systemtests
    
    As AddressBookGuiTest and AddressBookSystemTest are very similar, it’s
    not necessary to have both of them.
    
    As part of removing AddressBookGuiTest, let’s move HelpWindowTest to
    systemtests. Also, let’s rename it to HelpCommandTest to better reflect
    what it is testing for.

[33mcommit 06e0fd4e0021127347239a5bb91e860214028043[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 28 21:27:38 2017 +0800

    AddCommandSystemTest: Correct typo

[33mcommit 7ea4a36395776e5722f3853a5ea2acf25a7b4d59[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 10:22:52 2017 +0800

    Remove StatusBarFooterTest
    
    This test is redundant as it is superseded by the system tests.

[33mcommit 1b8181414b990a087407fc67e90eb27bc1a9f06c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:09:55 2017 +0800

    AddressBookSystemTest: Extract common test helper methods
    
    System tests manually execute ClearCommand to set up the some of the
    tests.
    
    It is unnecessary for these tests to know the exact command to execute
    to set up the tests.
    
    Let’s extract the execution of these commands to AddressBookSystemTest
    to provide a layer of abstraction for these system tests.

[33mcommit 06581c6c5f25bba983590df89794ec8e37476c6e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:04:20 2017 +0800

    AddCommandSystemTest: Segment test cases
    
    The test cases are clustered in unorganized manners.
    
    Without segmenting the tests, it is harder for future readers to know
    what we are testing.
    
    Let’s segment the test cases to improve readability of the test cases.

[33mcommit 81524e7087470d2d285c3fe07ff3c4115d50b7c4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 10:49:24 2017 +0800

    AddCommandSystemTest: Update test verification method comments
    
    The javadoc comments for test verification methods are written in a
    paragraph.
    
    This makes it hard to read, especially since it's quite long.
    
    Let's improve readability by making it into point forms instead.

[33mcommit 18b18a7ec0220fd342cf063ab96de8e25e1bd124[m
Merge: c1bb12da e8931698
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 28 14:44:47 2017 +0800

    Clean up SelectCommandSystemTest (#690)
    
    SelectCommandSystemTest can be cleaner. For example, the header
    comments can be updated to be written in point forms, and the test
    cases can be segmented into different categories.
    
    This causes it to be harder for future developers to understand the
    code.
    
    Let's clean up SelectCommandSystemTest.

[33mcommit e893169863e4cecd81d2b6facfb899f19cca0aa0[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:42:59 2017 +0800

    SelectCommandSystemTest: Replace assert with Assert
    
    We use assert to show that a precondition is met before executing a
    test.
    
    Asserts should not be used in test cases as JUnit’s Assert class
    provides the same functionality, and it cannot be disabled unlike
    assert.
    
    Let’s replace assert with Assert.

[33mcommit 6f2a017feae819880906e492da776c5b55387eab[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:27:59 2017 +0800

    SelectCommandSystemTest: Update test verification method comments
    
    The javadoc comments for test verification methods are written in a
    paragraph.
    
    This makes it hard to read, especially since it's quite long.
    
    Let's improve readability by making it into point forms instead.

[33mcommit b8da08ce18ff81d2d64e44c146410e6ff9079522[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:22:57 2017 +0800

    SelectCommandSystemTest: Segment test cases
    
    There are many tests cases in the test method.
    
    Without segmenting the tests, it is harder for future readers to know
    what we are testing.
    
    Let’s segment the test cases to improve readability of the test cases.

[33mcommit c1bb12dab64dff38458bb59063542ea6f8e6077f[m[33m ([m[1;33mtag: v0.7[m[33m)[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Sep 12 22:06:46 2017 +0800

    build.gradle: upgrade TestFX to 4.0.7-alpha
    
    TestFX 4.0.7-alpha has been released. Besides being the latest and
    greatest version, 4.0.7-alpha also contains a proper working headless
    mode for Linux.
    
    Without this upgrade, attempting to run `./gradlew headless guiTests` on
    Linux would result with the GUI tests failing with the following
    exception:
    
            java.lang.RuntimeException: java.lang.RuntimeException: java.lang.IllegalAccessException: Class org.testfx.toolkit.impl.ApplicationLauncherImpl can not access a member of class com.sun.glass.ui.monocle.HeadlessPlatform with modifiers ""
    
                Caused by:
                java.lang.RuntimeException: java.lang.IllegalAccessException: Class org.testfx.toolkit.impl.ApplicationLauncherImpl can not access a member of class com.sun.glass.ui.monocle.HeadlessPlatform with modifiers ""
    
                    Caused by:
                    java.lang.IllegalAccessException: Class org.testfx.toolkit.impl.ApplicationLauncherImpl can not access a member of class com.sun.glass.ui.monocle.HeadlessPlatform with modifiers ""
    
    Let's upgrade TestFX to 4.0.7-alpha to have happy Linux developers.
    
    This working headless mode was also present in the 4.0.6-alpha, but we
    couldn't upgrade to it as it broke our gui tests. (See e1eafd1 ([#353]
    All gui tests are failing  (#354), 2017-03-23))
    
    Furthermore, since headless mode now works on Linux, our Travis CI
    builds do not need to run xvfb any more. As such, let's remove its usage
    from .travis.yml.

[33mcommit dd162d5483acb85aa60a3bdda8b2f83cb4db568f[m
Merge: 71dceb20 e0183859
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 22:58:08 2017 +0800

    [#698] Update User Guide (#703)
    
    Some parts of the UserGuide are inconsistent, and some segments can be
    written clearer.
    
    Let's update it.

[33mcommit e01838596ae5f036ed8658c4bbd4907dbeb7eefb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:32:14 2017 +0800

    UserGuide: Update broken link
    
    This link breaks on the offline version.

[33mcommit 73c179f703e5d13955ce785c340eeff8152f290b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:20:03 2017 +0800

    UserGuide: Fix typo

[33mcommit 9cbbf8a9c9a32a4fa76fe581ee2832951ffc7efb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:19:56 2017 +0800

    UserGuide: Update find command example

[33mcommit 1390523cb86b9b6993ea61e2c8b722b628c63dc9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:18:06 2017 +0800

    UserGuide: Update Command Format

[33mcommit 2a4e8fd7a954030367061ae379eb8172542f7b07[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:15:07 2017 +0800

    UserGuide: Improve clarity and readability

[33mcommit cfcebedbfba50afe2b07bdc149ab43b9ef0d06ef[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:14:23 2017 +0800

    UserGuide: Update command headers

[33mcommit f1e11184e4199f318ad5257310ac57dd1a62a29a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:40:49 2017 +0800

    UserGuide: Add EditCommand to Command Summary
    
    This was missing.

[33mcommit 71dceb204436ea8c1f55000d83011955288a0c62[m
Merge: 921211be dc7d5f7d
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 22:19:14 2017 +0800

    Update Developer Docs #700
    
    Extracted/reordered/rephrased content to improve readability. Also
    updated outdated information in DeveloperGuide.

[33mcommit dc7d5f7ddb5d4bb63c9256517a3068fe111fcd0e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 21:07:52 2017 +0800

    DeveloperGuide: Update outdated information

[33mcommit c142d9f45a1854575b5a266e5aeabc16b7d7c635[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 21 16:04:42 2017 +0800

    docs: restructure dev docs

[33mcommit 921211be662eff61b06546952e7d2c6f4d191d39[m
Merge: 1488051e 2e608f0b
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 22:03:56 2017 +0800

    Update LearningOutcomes.adoc (#699)

[33mcommit 1488051e2795c1e41d82850f949a9de157516050[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 20:45:02 2017 +0800

    [#672] DeveloperGuide: Update instructions on setting up (#691)
    
    HelpWindowTest fails if the processResources task isn’t executed by
    Gradle before the test runs.
    
    This isn’t documented in the DeveloperGuide, which may cause confusion
    to future developers if they encounter this issue.
    
    Let’s update the setting up instructions in DeveloperGuide to reflect
    this issue.

[33mcommit 2e608f0badfae4d030f22ed72d7836d1d34afa13[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:29:37 2017 +0800

    LearningOutcomes: Update System Tests

[33mcommit 3f8b0ee31b2167b908574c446d919f50991ce309[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:29:17 2017 +0800

    LearningOutcomes: Update LogicManagerTest

[33mcommit e1bff8fe57f5bc9c03ca47b84d4316b7d6c92263[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:28:38 2017 +0800

    LearningOutcomes: Fix method reference in documentation

[33mcommit 57e71f4811eb4380a8fea20ffc428940c98abe52[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:28:01 2017 +0800

    LearningOutcomes: Fix typo

[33mcommit 467805643b20219c425c151269141483c51f9fe6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:26:58 2017 +0800

    LearningOutComes: Remove redundant instructions
    
    The hyperlink to the instructions are given just a few lines above this
    line.

[33mcommit c2de0d491991e48ab8f1c5310a6e94c47ce81909[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 19:25:46 2017 +0800

    LearningOutComes: Add hyperlink to EventsCenter
    
    This allows students to access EventsCenter.java easily.

[33mcommit ae25c1619a8d9c254f49540dd9c4dcd82b964755[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 21 11:22:34 2017 +0800

    LearningOutcomes.adoc: tweak to refer to se-book

[33mcommit 8b11b6b85ada2aa52e27198f71e2cd7268c4c90c[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Sep 21 16:48:10 2017 +0800

    [#680] HelpWindowTest: Write header comments concerning possible test failure (#694)
    
    HelpWindowTest fails on certain computers. The cursor does not move to
    the correct location, resulting in the wrong UI component being
    clicked. We suspect this to be a bug in the TestFX library.
    
    This causes the wrong UI component to be in focus, which leads to a
    test failure.
    
    Let's show an error message when the test fails.

[33mcommit 56949f20b39a3635975f32e278fb8543a3606e27[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Thu Sep 21 09:42:48 2017 +0800

    [#319] Checkstyle: enforce one variable declaration per line (#671)
    
    Having several variables are on the same line risk having conflicts
    for unrelated modifications by different developers.
    
    This rule checks for multiple variable declarations on single lines
    such as these,
    
    int a; int b;
    int a, b;
    
    while still allow multiple variable declarations on single statements
    such as these,
    
    int a,
         b;
    
    Let's teach Checkstyle to enforce the rule
    MultipleVariableDeclarations to check that there are no multiple
    variable declarations on single lines.

[33mcommit 1b9b5c38f14de086fddb4f7d387e140a7529b4b5[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 20 22:35:59 2017 +0800

    [#675] GuiUnitTest: Clears subscribers from EventsCenter after each test (#697)
    
    EventsCenter is a Singleton object, which is a possible cause of state
    leaks between tests as the state of the static objects are preserved
    across tests.
    
    EventsCenter isn’t cleared after each GuiUnitTest is executed, as such
    it stores a reference to its’ subscribers, which causes these objects
    to not be removed by Garbage Collection after the test is done
    executing. This causes AddCommandTest to fail when run locally on
    IntelliJ together with other tests.
    
    Let’s update GuiUnitTest to clears subscribers from EventsCenter after
    each test.
    
    Credits of debugging this issue goes to @pyokagan.

[33mcommit d1ede94244fb0bb0c28538828ca2a7c0af09fcb1[m
Merge: c56aa3f9 5ef9d78d
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 20 22:34:15 2017 +0800

    DeveloperGuide: Update converting docs instructions to use local files (#676)
    
    We use GitHub pages to print out the PDF version of the
    documentations.
    
    It is easier for developers to simply generate the PDF files directly
    using their local files without having to go through the steps of
    publishing the documentation on GitHub Pages.
    
    Let's modify the instructions under "Converting Documentation To PDF
    format" to use local html files instead.

[33mcommit 5ef9d78de051221fe861c04a12d5de9c49037fdf[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Wed Sep 20 16:32:44 2017 +0800

    DeveloperGuide: modify converting docs instructions to use local files
    
    We use GitHub pages to print out the PDF version of the
    documentations.
    
    It is easier for developers to simply generate the PDF files directly
    using their local files without having to go through the steps of
    publishing the documentation on GitHub Pages.
    
    Let's modify the instructions under "Converting Documentation To PDF
    format" to use local html files instead.

[33mcommit 41e8df9b94dc070384ecb2bbb51ac07166888229[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Mon Sep 18 13:38:01 2017 +0800

    DeveloperGuide: update figure number

[33mcommit c56aa3f9e869959d699a5884d60102391aee0f0c[m
Merge: 0608f618 48237d00
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 20 16:17:59 2017 +0800

    Documentation: Update instructions on deploying to GitHub Pages (#673)

[33mcommit 48237d005cbb6c812ad70b1f011d381081ccb17f[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Mon Sep 18 00:52:04 2017 +0800

    DeveloperGuide: update Publishing Documentation

[33mcommit 46d34e00e3a9d058f88c85464b7f9e397d0626ee[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Tue Sep 19 12:35:52 2017 +0800

    UsingTravis: add Deploying GitHub Pages section

[33mcommit b090f07e202379a1e6a97bbbac040343c8edbcc1[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Mon Sep 18 00:48:03 2017 +0800

    Remove UsingGithubPages.adoc

[33mcommit 0608f618270dca1b1558d3183dd8595713f8a72d[m
Merge: 726daedb 26ed50f9
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 23:22:25 2017 +0800

    DeleteCommandSystemTest: Replace Assume with Assert (#693)
    
    We use Assume to show that a precondition is met before executing a
    test.
    
    Assume should not be used in test cases as the Travis build passes even
    if tests are ignored. This forces developers to have to manually
    verify each Travis build to ensure that no tests are ignored.
    
    Let’s replace Assume with Assert.

[33mcommit 26ed50f9b44b666c577eebfa4eb1c8009afcb20a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 22:01:28 2017 +0800

    DeleteCommandSystemTest: Replace Assume with Assert
    
    We use Assume to show that a precondition is met before executing a
    test.
    
    Assume should not be used in test cases as the Travis build passes even
    if tests are ignored. This forces developers to have to manually
    verify each Travis build to ensure that no tests are ignored.
    
    Let’s replace Assume with Assert.

[33mcommit 726daedb1e40c818a67ab1e8017229a9f55c5793[m
Merge: 9d0d80c2 baaaffeb
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 21:52:39 2017 +0800

    [#678] SampleDataTest: Fix buggy implementation of getDataFileLocation() (#679)
    
    getDataFileLocation() must return a non-existent file location as part
    of this method's post-condition.
    
    However, this isn't ensured in the current implementation. As a result,
    the test case in SampleDataTest may fail.
    
    Let's update getDataFileLocation() to ensure that it returns a
    non-existent file location.

[33mcommit 9d0d80c2ed5761f70b4f4a1fdb90fead79c61dbc[m
Merge: 705f37c3 8bc11d6f
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 21:41:01 2017 +0800

    EditCommandSystemTest: Replace assert with junit.Assert (#689)
    
    We use assert to show that a precondition is met before executing a
    test.
    
    Asserts should not be used in test cases as they can be disabled.
    
    Let’s replace assert statements with junit.Assert

[33mcommit baaaffebdf1500b657b10120dfd7e8772522a812[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 18 17:42:51 2017 +0800

    SampleDataTest: Fix buggy implementation of getDataFileLocation()
    
    getDataFileLocation() must return a non-existent file location as part
    of this method's post-condition.
    
    However, this isn't ensured in the current implementation. As a result,
    the test case in SampleDataTest may fail.
    
    Let's update getDataFileLocation() to ensure that it returns a
    non-existent file location.

[33mcommit 8bc11d6f6b8dfd1640e4bf449c39ab695e8c8e24[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 11:13:40 2017 +0800

    EditCommandSystemTest: Replace assert with junit.Assert
    
    We use assert to show that a precondition is met before executing a
    test.
    
    Asserts should not be used in test cases as they can be disabled.
    
    Let’s replace assert statements with junit.Assert

[33mcommit 705f37c3b954aca71277cbad7e883b242539eb0e[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Sep 19 13:08:08 2017 +0800

    [#677] Gradle configuration: Fix nonGuiTests (#666)
    
    The command `gradle nonGuiTests` is expected to execute only non GUI
    tests. However, it is currently executing GUI tests as well.
    
    Let’s update this task to exclude the execution of GUI tests.

[33mcommit f44a524b29127d154a6858f036b535f2bf62dd9d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 13 20:42:31 2017 +0800

    DeleteCommandSystemTest: Replace assert with Assume
    
    We use assert to show that a precondition is met before executing a
    test.
    
    Asserts should not be used in test cases as JUnit’s Assume class
    provides the same functionality, and it conveys the message that a
    particular condition needs to be met before the test is executed.
    
    Let’s replace assert statements with Assume.

[33mcommit 4334a642340a8b11fb2c8bb10f75abdeb6f73e70[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 13 20:38:16 2017 +0800

    AddressBookSystemTest: Extract common test helper methods
    
    System tests manually execute FindCommand, ListCommand and SelectCommand
    to set up the some of the tests.
    
    It is unnecessary for these tests to know the exact command to execute
    to set up the tests.
    
    Let’s extract the execution of these commands to AddressBookSystemTest
    to provide a layer of abstraction for these system tests.

[33mcommit 11f1e7c2c842faa5bd547cea6f911bb473750abc[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 15:40:35 2017 +0800

    AddressBookSystemTest: Remove getTestApp()
    
    All test classes call getTestApp()#getModel() to retrieve the model.
    
    This is unnecessarily long. Also, it’s unnecessary for these test
    classes to be aware of what a TestApp is.
    
    Let’s replace getTestApp() with getModel(), which retrieves the
    testApp’s model directly.

[33mcommit 44b7dcda16e7022f6d7ef3c417b635b24d91a786[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 13:56:35 2017 +0800

    DeleteCommandSystemTest: Remove String#valueOf(int) call
    
    We convert an int value to a String by calling String#valueOf(int) when
    we are creating a command.
    
    This method call is unnecessary as the integer value is automatically
    converted to a String.
    
    Let’s remove the call to String#valueOf(int).

[33mcommit e57cdf5677ed4d473d33161607924ebe903377e3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 13:52:09 2017 +0800

    DeleteCommandSystemTest: Segment test cases
    
    There are many tests cases in the test method.
    
    Without segmenting the tests, it is harder for future readers to know
    what we are testing.
    
    Let’s segment the test cases to improve readability of the test cases.

[33mcommit 48abf5a3d160c77f529803d1825ed8b514848f6e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 13:47:01 2017 +0800

    DeleteCommandSystemTest: Update test verification method comments
    
    The javadoc comments for test verification methods are written in a
    paragraph.
    
    This makes it hard to read, especially since it's quite long.
    
    Let's improve readability by making it into point forms instead.

[33mcommit 31efee105e7ead4ee458ca2de957c3dded46a109[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 13:43:05 2017 +0800

    DeleteCommandSystemTest: Rename variable commandToRun to command
    
    assertCommandSuccess(...) and assertCommandFailure(...) takes in a
    String named commandToRun.
    
    This variable is unnecessarily long; naming it as command is
    sufficiently descriptive.
    
    Let's update commandToRun to command.

[33mcommit 3e4e6c86318216427c8ab1d4b4482636b4dfd3dc[m
Merge: 66d24fc7 8c158106
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 18 22:27:39 2017 +0800

    [#660] Update AboutUs.adoc (#661)
    
    The AboutUs page has a different format compared to other versions of
    AddressBook.
    
    This is untidy.
    
    Let's convert AddressBook - Level4's AboutUs page to be of the same
    format as that of other versions of AddressBook. Also, as this project
    is expected to be forked and worked on by students, let's also add a
    sample page format by updating existing names and images to use
    placeholder names and images.

[33mcommit 8c158106ad43c1db8f3e2f20f8759bdd3df8b6db[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 13 21:08:43 2017 +0800

    Update AboutUs.adoc
    
    The AboutUs page has a different format compared to other versions of
    AddressBook.
    
    This is untidy.
    
    Let's convert AddressBook - Level4's AboutUs page to be of the same
    format as that of other versions of AddressBook. Also, as this project
    is expected to be forked and worked on by students, let's also add a
    sample page format by updating existing names and images to use
    placeholder names and images.

[33mcommit 66d24fc7d51db891f93095d29344300e63ce1049[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Sun Sep 17 18:21:28 2017 +0800

    [#319] Checkstyle: enforce single statement per line (#669)
    
    It's difficult to read multiple statements on a single line. Also,
    single statement per line means fewer merge conflicts to clean up.
    
    Let's teach Checkstyle to enforce the rules OneStatementPerLine to
    maintain the single line statements practice in our code.

[33mcommit ba2559428a75d9e3f0e2c5fd21ffb9bbd9a115db[m
Merge: a0fda2db 3a347a81
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 17:28:46 2017 +0800

    [#608] Developer Guide: Fix formatting errors in the use case (#662)
    
    There are formatting errors in the use cases. For example, some use
    cases are not properly indented.
    
    Let's fix them.

[33mcommit 3a347a81c3a75a38fe052bd6ac771ad94b37dc65[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Sep 2 22:36:47 2017 +0800

    DeveloperGuide: Fix formatting errors in the use case
    
    There are formatting errors in the use cases. For example, some use
    cases are not properly indented.
    
    Let's fix them.

[33mcommit a0fda2db0fca2940013c90cf28c93510281c3bb5[m
Merge: 135f5d73 f8b29a62
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 09:41:05 2017 +0800

    [#461] Developer Guide: Fix unintended quote marks (#656)
    
    There are no quotes in the Developer Guide, but there are quote marks
    in it.
    
    This is misleading.
    
    Let's remove these quote marks.

[33mcommit f8b29a62da1cea2d5b90b17356ad6c958576b4f7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 09:34:01 2017 +0800

    Developer Guide: Fix unintended quote marks
    
    There are no quotes in the Developer Guide, but there are quote marks
    in it.
    
    This is misleading.
    
    Let's remove these quote marks.

[33mcommit 135f5d735bdd275eb58f126fecb81fedd00c2a67[m
Merge: 8e7dc863 c07e1463
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 09:18:49 2017 +0800

    [#551] Convert EditCommandTest to EditCommandSystemTest (#655)
    
    Tests in the 'guitests' packages, such as EditCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert EditCommandTest to a system test.

[33mcommit c07e1463923e1cab7bb65d167ce6f57d35c18287[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Sep 2 11:26:42 2017 +0800

    Convert EditCommandTest to EditCommandSystemTest

[33mcommit 8e7dc8636eec6bee6faed5582f79f4c07bd72ca5[m
Merge: bfaee145 8915a7d7
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 8 08:18:10 2017 +0800

    [#641] DeleteCommandSystemTest: Add missing test case (#657)
    
    DeleteCommandSystemTest is missing test cases pertaining to filtered
    lists. There are also other minor issues in the code, such as calling of old
    API which is unnecessarily long, and violation of DRY principle.
    
    Let's write the missing test cases and fix these issues.

[33mcommit bfaee145bbc4be28b9826ac8780946133a69f805[m
Merge: e3f161f0 d33ffaf0
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Sep 6 09:04:19 2017 +0800

    [#649] Remove UnmodifiableObservableList (#652)
    
    FXCollections#unmodifiableObservableList(ObservableList<E>) returns an
    unmodifiable wrapper list on top of provided observable list. This
    works similarly to UnmodifiableObservableList in our code base.
    
    There is no need for us to use our own version of
    UnmodifiableObservableList.
    
    Let's update classes to call this method in FXCollections to create an
    unmodifiable ObservableList instead of using
    UnmodifiableObservableList. Then, let's delete
    UnmodifiableObservableList.

[33mcommit d33ffaf0dcc22018968ddf758f8ac424545ccf96[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 1 16:27:19 2017 +0800

    Delete UnmodifiableObservableList
    
    This class is unused.

[33mcommit 40bf2a16cbd5e078853b2dbf94092528712ae8c2[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 1 17:08:34 2017 +0800

    Update classes to not use UnmodifiableObservableList
    
    FXCollections#unmodifiableObservableList(ObservableList<E>) returns an
    unmodifiable wrapper list on top of provided observable list. This
    works similarly to UnmodifiableObservableList in our code base.
    
    There is no need for us to use our own version of
    UnmodifiableObservableList.
    
    As part of deleting UnmodifiableObservableList, let's update classes to
    call this method in FXCollections to create an unmodifiable
    ObservableList instead of using UnmodifiableObservableList.

[33mcommit c1df3f4d1da28933b75c1d7d59e1e00f3a38f45b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 1 15:03:35 2017 +0800

    UniquePersonList: Update asObservableList() return type
    
    asObservableList() returns an UnmodifiableObservableList<Person>.
    Callers can access the Person objects inside the list and modify them,
    causing the internal list in UniquePersonList to be updated as well.
    
    This is a potential cause of bugs.
    
    Let’s update this method to return
    UnmodifiableObservableList<ReadOnlyPerson> instead.

[33mcommit 3b27d4102a9e69eecb2380ac1a5bb88e7aa723df[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Sep 1 15:01:01 2017 +0800

    DeleteCommand and SelectCommand: Don’t use UnmodifiableObservableList
    
    executeUndoableCommand() and execute() in DeleteCommand and
    SelectCommand respectively call Model#getFilteredPersonList() and
    assigns it to a variable of type UnmodifiableObservableList.
    
    There is no need for these commands to assign the variable to such a
    specific type; in the event when Model#getFilteredPersonList() is
    updated to return another type of List, these Commands will need to have
    their code updated as well.
    
    Let’s update the variable to be of type List instead.

[33mcommit 8915a7d7db28baba7629548ac6b5b92a583fe995[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 10:56:45 2017 +0800

    DeleteCommandSystemTest: Add missing test cases

[33mcommit ad591fb53879ac039f1b9ddb4effeb0d019800c3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 10:47:45 2017 +0800

    DeleteCommandSystemTest: Add overload assertCommandSuccess(Index)
    
    There are repeated code in the test method.
    
    This violates the DRY principle.
    
    Let’s refactor the repeated code out into a new overload test
    verification method.

[33mcommit 030f8621cfc60f541bac4d324a2e9311cca64d57[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 16:43:44 2017 +0800

    DeleteCommandSystemTest: Update the use of expectedModel
    
    This variable is used throughout the test.
    
    This makes it hard to keep track of what the expectedModel is currently
    storing, since some of the test cases use the expectedModel object
    that is constructed few test cases before itself.
    
    Let’s replace the use of expectedModel with other more meaningful
    variables.

[33mcommit dbaeba1680f1cb0df7a2fa14bb0773a9d2ca9ae8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 19:55:21 2017 +0800

    DeleteCommandSystemTest: Update creation of ModelManager
    
    ModelManager objects are created by calling the constructor.
    
    This makes the code look unnecessarily long as we have to pass in the
    expected address book as the parameter when constructing the
    ModelManager object.
    
    Let’s update the creation of ModelManager objects by calling
    getTestApp()#getModel() instead. This method returns a defensive copy
    of the current model.

[33mcommit e3f161f0a40f6103002f26f0ba86fc4a5b92908c[m
Merge: b2a141a9 d8a4602a
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Sep 4 09:40:48 2017 +0800

    [#603] Developer Guide: Document previewing of .adoc files (#654)
    
    Students may not know how to preview .adoc files locally. As such, they
    might push the changes to their repo every time they make a change to
    preview the changes that they have made.
    
    This is inefficient.
    
    Let's add a section in Developer Guide to teach the students on more
    efficient ways of previewing the changes that they have made to .adoc
    files.

[33mcommit d8a4602a47abd816b2125720a0ceb5fd0c926148[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Sep 2 22:57:40 2017 +0800

    Developer Guide: Document previewing of .adoc files
    
    Students may not know how to preview .adoc files locally. As such, they
    might push the changes to their repo every time they make a change to
    preview the changes that they have made.
    
    This is inefficient.
    
    Let's add a section in Developer Guide to teach the students on more
    efficient ways of previewing the changes that they have made to .adoc
    files.

[33mcommit b2a141a9516aa5c09472a3b00e0c696e209678a1[m
Merge: 7476e465 90778a66
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sun Sep 3 17:50:34 2017 +0800

    [#551] Convert AddCommandTest to a system test (#640)
    
    Tests in the 'guitests' packages, such as AddCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert AddCommandTest to a system test.

[33mcommit 90778a6682680a564876caa5b9ebde811a32de8e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 20:00:54 2017 +0800

    AddCommandSystemTest: Add additional tests

[33mcommit 75fd8630c663124d7edcf20d9e27ba2254d2cbcb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Sep 2 22:08:49 2017 +0800

    AddressBook#addPerson(ReadOnlyPerson): Document bug

[33mcommit c587a0506cee54a37e1d888f742b52a8d5e53132[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 19:31:15 2017 +0800

    Convert AddCommandTest to AddCommandSystemTest

[33mcommit 7476e465730a42788467220baaee089a8edb2bfa[m
Merge: 9ec39d08 559383f2
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 31 23:04:51 2017 +0800

    [#551] Convert ClearCommandTest to a system test (#639)
    
    Tests in the 'guitests' packages, such as ClearCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert ClearCommandTest to a system test.

[33mcommit 559383f29db4e470d5d4ba7da222341503c5b0d7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 19:04:13 2017 +0800

    ClearCommandSystemTest: Add additional tests

[33mcommit 1c8fbf24d0aa63e000fa43b4ddd9a6a91a5b56ae[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 18:21:15 2017 +0800

    Convert ClearCommandTest to ClearCommandSystemTest

[33mcommit 9ec39d08a709dd5bb61cd3c03ef99f6ff1ac05e4[m
Merge: 8ae4284e a3c1fbcc
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 30 07:40:22 2017 +0800

    [#551] Convert FindCommandTest to a system test (#638)
    
    Tests in the 'guitests' packages, such as FindCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert FindCommandTest to a system test.

[33mcommit a3c1fbccf91043411e1cf2d75bc461f771f1a0fd[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 18:00:24 2017 +0800

    FindCommandSystemTest: Add tests involving card selection

[33mcommit 3a33cc50431b78d60fecb0933aaba9fa0f840ef8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 17:25:31 2017 +0800

    FindCommandSystemTest: Add additional tests

[33mcommit 530bf36261417b29e3e23617b023d93e72bdc9e9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 15:38:02 2017 +0800

    Convert FindCommandTest to FindCommandSystemTest

[33mcommit 8ae4284e301fad622341a30431aa690798ced97b[m
Merge: 62263f70 8f4bb16d
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 29 11:57:48 2017 +0800

    [#551] Convert SelectCommandTest to a system test (#636)
    
    Tests in the 'guitests' packages, such as SelectCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert SelectCommandTest to a system test.

[33mcommit 8f4bb16d4087e0e0882a3210d0e4535a43543ab1[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 29 10:51:17 2017 +0800

    DeleteCommandSystemTest: Update assertCommandFailure(...)
    
    assertCommandFailure(...) creates a defensive copy of the TestApp's
    Model.
    
    This is unnecessary as TestApp#getModel() returns a defensive copy
    of the TestApp's Model as well.
    
    Let's shorten the code in assertCommandFailure(...) by simply calling
    TestApp#getModel().

[33mcommit bd9035de414ea669a7871932d2940c310aaae3b9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 18:00:24 2017 +0800

    SelectCommandSystemTest: Add tests involving filtering

[33mcommit 003bac5e67d26a19472e643a6f1fc1512ac83956[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 14:37:10 2017 +0800

    SelectCommandSystemTest: Add additional tests

[33mcommit 3263209f1c6f3e03f620b67cbe21f7f90d371fa7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 09:44:01 2017 +0800

    Convert SelectCommandTest to SelectCommandSystemTest

[33mcommit 2415b605e3a8ebb92c636cc85ee66f83a52b67cd[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 29 10:10:02 2017 +0800

    AddressBookSystemTest: Rename command box verification methods

[33mcommit 62263f7025ca13858e549a078bdc923439c0b09a[m
Merge: eab2f641 1f60054e
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 28 14:53:54 2017 +0800

    [#568] Tests: Update helper methods to throw unchecked Exceptions (#628)
    
    Helper methods in tests throw checked Exceptions.
    
    As tests are not expected to handle checked Exceptions, it is
    unnecessary for helper methods to throw checked Exceptions.
    
    Let's update these helper methods to throw unchecked Exceptions
    instead.
    
    If tests call methods in the main code base that throw checked
    exceptions, they do not have to wrap the code around a try-catch block
    to rethrow an unchecked exception. This is because it makes the code
    unnecessarily longer. The purpose of this PR is to stop the throwing
    of checked exceptions from propagating, causing the tests and helper
    methods to need to throw them as well.

[33mcommit 1f60054e8af483caeb5d8ae6dd2eb0caa63757ed[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 15 13:16:29 2017 +0800

    Tests: Update helper methods to throw unchecked Exceptions
    
    Helper methods in tests throw checked Exceptions.
    
    As tests are not expected to handle checked Exceptions, it is
    unnecessary for helper methods to throw checked Exceptions.
    
    Let's update these helper methods to throw unchecked Exceptions
    instead.
    
    If tests call methods in the main code base that throw checked
    exceptions, they do not have to wrap the code around a try-catch block
    to rethrow an unchecked exception. This is because it makes the code
    unnecessarily longer. The purpose of this PR is to stop the throwing
    of checked exceptions from propagating, causing the tests and helper
    methods to need to throw them as well.

[33mcommit eab2f64177d18c07f0aba0357e25408ccc60c8db[m
Merge: d0036169 553a75bb
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sun Aug 27 21:39:42 2017 +0800

    [#644] Tidy up System Tests (#645)
    
    There are some areas of code in system tests that have minor bugs and
    code issues. For e.g. AddressBookSystemTest's header comments is
    outdated and TestApp#getModel() is returning the wrong model.
    
    Let's fix these minor issues.

[33mcommit 553a75bb5867cd66a12e1e8fd63ce4f767beac29[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 24 09:22:37 2017 +0800

    AddressBookSystemTest: Update application’s clock on command execution
    
    Test classes have to update the application’s clock after each command
    has been executed. In DeleteCommandSystemTest, the update is called in
    both assertCommandSuccess(...) and assertCommandFailure(...).
    
    This leads to a lot of code repetition when other system tests are
    implemented, as they will have to update the clock in their own
    implementations of assertCommandSuccess(...) and
    assertCommandFailure(...).
    
    Let’s update executeCommand(String) to update the application’s clock
    immediately before a command is executed so that test classes do not
    have to update it.

[33mcommit a88eb6f91b7847f0e2bbed3a39538a78f048ef58[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 23 09:52:46 2017 +0800

    AddressBookSystemTest: Add missing wait for browser to load
    
    When TestApp is initialised, the default browser url page is loaded.
    
    There is no wait to ensure that this page is loaded before
    assertApplicationStartingStateIsCorrect() is called. This causes a race
    condition: if the page has not been successfully loaded before
    assertApplicationStartingStateIsCorrect(), this assertion method will
    fail.
    
    Let's teach AddressBookSystemTest to wait for the browser to load
    before calling assertApplicationStartingStateIsCorrect().

[33mcommit 5bdfdc9d9b6a333c5edd06e130264873a5879399[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 23 09:49:52 2017 +0800

    AddressBookSystemTest: Wait for browser to load after command execution
    
    Test classes have to call
    WebViewUtil#waitUntilBrowserLoaded(BrowserPanelHandle) whenever a
    command that causes the browser to load a new page is executed.
    
    This causes code repetition when other test classes are implemented.
    
    Let’s shift this method call to executeCommand(String), so that this
    method only returns after the browser has loaded.
    
    Also, let’s enhance the concurrency check so that
    WebViewUtil#waitUntilBrowserLoaded(BrowserPanelHandle) does not have to
    manually reset the boolean concurrency variable.

[33mcommit 4002c7ae3f3eebdedc5651cc9bc541c904dff08a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 22 15:38:02 2017 +0800

    TestApp#getModel(): Return actual model
    
    This method returns a defensive copy of the model.
    
    This isn’t an exact copy of the model as the ModelManager’s constructor
    initialises the FilteredList to show all persons, even though the
    original model’s FilteredList may not be showing all persons.
    
    As there is no way to make a defensive copy of the model, let’s return
    the original model instead.

[33mcommit 2a1100736769dcb0b9edd95ba3d28a1df152fe44[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 21 19:52:57 2017 +0800

    AddressBookSystemTest: Update header comments

[33mcommit d0036169d41485a064b881577ee294038b122b62[m
Merge: e32a1e79 7a04eecc
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 24 09:15:11 2017 +0800

    (#319) Checkstyle: enforce header comments on classes and methods [#379]
    
    Our coding standard for Java requires header comments for all classes,
    public methods, and all non-trivial private methods. This rule is not
    enforced by Checkstyle.
    
    Let's teach Checkstyle to enforce the coding standard above by adding
    the rules JavadocMethod and JavadocType, which cover the checks on
    methods and classes respectively.

[33mcommit 7a04eecc08679c3c5931d2b987f7d557bfc704b9[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Sun Aug 20 19:38:15 2017 +0800

    Checkstyle: enforce header comments on classes and methods
    
    Our coding standard for Java requires header comments for all classes,
    public methods, and all non-trivial private methods. This rule is not
    enforced by checkstyle.
    
    Let's teach Checkstyle to enforce the coding standard above by adding
    the rules JavadocMethod and JavadocType, which cover the checks on
    methods and classes respectively.

[33mcommit 2b03991c5eab208ca71aa247bd57b038bd5fac73[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Wed Aug 16 15:24:47 2017 +0800

    Main folder: add missing API header comments

[33mcommit e32a1e791badb4acfe80365177b0600826dcfee1[m
Merge: da1601d8 92a3c9eb
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 21 19:44:50 2017 +0800

    [#551] Improve system tests (#620)
    
    There are problems with system tests. For e.g. the CommandBox's style
    isn't verified during the tests and the design of AddressBookSystemTest
    and AppStateAsserts are hard to understand.
    
    This means that our tests are not thorough enough and future developers
    may find it hard to understand the system tests.
    
    Let's resolve these issues.

[33mcommit 92a3c9ebda1abeef0107d84aded48cfa81baf61a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 16 09:52:08 2017 +0800

    AddressBookSystemTest#getTestApp(): Update access modifier to protected

[33mcommit e71aaf14d195d2c004b2c7b36325aad2c72d6848[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 15 21:03:54 2017 +0800

    AddressBookSystemTest: Remove typo

[33mcommit d40057bc8210a3b60c7b46e53ca25df3b70599eb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 15 11:41:00 2017 +0800

    AddressBookSystemTest: Update verifyApplicationStartingStateIsCorrect()
    
    This method verifies that the starting state of the application is
    correct through the use of assertions.
    
    The method name should be updated to
    assertApplicationStartingStateIsCorrect() to better reflect what it is
    doing.
    
    Let’s update the method name and the header comments accordingly.

[33mcommit 89fcc52287583aa8f8fdb6948cfc6c6a05bd4fb3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sun Aug 20 16:23:42 2017 +0800

    AddressBookSystemTest: Improve test verification
    
    assertSelectedCardChange() only verifies that the selected card is
    different from the card that was remembered previously.
    
    This test verification passes even though the incorrect card may be
    selected.
    
    Let’s teach assertSelectedCardChange() to accept a new parameter Index
    expectedSelectedCardIndex, so that this method is able to verify
    that the correct card has been selected.

[33mcommit 18b5566e8269e4e6e136deebd19f066d03aef10f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 16 10:59:03 2017 +0800

    DeleteCommandSystemTest: Remove assertDeleteCommandSuccess(...)
    
    assertDeleteCommandSuccess(...) and assertCommandSuccess(...) achieve
    roughly the same functionality.
    
    This results in both methods having similar header comments, making it
    hard to distinguish the difference between the methods.
    
    Let's inline assertDeleteCommandSuccess(...) and extract parts of the
    code into a helper method.

[33mcommit 759b7b27bdb45d642c47afce8598a30b8480f4a2[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 18 09:26:30 2017 +0800

    AddressBookSystemTest: Add CommandBox’s style verification
    
    CommandBox's style is not verified in tests.
    
    This check should be included to ensure thoroughness of the test
    verification.
    
    Let’s add methods to verify that the CommandBox's style is as expected.

[33mcommit 752be46b083f08a7b147ad4a9e05059154fb1c4c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 17 12:39:57 2017 +0800

    AddressBookSystemTest: Add test execution and verification method
    
    All tests will have to verify that the command box, result display box
    and model are correct. These verifications are repeated in
    DeleteCommandSystemTest. When we implement future tests, we foresee
    these verifications will be repeated again.
    
    This violates DRY principle.
    
    Let's extract these common checks as a helper method in
    AddressBookSystemTest, so that DeleteCommandSystemTest and future tests
    do not have to repeat the same code.

[33mcommit 1df9e961534b9239cd1d9688d51077af52fdd771[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 12 10:22:36 2017 +0800

    AddressBookSystemTest: Add test verification helper method
    
    The browser panel is only updated if and only if the selected card in
    the person list panel is changed.
    
    It is unnecessarily tedious for test classes to call both methods
    separately to check that both the browser panel and the person list
    panel has changed. For e.g., DeleteCommandSystemTest has to call both
    getBrowserPanel().isUrlChanged() and
    getPersonListPanel().isSelectedPersonCardChanged().
    
    Let's add helper methods in AddressBookSystemTest
    assertBrowserUrlAndSelectedCardChanged() and
    assertBrowserUrlAndSelectedCardUnchanged(). These methods will then
    call the relevant methods in BrowserPanelHandle and
    PersonListPanelHandle to perform the test verifications.

[33mcommit ab3df4f6a35870692acbabd282ff6dc0acf5d64b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 15 19:46:58 2017 +0800

    Delete AppStateAsserts
    
    AppStateAsserts contains test verification methods.
    
    As the responsibility of AddressBookSystemTest is to provide helper
    methods for tests to use, the test verification methods should belong
    to AddressBookSystemTest.
    
    Let's move the test verification methods from AppStateAsserts to
    AddressBookSystemTest. This makes AppStateAsserts redundant, let's
    delete it.

[33mcommit d7b44b25934b2dba7a7bfdf7006d3dc2289856bb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 18 08:18:09 2017 +0800

    ClockRule: Improve verification
    
    ClockRule only injects a fixed clock at the start of each test method.
    Some test methods do multiple tests i.e. execute multiple commands,
    which implies that the status bar's timing is always being verified
    with the same timing.
    
    This causes the testing of the status bar's timing to be insufficient
    as we are only effectively testing that the first test updates the
    status bar's timing correctly.
    
    Let's add a method in ClockRule that updates the injected clock to the
    current time, and let's teach DeleteCommandSystemTest to call this
    method whenever a test is executed.

[33mcommit 49694c6745534c76106a6913484656ff372b0bfc[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 15 19:42:57 2017 +0800

    AddressBookSystemTest: Extract setup methods
    
    AddressBookSystemTest is getting bloated and its' responsibility begins
    to become unclear.
    
    This violates SRP.
    
    Let's extract setup methods into new classes, so that the
    responsibility of AddressBookSystemTest is solely to provide helper
    methods for tests to use.

[33mcommit 114b560c07314476a49b42f4e10721b9a1bf3ced[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 10 17:31:57 2017 +0800

    DeleteCommandSystemTest: Add test verification methods
    
    The test verification methods in AppStateAsserts is flexible and caters
    for all the tests.
    
    This causes these methods to be ambiguous concerning what exactly is
    being tested. For example, the header comments of
    assertCommandSuccess(...) only tells us that “the GUI components display
    what we expected”, which is ambiguous.
    
    Let’s shift the test verification methods from AppStateAsserts to
    DeleteCommandSystemTest and custom tailor it to suit the DeleteCommand,
    so that we do not have to pass in as many boolean flags to these
    methods, and so that developers can easily see what is being tested.

[33mcommit da1601d8421af0408fa699ea96cdebb86c6520b3[m
Merge: ddcea635 39b0b30c
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 19 08:50:39 2017 +0800

    [#598] EventsCenter: Remove registerHandler method return type (#630)
    
    The name registerHandler does not suggest that a return value is
    necessary. Also, the return value is unused and does not complement
    any other methods in EventsCenter.
    
    Let's change the return type for EventsCenter#registerHandler() to
    void.

[33mcommit 39b0b30c54d744dbd53536c449546b30cc2d48da[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Wed Aug 16 16:32:24 2017 +0800

    EventsCenter: change registerHandler method return type
    
    The name registerHandler does not suggest that a return value is
    necessary. Also, the return value is unused and does not complement
    any other methods in EventsCenter.
    
    Let's change the return type for EventsCenter#registerHandler() to
    void.

[33mcommit ddcea63541d5f73f6b3d7c6c7676d4db2bb1af9a[m
Merge: 7beb5c62 dbb2a6af
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 14 08:47:53 2017 +0800

    [#623] Fix bugs in GUI related classes (#624)
    
    There are some bugs in GUI related classes. For example,
    BrowserPanel#loadPage(String) and StatusBarFooter#setSyncStatus(String)
    does not necessarily run on the JavaFX thread, which causes Exception
    to be thrown.
    
    Let's fix them.

[33mcommit dbb2a6af08b951ac2878248a763e4ebc9d24c783[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 12 10:44:32 2017 +0800

    ResultDisplay: Fix GUI update not running on JavaFX thread
    
    Setting a new value to be displayed in ResultDisplay must run on the
    JavaFX thread.
    
    The current implementation doesn’t ensure that it runs on the JavaFX
    thread.
    
    Let’s update it to ensure that it runs on the JavaFX thread.

[33mcommit e771b11af6b33858c937e84123c86762d3810c3c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 10 17:37:05 2017 +0800

    StatusBarFooter: Fix GUI update not running on JavaFX thread
    
    setSyncStatus(String) and setSaveLocation(String) must run on the
    JavaFX thread.
    
    The current implementation doesn’t ensure that these methods run on the
    JavaFX thread.
    
    Let’s update them to ensure that they run on the JavaFX thread.

[33mcommit a951b97f02d9b827c52d1047fb93c3e534051215[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 10 17:34:25 2017 +0800

    BrowserPanel: Fix GUI update not running on JavaFX thread
    
    loadPage(String) must run on the JavaFX thread.
    
    The current implementation doesn’t ensure that this method runs on the
    JavaFX thread.
    
    Let’s update the method to ensure that this method runs on the JavaFX
    thread.

[33mcommit f01c17dbb281044c6c3bebc26152cb25ad4869da[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 10:43:28 2017 +0800

    PersonListPanelHandle: Fix logic error

[33mcommit 7beb5c62006b37a821e44af289c579f508b7c16e[m
Merge: 7ac8f04b c4ea7e5a
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 14 08:16:18 2017 +0800

    [#625] AppStateAsserts: Ensure WebView loaded before verifying test #626
    
    AppStateAsserts does not ensure that the BrowserPanel's WebView is
    loaded before performing state verification. As such, callers such as
    DeleteCommandSystemTest have to call GuiRobot.sleep() to wait for
    a short while until the WebView is successfully loaded.
    
    Calling GuiRobot.sleep() is not a good way to resolve the race
    condition as we cannot be sure that the WebView does not take longer to
    load than the timing we have allocated for the thread to sleep.
    
    Let's implement a proper waiting mechanism in AppStateAsserts.

[33mcommit c4ea7e5a2102220453eb3bd1c2a5577017062d8a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 12 11:06:10 2017 +0800

    Remove WebViewLoadedEvent
    
    We have 2 ways to notify other classes that the WebView has been
    successfully loaded.
    
    There is no need to have 2 ways to notify other classes that the WebView
    has been successfully loaded; having 1 way of doing so is sufficient.
    
    Let’s remove the posting of WebViewLoadedEvent in BrowserPanelHandle
    and let’s remove WebViewLoadedEvent too.

[33mcommit c10a72a792ba791eb6898c69f4cce4584ea60488[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 09:41:57 2017 +0800

    AppStateAsserts: Resolve browser loading race condition
    
    BrowserPanel’s WebView takes time to be loaded.
    
    This causes a race condition as the verification of the browser’s
    URL may happen before the browser was successfully loaded, therefore
    causing the test to fail.
    
    Let’s add a boolean variable isWebViewLoaded to BrowserPanelHandle.
    This variable will be updated to true when a new web page is loaded.
    If AppStateAsserts is expecting a new web page to be loaded, it will
    wait until isWebViewLoaded equals true before verifying that the
    browser’s URL is changed.

[33mcommit 7ac8f04b547d08a9687642124866a5b5b24f1e64[m
Merge: b755b2b9 60753179
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Aug 10 19:03:29 2017 +0800

    [#519] Model: Remove updateFilteredListToShowAll() (#615)
    
    Model has 2 methods to update the filtered list.
    updateFilteredListToShowAll() displays all persons in the filtered list,
    while updateFilteredPersonList(Predicate<ReadOnlyPerson>) displays
    the persons that matches the predicate.
    
    updateFilteredListToShowAll() is redundant as we can pass in a
    Predicate that always return true to
    updateFilteredPersonList(Predicate<ReadOnlyPerson>) to cause it to
    display all persons.
    
    Let’s remove updateFilteredListToShowAll().
    
    Even though we can pass in a null pointer to display all persons as
    this is the way that FilteredList is implemented, however we chose to
    pass in a lambda expression "(unused) -> true" to display all persons.
    This is because null can be a result of programming errors and using a
    null pointer makes it harder to differentiate whether it was
    intentional for the list to display all persons, or whether it was a
    result of programming errors.

[33mcommit 60753179a8875fd4b2af4da7ed43185284e210b7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 16:24:29 2017 +0800

    Model: Remove updateFilteredListToShowAll()
    
    Model has 2 methods to update the filtered list.
    updateFilteredListToShowAll() displays all persons in the filtered list,
    while updateFilteredPersonList(Predicate<ReadOnlyPerson>) displays
    the persons that matches the predicate.
    
    updateFilteredListToShowAll() is redundant as we can pass in a
    Predicate that always return true to
    updateFilteredPersonList(Predicate<ReadOnlyPerson>) to cause it to
    display all persons.
    
    Let’s remove updateFilteredListToShowAll().
    
    Even though we can pass in a null pointer to display all persons as
    this is the way that FilteredList is implemented, however we chose to
    pass in a lambda expression "(unused) -> true" to display all persons.
    This is because null can be a result of programming errors and using a
    null pointer makes it harder to differentiate whether it was
    intentional for the list to display all persons, or whether it was a
    result of programming errors.

[33mcommit b755b2b91255617ba62ad424a98d6c759a1dd23e[m
Merge: dfe7c278 50d641d0
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Aug 9 07:51:10 2017 +0800

    [#575] MainApp: Update version number (#622)

[33mcommit 50d641d033139583735f0c7fd2d00764c7ac9f3b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 10:23:59 2017 +0800

    MainApp: Update version number

[33mcommit dfe7c278f787169ef24e55a9b5165d71c878f535[m
Merge: ecdd485a 0126a8a1
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 15:04:26 2017 +0800

    [#571] Clean up TypicalPersons (#618)
    
    TypicalPersons has some areas for improvements. For example, this class
    is missing header comments. Also, constants such as INDEX_FIRST_PERSON
    should not be in TypicalPersons as TypicalPersons should only concern
    itself with Person objects, not Index objects.
    
    Let's fix them.

[33mcommit 0126a8a1f78b6122ca7936fda6fde7ac79cc61ac[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 20:13:01 2017 +0800

    TypicalPersons: Update getTypicalPersons()’s return type
    
    getTypicalPersons() return an array of ReadOnlyPerson.
    
    Some callers require the values to be stored in a List instead of an
    array. As such, they have to manually convert it to a List.
    
    Let’s teach TypicalPersons to return a List<ReadOnlyPerson> instead.

[33mcommit d53434c2fe10adc73bb0ac2bd7ee0065eda9925f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 16:55:45 2017 +0800

    TypicalPersons: Move Index constants to TypicalIndexes
    
    TypicalPersons contain Index constants.
    
    This violates Single Responsibility Principle as TypicalPersons should
    only contain constants and helper methods pertaining to Person objects.
    
    Let’s add TypicalIndex and move the Index constants to this new class.

[33mcommit 49cc710c3122ea00b61b0bcf9604a8ac9075c562[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 16:52:40 2017 +0800

    TypicalPersons: Remove defensive copy in getTypicalAddressBook()
    
    getTypicalAddressBook() calls ab.addPerson(new Person(person)).
    
    This is unnecessary as AddressBook performs a defensive copy when
    calling addPerson(ReadOnlyPerson).
    
    Let’s remove the defensive copy in getTypicalAddressBook().

[33mcommit b1eab19871123c8df33e5436dae0d0b9ad2a543a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 16:32:33 2017 +0800

    TypicalPersons: Write header comments

[33mcommit bd0b938e532251fc796b043a778ca30052e389a4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 16:31:13 2017 +0800

    TypicalPersons: Remove loadAddressBookWithSampleData(AddressBook)
    
    getTypicalAddressBook() and loadAddressBookWithSampleData(AddressBook)
    are similar methods. The former returns an AddressBook with the content
    of the preset Persons in TypicalPersons, while the latter appends the
    content of the preset Persons into the original content of the
    AddressBook passed in.
    
    No callers require the appending functionality, and they can call
    getTypicalAddressBook() instead.
    
    Let’s remove loadAddressBookWithSampleData(AddressBook).

[33mcommit ecdd485a6efa74886e540f7b6e6acdbee30e32a1[m[33m ([m[1;33mtag: v0.6[m[33m)[m
Merge: a60d16b3 895430f4
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Aug 8 10:21:04 2017 +0800

    [#621] UniquePersonList: Simplify logic of updatePerson(...) (#616)
    
    This method retrieves the person in the list to be updated, and calls
    Person#resetData(ReadOnlyPerson) to update the values of that person.
    
    We do not need to retrieve the person in the list to be updated, to
    update the list accordingly.
    
    Let’s simplify the logic by setting the updated Person object in place
    of the person to be updated.

[33mcommit 895430f4c9434c980cf6ed148e0ad36e37c5c5c2[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:07:29 2017 +0800

    Person: Remove resetData(ReadOnlyPerson)
    
    This method is now unused after the previous commit.
    
    Let’s remove it.

[33mcommit db3eeaba34c043c5465a07f94962ecb6ecd181e4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 19:56:24 2017 +0800

    UniquePersonList: Rename updatePerson(...) to setPerson(...)
    
    Following the previous commit, the target person is no longer updated.
    Rather, the editedPerson is being set in the target person's place.
    
    Let's rename updatePerson(ReadOnlyPerson, ReadOnlyPerson) to
    setPerson(ReadOnlyPerson, ReadOnlyPerson) to better reflect what it is
    doing.

[33mcommit a5cb7900ae929a81f59f15f81a9c22eebfe8543e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:06:32 2017 +0800

    UniquePersonList: Simplify logic of updatePerson(...)
    
    This method retrieves the person in the list to be updated, and calls
    Person#resetData(ReadOnlyPerson) to update the values of that person.
    
    We do not need to retrieve the person in the list to be updated, to
    update the list accordingly.
    
    Let’s simplify the logic by setting the updated Person object in place
    of the person to be updated.

[33mcommit f357f1a7af8deca20aad8e26ed77c63a2b106991[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:24:02 2017 +0800

    EditCommand: Update executeUndoableCommand() return value
    
    executeUndoableCommand() returns the String value of the person to be
    edited.
    
    This is wrong as it should return the String value of the edited
    person instead. The tests still pass as the person to be edited
    is not replaced; it's values are updated to reflect the edited values.
    
    As part of simplifying the logic of
    UniquePersonList#updatePerson(ReadOnlyPerson, ReadOnlyPerson), let's
    update executeUndoableCommand() to return the String value of the
    edited person.

[33mcommit a60d16b3cd2ed483c03c813028b6967f888d1c6b[m
Merge: e38f1550 bfa08bd0
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 16:11:46 2017 +0800

    [#559] Clean up GUI tests related classes (#617)
    
    GUI tests related classes are plagued with many issues. For example,
    GuiRobot's access modifiers are wrong, and AddressBookGuiTest is doing
    more than it ought to do (a violation of Single Responsibility
    Principle).
    
    Let's fix them.

[33mcommit bfa08bd0fcd4e4800899d62a8c72ec423cf3f29d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 18:29:18 2017 +0800

    PersonListPanelHandle: Update return type of getHandleToSelectedCard()
    
    getHandleToSelectedCard() is a test method that returns an
    Optional<PersonCardHandle>. If no card is selected, it returns an
    Optional#empty().
    
    Since it is a test method, we expect callers to only call it when a card
    is selected. As such, we do not need to account for the case when no
    cards are selected.
    
    Let’s update the return type of getHandleToSelectedCard() to
    PersonCardHandle.

[33mcommit 928eeef74a8fea097d9c2822f08e34d666fdfb6b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 18:24:03 2017 +0800

    PersonListPanelHandle: Add isAnyCardSelected()
    
    To check whether a card is selected, the caller has to call
    PersonListPanelHandle#getHandleToSelectedCard()#isPresent().
    
    This is not as intuitive as creating a method that returns true if a
    card is selected.
    
    Let’s add isAnyCardSelected() which returns true if a card is selected,
    and let’s update callers to call this method instead.

[33mcommit 910b15a57605b6ec69d208d1c9c592914489eb89[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 18:13:04 2017 +0800

    PersonListPanelHandle: Remove unused method

[33mcommit d9cf8b226403db374c60fb6956077e6f10d6be4a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 18:11:50 2017 +0800

    EventsUtil: Update method names

[33mcommit 3c6ac6deb5126cf5144eae2679faa7282c7dcef2[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 18:08:24 2017 +0800

    AddressBookGuiTest: Move raise(BaseEvent) to EventsUtil
    
    AddressBookGuiTest is a super class that sets up the test environment
    for subclasses.
    
    There is no need for it to concern itself with helper methods used by
    the test classes (a violation of Single Responsibility Principle).
    
    Let’s move raise(BaseEvent) to EventsUtil instead.

[33mcommit 81fc057bcc9b895956d3999a845dfa601944f0eb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:58:31 2017 +0800

    AddressBookGuiTest: Move assertResultMessage(String) to GuiTestAssert
    
    AddressBookGuiTest is a super class that sets up the test environment
    for subclasses.
    
    There is no need for it to concern itself with test verification methods
    (a violation of Single Responsibility Principle).
    
    Let’s move assertResultMessage(String) to GuiTestAssert instead.

[33mcommit 1619f955c2b13cb9f3399e301d9c809f881e90a7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:49:29 2017 +0800

    AddressBookGuiTest: Move assertListSize(int) to GuiTestAssert
    
    AddressBookGuiTest is a super class that sets up the test environment
    for subclasses.
    
    There is no need for it to concern itself with test verification methods
    (a violation of Single Responsibility Principle).
    
    Let’s move assertListSize(int) to GuiTestAssert instead.

[33mcommit c3ed55ac23aa095f0a4176daaf9949d3a7c302b6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 17:44:35 2017 +0800

    GuiRobot: Update visibility modifiers of constants
    
    The visibility modifiers of these constants are public.
    
    There is no need for these constants to be public as no other classes
    are using them.
    
    Let’s update the visibility modifiers of these constants to be private.

[33mcommit e38f155068e730ce2690c33b8a7e45d9f8209870[m
Merge: e2b5e35d 78aaac49
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 15:56:38 2017 +0800

    [#604] Upgrade Checkstyle to version 8.1 (#614)

[33mcommit 78aaac494729844d8bf23fc7f13f92d0dc6b377d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 10:13:11 2017 +0800

    Upgrade Checkstyle to version 8.1
    
    We are using an older version of Checkstyle version (v. 7.2).

[33mcommit e2b5e35dd67a58c099630e4e35bb068ffb567c5b[m
Merge: 816f07f9 4492ae12
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Aug 7 15:40:21 2017 +0800

    [#602] Fix tests failure (#613)
    
    Some tests fail in headful mode because of race conditions and state
    leaks. They did not fail in headless mode as the order in which the
    tests run are different in headful mode and headless mode.
    
    Let's fix them.

[33mcommit 4492ae125b86b3364b93e0b2330852cd647ea591[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 4 13:07:50 2017 +0800

    BrowserPanelHandle: Post WebViewLoadedEvent when WebView is done loading
    
    There is no way to determine whether the BrowserPanel’s WebView is done
    loading.
    
    This may lead to scenarios whereby BrowserPanelTest tries to verify
    the expectedUrl before the WebView is done loading, which causes the
    test to fail.
    
    Let’s teach BrowserPanelHandle to post WebViewLoadedEvent when the
    BrowserPanel’s WebView is done loading, so that BrowserPanelTest can
    catch the event and do the test verification afterwards.

[33mcommit 0a2533dc038d37a98eaac2b9eebbc948f37b604f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 4 12:25:11 2017 +0800

    BrowserPanel: Update string constants
    
    The existing URL that we use will eventually be morphed into another URL
    by Google after a short while.
    
    This complicates testing as we do not know when will the morphing of URL
    be done, thus if we do the test verification after the URL is morphed,
    the test will fail.
    
    Let’s update the string constants to be equal to the morphed URL.

[33mcommit 587fe5296d66ea237c10ccf842ef7021144d5691[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 4 11:38:54 2017 +0800

    TypicalPersons: Update static constant to getter method
    
    TypicalPersons#TYPICAL_PERSONS is a static constant.
    
    This implies that there may be a possible state leak between tests if
    TypicalPersons#TYPICAL_PERSONS is updated.
    
    Let’s update this constant to become TypicalPersons#getTypicalPersons()
    instead which returns a new array every time this method is called.

[33mcommit f6c7ee9c68900dacbeccd5a8b393519ea22dd313[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 10:40:33 2017 +0800

    Nest EventsCollector in EventsCollectorRule
    
    EventsCollector exists as a separate class even though it is only used
    by EventsCollectorRule.
    
    EventsCollector is a test utility class which should only be used in
    context of EventsCollectorRule to ensure that EventsCollector objects
    are properly torn down after they are initialised.
    
    Let’s refactor EventsCollector by nesting it in EventsCollectorRule.

[33mcommit 9615a54d6bc5178bafa7d151d1268d14c8ab0181[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 4 11:28:32 2017 +0800

    Update tests to use EventsCollectorRule
    
    Tests that use EventsCollector are not calling
    EventsCenter#clearSubscribers().
    
    This causes a state leak between tests
    as EventsCenter is a static class, and the EventsCollector object
    registers itself to the EventsCenter to receive events.
    
    Let’s update tests to use EventsCollectorRule which properly tears down
    the EventsCollector object, thus preventing state leak between tests.

[33mcommit 62de04adea4d5dcd2d065923156ca02b5a24a9a4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sat Aug 5 10:33:58 2017 +0800

    Add EventsCollectorRule
    
    Tests that use EventsCollector are not calling
    EventsCenter#clearSubscribers().
    
    This causes a state leak between tests
    as EventsCenter is a static class, and the EventsCollector object
    registers itself to the EventsCenter to receive events.
    
    Let’s add EventsCollectorRule which properly tears down the
    EventsCollector object, thus preventing state leak between tests.

[33mcommit c9eeff4cda88ff513d3e56763640bd15d0622db9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Aug 4 10:48:50 2017 +0800

    AddressBookGuiTest: Shift EventsCenter#clearSubscribers()
    
    EventsCenter#clearSubscribers() is called in the method annotated by
    @Before.
    
    This can cause bugs as the last test class that inherits from
    AddressBookGuiTest may subscribe to EventsCenter in the last test case,
    but it will not be cleared, thereby causing a state leak.
    
    Let’s shift this method call to the method annotated by @After instead.

[33mcommit 816f07f953e8855556176cc0b6f9ca8a13a7b0f7[m
Merge: 20847316 454a421d
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Aug 3 16:35:41 2017 +0800

    [#605] Dev Guide: Improve instructions for setting up checkstyle-IDEA (#612)

[33mcommit 454a421dd004ae16453481b4039dc03ff20bfa8d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Aug 3 13:35:38 2017 +0800

    Developer Guide: Add troubleshooting section for Checkstyle-IDEA

[33mcommit eec2a5f5a0d428898cd47bab748a6f557ea27651[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Aug 3 13:30:39 2017 +0800

    Developer Guide: Clarify instructions for setting up Checkstyle-IDEA

[33mcommit 20847316c28404bc225534061f766b0ada38667f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Aug 3 13:37:56 2017 +0800

    [#588] Developer Guide: Remove author names from sections (#611)
    
    Future CS2103 does not require each section to be written by a specific
    student. We can remove the author names that are given at the start of
    each section.
    
    Let's update the Developer Guide to remove these names.

[33mcommit 9fd50dff59a535ec89c185d52839b90d3a6e0aad[m
Merge: 4a756c13 2ddcdbd0
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Aug 2 18:35:15 2017 +0800

    [#551] Convert DeleteCommandTest to a system test (#555)
    
    Tests in the 'guitests' packages, such as DeleteCommandTest, merely
    concern themselves with the relevant GUI components and the model, and
    do not verify other parts of the application (e.g. storage, status bar,
    ...).
    
    They do not fully qualify as system tests, and we already have
    unit tests and integration tests for commands, thus making them
    redundant. Also, without any system tests in the codebase, we are unable
    to demonstrate to the students how one should be written.
    
    Let's convert DeleteCommandTest to a system test.

[33mcommit 4a756c13ee2f5d795362ca9dc8a6f22d08570d6d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Aug 2 18:25:19 2017 +0800

    [#579] [#581] Developer Guide: Add 'Getting Started in Writing Code' section (#586)
    
    New developers may feel overwhelmed by the codebase when opening the
    project for the first time.
    
    Let's add a 'Getting Started in Writing Code' section to provide new
    developers some exercises, which are crafted specifically such that they
    will have a chance to touch with all individual components of the
    application.

[33mcommit b5d8fe3dc9851e14163c87d4d9fa58f7d8b37547[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Aug 2 12:36:05 2017 +0800

    johndoe.adoc: tweak formatting
    
    * add section 'justification for the feature'
    * minor cosmetic tweaks

[33mcommit 2ddcdbd0365de13e9ba0741962bd7b32c853a913[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 14:11:37 2017 +0800

    Convert DeleteCommandTest to DeleteCommandSystemTest
    
    DeleteCommandTest is a GUI test.
    
    We already have unit tests for the DeleteCommand and GUI components.
    
    Let's convert DeleteCommandTest to a system test
    DeleteCommandSystemTest.

[33mcommit 422b4bcd699222e38f095dc509af892f03738415[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jul 30 10:22:00 2017 +0800

    TestUtil: Add model utility methods
    
    Some test cases require obtaining the middle/last index of the model
    given. Some test cases also need to get the person inside the model at a
    specific index.
    
    Let's add such utility methods to TestUtil.

[33mcommit 8a2f9631e6d660dc3a639bf627b9838e64d80fbd[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 16:41:17 2017 +0800

    Add AppStateAsserts
    
    System tests require verification of the application state.
    
    Let's add AppStateAsserts that contains such verification methods.

[33mcommit ba49111ae9355307b6e915f583deedf61aad87eb[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 19 14:28:58 2017 +0800

    Add AddressBookSystemTest
    
    All system tests will require a TestApp together with test classes and
    objects such as TypicalPersons and injected Clocks.
    
    AddressBookGuiTest does not have methods required for us to verify the
    non-GUI portion of the program.
    
    Let's add AddressBookSystemTest.

[33mcommit e3b40a6a2116c1ae8a60eb319a59710ced9e2ad6[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jul 30 18:47:23 2017 +0800

    PersonListPanelHandle: Add remember*() and is*Changed()
    
    When executing a certain command, the selected person in the person list
    should not change (such as when the command execution fails).
    
    Let's add remember*() and is*Changed() methods to allow us to
    verify that the selection was not changed.

[33mcommit 4fe218bc925ba14f3878adb8ac5b281156c5feab[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jul 30 18:41:21 2017 +0800

    PersonListPanelHandle: Add select(int)
    
    Some tests require us to select a particular person in the person list
    panel.
    
    Let's add PersonListPanelHandle#select(int) to help us do so.

[33mcommit b1ffbc722a83b10301dd3df07897da2dd2d06f64[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 14:09:26 2017 +0800

    StatusBarFooterHandle: Add remember*() and is*Changed()
    
    When executing a certain command, the content of the status bar might
    not change. For example, if the command failed, the 'Last Time Updated'
    and 'File Save Location' should still remain the same.
    
    Let's add remember*() and is*Changed() methods to allow us to
    verify that their content were not modified.

[33mcommit 990ba7e61c65d3222a034c2b1c0549f417b6eff9[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 14:08:04 2017 +0800

    BrowserPanelHandle: Add rememberUrl() and isUrlChanged()
    
    When executing certain commands (such as adding a person), the browser
    panel is not supposed to change.
    
    Let's add rememberUrl() and isUrlChanged() to allow us to verify
    whether the content has been changed after doing a certain test.

[33mcommit 87e69f3b441d7c08ae97a53222481f121d4a237e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 14:57:45 2017 +0800

    TestApp: Add getModel()
    
    Our system tests need to verify that the model of the application is
    updated correctly.
    
    Let's add TestApp#getModel().

[33mcommit 6e7494310a384265efaa3b467cf26bac248f6be2[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 13 11:00:24 2017 +0800

    TestApp: Add getStorageSaveLocation()
    
    Our system test needs to verify that the save location of the file is
    still the same.
    
    Let's add getStorageSaveLocation() that returns the current save
    location.

[33mcommit 60c1d1231c2f2ef11eaff44bbc8ff1ebcf09e512[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 13 10:58:17 2017 +0800

    TestApp: Add readStorageAddressBook()
    
    Our system test needs to test that the storage file content is updated
    correctly.
    
    Let's add readStorageAddressBook() helper method, that returns the
    address book created from the content of the storage file, to allow us
    to verify that the file is correct.

[33mcommit ba03f395e2c084ba0c5c22c08cba2dbfa3756f19[m
Merge: cb030aba 38c90ab7
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Aug 2 08:25:48 2017 +0800

    Move johnDoe.adoc into 'team' sub-folder (#607)

[33mcommit 38c90ab7ff96946b4fe8dfa2f235989a09478a31[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Aug 1 22:48:10 2017 +0800

    johndoe.adoc: Move inside 'team' sub-folder
    
    johndoe.adoc resides on the 'docs' folder.
    
    It should be moved inside a 'team' sub-folder to avoid cluttering it
    with the important documents.
    
    Let's move 'johndoe.adoc' from 'docs' to 'docs/team'.

[33mcommit 6c3fc91bf62a4893087d540267c5b7afe498f986[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Aug 1 22:45:14 2017 +0800

    docs: Manually specify stylesDir
    
    stylesDir is specified as a relative path in build.gradle.
    
    If the documents are in a sub-folder, the relative path would be wrong,
    as the styles directory is now one level above.
    
    As a step towards moving johndoe.adoc into a subfolder, let's manually
    specify stylesDir inside all documents.

[33mcommit cb030aba0d1ed9ab7b2cc5c94def0caf4c5123df[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Tue Aug 1 22:12:54 2017 +0800

    Move johndoe.adoc to the docs folder (#606)

[33mcommit 06d9ac3c662a40ccfcf5366a95e1d96cbbd0cb00[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Mon Jul 31 20:52:01 2017 +0800

    [#584] Add a sample portfolio page (#589)
    
    In the future semester, students will be asked to create a portfolio
    page describing their contribution to the project.
    
    To serve as an example, let's add a sample portfolio page.

[33mcommit c27ad03b38f5c1680a70ab9f46c99e861818e446[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sun Jul 30 19:41:17 2017 +0800

    [#582] Developer Guide: Explain undo and redo mechanism (#587)
    
    CS2103 students will need to explain their design decisions made in
    their project. The write up needs to be done inside the Developer Guide.
    
    There are no such examples in the Developer Guide for the students to
    follow.
    
    Let's add a section to explain undo and redo, to show the students how
    it should be done.

[33mcommit f5ca8d64b5053641d7183c65a893df43e713b45f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 26 07:58:01 2017 +0800

    [#580] AboutUs page: rename profile photo files (#585)
    
    CS2103 requirements state that profile photos filenames need to be of
    the format 'github_id_in_lower_case.png' (e.g. damithc.png).
    
    Let's rename the photos to follow the format, and modify AboutUs.adoc
    to point to the new filenames.

[33mcommit 08224fb1885e38f8255ef742e0cf91071ada3f8e[m
Merge: 8ff14105 a671bf2f
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 26 07:56:20 2017 +0800

    [#459] Clean up Handle classes (#573)

[33mcommit 8ff14105f989eed05dc63f113d1ad23b355516d0[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Wed Jul 26 07:53:43 2017 +0800

    [#379] Test folder: add missing API header comments (#518)

[33mcommit a671bf2f1ffd9b1be575235e4bc0c5789c49674a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 13:37:09 2017 +0800

    Tidy up header comments for *Handle classes

[33mcommit f273c67603e807ea8fb17e0119952775242f0acc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 11:43:59 2017 +0800

    StageHandle#close(): Check that window is closed
    
    There is no post-condition in StageHandle#close() to check that the
    window is closed.
    
    Let's add a post-condition in StageHandle#close() to verify that.

[33mcommit c0a35764bb67336b487798774460c6831a9b4dac[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 16:20:54 2017 +0800

    Clean up PersonCardHandle
    
    PersonCardHandle contains unused methods. It should also store the tags
    as a list of labels, so that all accessor of tags can return these
    labels, rather than manually obtaining each of them through the tag
    container.
    
    Let's clean up PersonCardHandle.

[33mcommit badd33a52ff0ddc4da3bbeb4ac9ecb032a380cb5[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:09:41 2017 +0800

    AddressBookGuiTest: Remove assertCardMatchesPerson(...)
    
    AddressBookGuiTest#assertCardMatchesPerson(...) calls
    GuiTestAssert#assertCardDisplaysPerson(...).
    
    This method is redundant as it does not abstract out any lower level
    concepts.
    
    Let's remove assertCardMatchesPerson(...), and replace all calls to
    GuiTestAssert#assertCardDisplaysPerson(...) instead.

[33mcommit 9fcf590e5e56bacf70e5881358bced026cc30901[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:05:08 2017 +0800

    PersonCardHandle: Remove isSamePerson(...)
    
    PersonCardHandle#isSamePerson(ReadOnlyPerson) compares the card with a
    person.
    
    GuiTestAssert#assertCardDisplaysPerson(...) have the exact same
    functionality.
    
    Let's remove PersonCardHandle#isSamePerson(...), and replace all usages
    with GuiTestAssert#assertCardDisplaysPerson(...).

[33mcommit 56137502e40fc58a495195254e82261df3f507e8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:50:33 2017 +0800

    PersonListPanelHandle: Change isListMatching() to assertListMatching()
    
    PersonListPanelHandle#isListMatching() returns false when it founds an
    unmatched card, and returns true otherwise.
    
    We are deprecating PersonCardHandle#isSamePerson() in favor of
    GuiTestAssert#assertCardDisplaysPerson(...), which does not return a
    boolean.
    
    Let's change isListMatching() to assertListMatching(), that does not
    return a boolean, but rather asserts that each card indeed matches.
    
    As it is now an assertion method, we could no longer put this method
    into PersonListPanelHandle, which should only be concerned with querying
    and commanding the GUI. Let's move assertListMatching() to
    GuiTestAssert.
    
    We would need a way to expose the scrolling functionality for our
    GuiTestAssert#assertListMatching(). Let's also add
    PersonListPanelHandle#scrollTo(int).

[33mcommit 688378ca77646a51af48893c023958e38724d8e4[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:00:09 2017 +0800

    PersonListPanelTest: Extract assertCardDisplaysPerson()
    
    Tests need to compare the card and person.
    
    Let's extract out assertCardDisplaysPerson(), and put it in
    GuiTestAssert instead.

[33mcommit 7f0105934fb6e9c9e22a2d3ec933dca1950cea72[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 14:14:50 2017 +0800

    PersonCardHandle: Remove equals() method
    
    PersonCardHandle#equals() compares whether both of the cards have the
    same details.
    
    Tests should never utilize the equals() method of person card handles to
    compare cards. Instead, they should use get*() methods to compare the
    contents of the card.
    
    Let's remove PersonCardHandle#equals().

[33mcommit 92e04a995f1a5d8a0c43cf64ecd0aa20211e9932[m
Merge: 5d60018c 69e404a9
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:39:30 2017 +0800

    [#421] Migrate from Eclipse to IntelliJ (#427)
    
    We are migrating our IDE from Eclipse to IntelliJ.
    
    Let's remove files used by Eclipse, and update our instructions in our
    documentation to be IntelliJ-oriented.

[33mcommit 5d60018c460e856c4b56cbff5822d4b1ca809f17[m
Merge: 57bf3965 1f443384
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 15:38:32 2017 +0800

    [#390] Implement UndoCommand and RedoCommand (#547)
    
    User is unable to undo and redo the actions he / she has made.
    
    User is unable to recover from mistakes. For example, if the user
    accidentally enters the clear command, he / she will lose all the data
    in AddressBook, and there are no ways to retrieve the data back.
    
    Let's implement UndoCommand and RedoCommand so that the user can
    recover from his / her mistakes.

[33mcommit 1f4433849895051c126204ddad4c3f43504c977f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 19 20:59:34 2017 +0800

    Update User Guide and Developer Guide

[33mcommit d59c5dbbec0bf909a46b7539fa32e6efa6f0c90e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 16:40:43 2017 +0800

    Teach AddressBookParser to parse UndoCommand and RedoCommand
    
    LogicManager passes the user input to AddressBookParser for parsing.
    
    AddressBookParser does not know how to parse “undo” and “redo”.
    
    To finish implementing the undo and redo features, let’s teach
    AddressBookParser to parse UndoCommand and RedoCommand.

[33mcommit 19715700d917f66c9b037ed23888138247cbe22f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 13 15:53:15 2017 +0800

    Add UndoCommand & RedoCommand

[33mcommit 60b533686699eaf59496d060a252b240dcbb8bbb[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 7 16:38:41 2017 +0800

    Command#setData(...): Add UndoRedoStack parameter
    
    setData takes in Model and CommandHistory, which stores the list of user input.
    
    Let's teach setData(Model, CommandHistory) to take in UndoRedoStack
    as a parameter as well. This removes the need to parse the user input
    again, making it easier to implement the undo and redo commands.
    
    Let’s change setData(Model, CommandHistory) to
    setData(Model, CommandHistory, UndoRedoStack).

[33mcommit 81ea6b54680a81a96f1472608d71f989add0ffd4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 7 16:32:15 2017 +0800

    LogicManager: Add field UndoRedoStack
    
    LogicManager is in charge of managing the execution of the user input.
    
    Let’s add UndoRedoStack as a field in LogicManager, so that it can
    manage the adding of user input into the stack.

[33mcommit b77644134e519c27db2aeb393b3cd73460b340f0[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 13 15:46:48 2017 +0800

    Add UndoRedoStack
    
    There are no data structure to store UndoableCommands to be undone
    and redone.
    
    This implies that we are unable to undo and redo previously executed
    commands.
    
    As part of implementing the undo and redo features, let’s add
    UndoRedoStack to store previously executed commands.

[33mcommit 6ab4a04a0beabd3e1e5aea114ffbdce4759e1c16[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu May 4 11:53:53 2017 +0800

    Add UndoableCommand and update some commands to extend it
    
    All commands extend Command.
    
    This disallows us from identifying which commands can be reversed.
    
    Let’s create UndoableCommand and update the relevant commands to
    extend it.
    
    Also, we implemented the Template Pattern for UndoableCommand#execute()
    which ensures that every command that extends UndoableCommand will
    automatically call saveAddressBookSnapshot() when execute() is called
    to facilitate the undo redo mechanism. Classes that inherits from
    UndoableCommand will have to override executeUndoableCommand() instead
    of execute() as a result.

[33mcommit 57bf39652d1cc16e8f37f1dc39f15de18208f277[m
Merge: 08c681ac 09f9afe6
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 13:56:21 2017 +0800

    [#563] PersonListPanelHandle: No longer returns PersonCard (#567)
    
    PersonListPanelHandle is a test helper class that encapsulates
    PersonListPanel. It has methods that return PersonCard.
    
    Tests should not directly interact with Node objects such as PersonCard
    as it breaks the encapsulation of the PersonCard object.
    
    Let's teach existing methods in PersonListPanelHandle to return
    PersonCardHandle instead of PersonCard.

[33mcommit 09f9afe69c0739776512b9d0b274e33159fdc176[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 20 13:36:25 2017 +0800

    PersonListPanelHandle: Remove getCard(int)
    
    getCard(int) returns a PersonCard.
    
    Tests should not directly interact with Node objects such as PersonCard
    as it breaks the encapsulation of the PersonCard object.
    
    Let's remove getCard(int).

[33mcommit 04a675ffa421de7792897d8152e43aad819ec45e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 20 13:35:38 2017 +0800

    PersonListPanelHandle: Update getSelectedCard()
    
    getSelectedCard() returns an Optional<PersonCard>.
    
    Tests should not directly interact with Node objects such as PersonCard
    as it breaks the encapsulation of the PersonCard object.
    
    Let's rename getSelectedCard() to getHandleToSelectedCard(), and update
    it to return PersonCardHandle instead of PersonCard.

[33mcommit f1141e4254c4d18bb8b4468496a4c565c4c4a4b7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 20 11:10:05 2017 +0800

    PersonListPanelHandle: Update getPersonCardHandle(int) access modifier
    
    getPersonCardHandle(int) is private.
    
    Other classes are unable to call this method.
    
    As part of preparing to remove getCard(int) in future commits, let’s
    update getPersonCardHandle(int) access modifier to public.

[33mcommit 08c681acf239d3fe4b47b2f4f9c6ef62695ca891[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 21 11:17:27 2017 +0800

    gitignore: Ignore 'out/' build directory (#576)
    
    When running the application/tests in IntelliJ, a new 'out/' directory
    will be created.
    
    The 'out/' directory contains build files. They should not be included
    in the repository.
    
    Let's update .gitignore to ignore the 'out/' build directory.

[33mcommit 69e404a9185dc51fe9f10ba0eb978a00a80e6e60[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri May 19 09:42:38 2017 +0800

    Remove Eclipse files
    
    We are migrating our IDEs from Eclipse to IntelliJ. Eclipse files are
    not used in IntelliJ.
    
    Let's remove them.

[33mcommit 5c33a5c989e08b41c21402b9073f399db4222a86[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu May 18 10:02:40 2017 +0800

    Update DeveloperGuide.adoc to use IntelliJ

[33mcommit e3bdbaec9a1b531d1cc01a9ff6c16592b7833df5[m
Merge: 48d5acc7 d975164a
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 20 14:49:16 2017 +0800

    [#569] TypicalPersons: Make all methods and fields static (#574)
    
    TypicalPersons is a utility class that creates preset Persons for tests
    to use. Some methods and fields are non-static.
    
    This makes it troublesome for test classes to access these preset
    Persons as they have to create a TypicalPersons object prior to
    accessing the Person objects.
    
    Let's make all methods and fields in TypicalPersons to be static.

[33mcommit d975164a0286ecf736e205edf4dd59369ffa14e6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 20 13:10:55 2017 +0800

    TypicalPersons: Add private constructor
    
    TypicalPersons is a utility class that is not meant to be constructed.
    
    Without a private constructor, other classes may accidentally create
    instances of TypicalPersons.
    
    Let’s add a private constructor to prevent other classes from creating
    instances of TypicalPersons.

[33mcommit 1b97737703af291734edfb0af2f1b307aad6eb39[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 19 11:23:56 2017 +0800

    TypicalPersons: Remove getTypicalPersons()
    
    getTypicalPersons() return an array of ReadOnlyPersons.
    
    This method is simple enough and can be converted to a static field.
    
    Let’s remove getTypicalPersons() and convert it to be a static field.

[33mcommit f9c27cf45b32ebb5bb2dcfb2cc04516dcc0e5360[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 19 11:14:27 2017 +0800

    TypicalPersons: Make all methods and fields static
    
    TypicalPersons is a utility class that creates preset Persons for tests
    to use. Some methods and fields are non-static.
    
    This makes it troublesome for test classes to access these preset
    Persons as they have to create a TypicalPersons object prior to
    accessing the Person objects.
    
    Let's make all methods and fields in TypicalPersons to be static. Also,
    to prevent state leaks between tests, let’s change these methods and
    fields to return ReadOnlyPerson instead of Person, as ReadOnlyPerson
    cannot be modified.

[33mcommit 48d5acc77c3a4611e63b8bcc934d2d206ba0028e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 20 10:51:08 2017 +0800

    [#459] Remove unnecessary pauses after pressing keys with GuiRobot (#572)
    
    guiRobot#type(...) and guiRobot#push(...) internally pauses after
    pressing the given keys.
    
    We do not need to call guiRobot#pauseForHuman() ourselves after calling
    these two key pressing methods.
    
    Let's remove the redundant guiRobot#pauseForHuman() calls.

[33mcommit 801bae82eea7e2e6c514a5b80dae0d91538ea82c[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 20 08:16:41 2017 +0800

    [#561] XCommandTest: Move showFirstPersonOnly(Model) (#566)
    
    This method is implemented multiple times in XCommandTest.
    
    This violates the DRY principle.
    
    Let’s move it into CommandTestUtil.

[33mcommit 43ebcaf21d56b7fbcaacd9b1c83115c3bf8f8146[m
Merge: a0b042fa e068ad1a
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 19 09:34:01 2017 +0800

    [#295] Clean up TestUtil (#560)
    
    TestUtil is a class with low cohesion as it contains methods that
    are unrelated to each other.
    
    This breaks the Single Responsibility Principle, whereby each class
    is supposed to have only one responsibility.
    
    Let's split up the methods into different classes to improve the
    cohesion of TestUtil. Also, let's do a general cleanup of TestUtil
    by removing unused methods etc.

[33mcommit e068ad1a2f2849a053fc9dfd98f53e534a4519a3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 11:15:01 2017 +0800

    TestUtil: Move assertThrows(...) to Assert
    
    TestUtil contains assertThrows(...) and
    getFilePathInSandboxFolder(String). Both methods are doing things that
    are unrelated to each other.
    
    This makes TestUtil a class with low cohesion.
    
    Let’s create a new class Assert and move assertThrows(...) into it.

[33mcommit 8e89baa73572ebe03ef336ba52eda33cdbb962e3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 10:06:09 2017 +0800

    TestUtil: update header comments for getFilePathInSandboxFolder(String)
    
    The header comments are missing descriptions for both the parameter and
    return value.
    
    This makes the @param and @return tags useless.
    
    Let’s remove these tags and update the header comments to make it more
    descriptive.

[33mcommit 286991add3fe9026070a692c6e98ca50814263d3[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 09:06:30 2017 +0800

    TestUtil: Update access modifier of SANDBOX_FOLDER
    
    Constant SANDBOX_FOLDER has public access modifier even though it is
    only called within the class.
    
    This unnecessarily exposes it to other classes.
    
    Let’s change its access modifier to private.

[33mcommit 4fd44ae9c6b9535dade808b8ff80478ad09bd088[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 08:58:27 2017 +0800

    TestUtil: Extract createDataFileWithData(T, String) to TestApp
    
    createDataFileWithData(T, String) is only used by TestApp.
    
    It’s unnecessary to place this method in TestUtil.
    
    Let’s extract it to be a private method in TestApp.

[33mcommit b4a85a2092c808a392041332ab4da3dd2d0d5140[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 08:26:08 2017 +0800

    TestUtil: Inline compareCardAndPerson(...)
    
    TestUtil#compareCardAndPerson(PersonCardHandle, ReadOnlyPerson) only
    calls a method inside PersonCardHandle.
    
    Callers of this method can simply call PersonCardHandle's method
    directly on its own.
    
    Let's inline TestUtil#compareCardAndPerson.

[33mcommit febbaece598492c54445a579d72a9629c0245d2d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 08:23:28 2017 +0800

    TestUtil: Remove addPersonsToList(...)
    
    addPersonsToList(Person[], Person...) adds Person objects in the array
    by converting it into an ArrayList for the addition to happen, followed
    by converting it back into an array. This method is only called by
    AddCommandTest.
    
    These conversions make the code unnecessarily verbose.
    
    Let’s teach AddCommandTest to use an ArrayList<Person> instead of
    Person[]. This results in addPersonsToList(Person[], Person...) to be
    unused, let’s remove it.

[33mcommit 38d9783502e452754791edd8d06a03388663df11[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 08:16:46 2017 +0800

    TestUtil: Remove removePersonFromList(...)
    
    removePersonFromList(Person[], Index) removes a Person in the array
    by converting it into an ArrayList for the removal to happen, followed
    by converting it back into an array. This method is only called by
    DeleteCommandTest.
    
    These conversions make the code unnecessarily verbose.
    
    Let’s teach DeleteCommandTest to use an ArrayList<Person> instead of
    Person[]. This results in removePersonsFromList(Person[], Index) to be
    unused, let’s remove it.

[33mcommit f60bfca366e5edefbd3338d1d08c6ccda60c21fc[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 07:46:42 2017 +0800

    TestUtil: Remove generateSamplePersonData()
    
    generateSamplePersonData() returns a List of 8 Person objects. This
    method is only called once by XmlUtilTest, and only the first person
    is used.
    
    There is no need to create 8 Person objects when only the first person
    is used. Furthermore, TypicalPersons also provides a List of Person
    objects for purposes of testing, thus this portion of code in TestUtil
    is duplicate code as well.
    
    Let’s simplify XmlUtilTest to use a PersonBuilder to create a Person
    object. This causes generateSamplePersonData to be unused, let’s remove
    it.

[33mcommit da8d7d41ff02ba6b2d3e5405460291db1b70d458[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 07:18:56 2017 +0800

    TestUtil: Remove asList(T[])
    
    asList(T[]) converts an array into a List.
    
    This method is unnecessary as there’s a method in Java library
    Arrays.asList(T[]) which achieves the same effect.
    
    Let’s update callers to call Arrays.asList(T[]) instead and remove
    asList(T[]).

[33mcommit d532bbcbd55c287d472853cd60ff2091c123cd85[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 17 07:16:14 2017 +0800

    TestUtil: Remove unused methods
    
    These methods are unused.
    
    Let’s remove them.

[33mcommit a0b042faf7dcde247eccf9bd547e98002bf7e720[m
Merge: 466a0a1c 0f8c7e33
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 18 16:43:25 2017 +0800

    [#172] Add unit tests for GUI (#536)
    
    Our GUI tests in the codebase are system tests.
    
    There are no unit tests for each GUI component in the application.
    
    Let's add unit test for GUI components.

[33mcommit 0f8c7e337426cdd4017d5b634b2c454eceb8dc0a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 18 12:57:46 2017 +0800

    PersonCardTest: Add test case for subsequent changes to Person
    
    It is possible that the card might not have been binded properly, but
    only initialized with the starting values of Person.
    
    The test case for any subsequent changes to Person is not tested.
    
    Let's add the test case for subsequent changes to Person.

[33mcommit e19ba374d0d40d824f813c618388b875b3b32fde[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 10 15:35:04 2017 +0800

    WebViewUtil: Extract out getLoadedUrl()
    
    Both HelpWindowHandle and BrowserPanelHandle queries the URL of the web
    view.
    
    The logic can be refactored out into a helper method.
    
    Let's extract WebViewUtil#getLoadedUrl().

[33mcommit 2f17bcc283b0f8e2ace077e5af776df281ee1c1f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 3 10:08:58 2017 +0800

    Add HelpWindowTest
    
    We need to ensure that the HelpWindow is loading the correct file.
    
    Such test does not exist.
    
    Let's add HelpWindowTest.
    
    HelpWindow#USERGUIDE_FILE_PATH needs to be public so that the test is
    able to verify that the URL accessed is correct. Let's change the access
    modifier for HelpWindow#USERGUIDE_FILE_PATH.

[33mcommit 63a124e8c69b8ae29fa27e0fc875397c48d92ba4[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 3 10:08:33 2017 +0800

    HelpWindowHandle: Add getLoadedUrl()
    
    HelpWindow GUI tests need to verify that the WebView has been given
    the correct URL to load the help webpage from.
    
    There is no way to do such verification through HelpWindowHandle.
    
    Let's add HelpWindowHandle#getLoadedUrl() to allow such verification.

[33mcommit dd74ff2123e1be9eb13d37ff14eaff3b0cbf64f5[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 3 09:24:37 2017 +0800

    Add PersonListPanelTest
    
    PersonListPanel is tested in system tests.
    
    A separate unit test for PersonListPanel does not exist.
    
    Let's add PersonListPanelTest.
    
    We need a way to verify that the selected index of PersonListPanel is
    correct. Let's also add PersonListPanelHandle#getSelectedIndex().

[33mcommit 27c9d2231d683c417bb5a7f6b204165e09ed15cf[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Jul 1 10:34:05 2017 +0800

    Add StatusBarFooterTest
    
    StatusBarFooter is tested in system tests.
    
    A separate unit test for StatusBarFooter does not exist.
    
    Let's add StatusBarFooterTest.
    
    The "system" test in guitests/StatusBarFooterTest will no longer be
    necessary when we have system tests for each individual commands, which
    will test the code paths for the status bar accordingly. Let's also add
    a TODO comment as a reminder for us to remove
    guitests/StatusBarFooterTest when the system tests are complete.

[33mcommit 803e7d3afdec7ba37be13ada43f117f3146397db[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Jul 1 10:33:58 2017 +0800

    Add ResultDisplayTest
    
    ResultDisplay is tested in system tests.
    
    A separate unit test for ResultDisplay does not exist.
    
    Let's add ResultDisplayTest.

[33mcommit 756161179487e04aa85d6114f20333fe47c503d8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Jul 1 10:33:52 2017 +0800

    Add CommandBoxTest
    
    CommandBox is tested in system tests.
    
    A separate unit test for CommandBox does not exist.
    
    Let's add CommandBoxTest.

[33mcommit c76c12b66b83dbe4ef4a0d26e874777fd3c33d44[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 11:08:17 2017 +0800

    GuiUnitTest: Add getChildNode()
    
    Some test require finding the nodes owned by a component. For example,
    the TextField of the CommandBox is stored inside a StackPane, so we have
    to look for it.
    
    Let's add GuiUnitTest#getChildNode() to help us facilitate querying.

[33mcommit f02f14cd4c9cded4a08f16de2bfda7bcace8740e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 6 09:24:23 2017 +0800

    Add BrowserPanelTest
    
    BrowserPanel is tested in system tests.
    
    A separate unit test for BrowserPanel does not exist.
    
    Let's add BrowserPanelTest.

[33mcommit d0ea397d1197e0d22426f32c015ca94eda58ffd8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 6 09:23:37 2017 +0800

    BrowserPanel: Extract out magic string
    
    BrowserPanel navigates to a fixed URL when a person is being displayed.
    
    We should extract the URL to a constant.
    
    Let's extract the URL out as a constant named
    BrowserPanel#GOOGLE_SEARCH_URL_PREFIX.

[33mcommit 1a9bd3349e734d010392b21839fca9ea1a0fb828[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Jul 1 10:33:40 2017 +0800

    BrowserPanelHandle: Add getLoadedUrl()
    
    BrowserPanel GUI tests need to verify that the WebView has been given
    the correct URL to load the webpage from.
    
    There is no way to do such verification through BrowserPanelHandle.
    
    Let's add BrowserPanelHandle#getLoadedUrl() to allow such verification.

[33mcommit a5bca556a769b0bcacf3f30bfc62705a49ed5ac5[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 10:56:08 2017 +0800

    PersonCardTest#assertCardDisplay(...): Change parameter order
    
    The parameter type order for PersonCardTest#assertCardDisplay(int,
    ReadOnlyPerson) is different from PersonCard#PersonCard(ReadOnlyPerson,
    int).
    
    It would be nice if they are symmetric to each other.
    
    Let's change the parameter order of
    PersonCardTest#assertCardDisplay(...) to match
    PersonCard#PersonCard(...).

[33mcommit db2e46824bf5e4725c8b144a3a5af9043a563ab6[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 10:47:25 2017 +0800

    PersonCardTest: Call pauseForHuman() in assertCardDisplay(...)
    
    All callers of assertCardDisplay(...) will subsequently call
    pauseForHuman() to allow testers to verify the values of the card.
    
    We can call pauseForHuman() inside assertCardDisplay() instead.
    
    Let's move the calls for pauseForHuman() inside assertCardDisplay(...)
    so that it pauses immediately after the card is created.

[33mcommit 2a2e89042fa17d54c57cca63b0486d4d222f5edc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 17 13:44:43 2017 +0800

    Add EventsUtil
    
    Some GUI components react to events.
    
    We can create a helper method in GuiUnitTest to allow GUI unit tests to
    raise appropriate events.
    
    Let's add GuiUnitTest#post(BaseEvent).

[33mcommit 31de8caba1a080038645d3c5daf818c238a1764d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 11:02:13 2017 +0800

    PersonCardTest: Extract guiRobot and uiPartRule to new GuiUnitTest class
    
    PersonCardTest uses a GuiRobot and UiPartRule.
    
    GuiRobot and UiPartRule will be used frequently by future GUI unit
    tests.
    
    As a step towards implementing GUI unit tests for other components,
    let's extract guiRobot and uiPartRule to a new superclass GuiUnitTest,
    and let's make PersonCardTest inherit from it.

[33mcommit 466a0a1cb2af8d2c14e9d8a40bf9b8d1a2deb836[m
Merge: 84d6516f baa5988d
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 18 11:25:06 2017 +0800

    [#292] Make ReadOnlyPerson observable (#552)
    
    ReadOnlyPerson is not observable. Whenever a ReadOnlyPerson is added
    or updated, PersonListPanel creates a new PersonCard and initialises
    it with the ReadOnlyPerson's details.
    
    This is inefficient as multiple cards have to be deleted and
    re-created whenever a ReadOnlyPerson is updated. Also, there is an
    additional call to set the ReadOnlyPerson in the list of PersonCards
    to update the view i.e updating the ReadOnlyPerson does not
    automatically update the view.
    
    Let's update ReadOnlyPerson to be observable and teach PersonCard
    to bind its view to the ReadOnlyPerson objects so that whenever they
    are updated, the view is automatically updated. As such, the cards
    do not need to be deleted and re-created.

[33mcommit baa5988d5bcf9c0d95d3aca56e90ef19e42206e8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 14 09:42:40 2017 +0800

    PersonListPanelHandle: Update methods
    
    PersonListPanel now has a ListView that stores PersonCard instead of
    ReadOnlyPerson.
    
    PersonListPanelHandle however, still has methods that return
    ReadOnlyPerson instead of PersonCards.
    
    Let’s update these methods accordingly.
    
    Also, as a result of changing these methods, SelectCommandTest will
    be verifying the equality of the PersonCards instead of the
    ReadOnlyPersons. Let’s implement equals(Object) for PersonCard.

[33mcommit 6f8c65369437191e86cb3484308dc39a48e47dd8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 12 12:35:44 2017 +0800

    UniquePersonList: Remove unnecessary method call
    
    UniquePersonList calls internalList#set(int, ReadOnlyPerson) when it
    updates a person in the list. Previously, this call was necessary to
    update the UI, as PersonCard was not observing the Person object that
    it is displaying.
    
    This method call is no longer needed as PersonCard is now observing
    the Person object that it is displaying.
    
    Let’s remove the method call along with its comments.

[33mcommit 75cbfa3804ff365646e903514282d9313da4300e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 12 12:35:16 2017 +0800

    PersonListPanel: Update ListView<ReadOnlyPerson> to ListView<PersonCard>
    
    PersonListPanel displays a list of ReadOnlyPersons stored in its ListView.
    
    This can result in cases whereby the PersonListPanel contains a
    particular person, however there is no corresponding PersonCard
    containing the person.
    
    Since Person is now observable, let’s update ListView<ReadOnlyPerson>
    to ListView<PersonCard>, with each PersonCard observing the Person
    that the card is displaying.

[33mcommit 23fd697b2f4ea2de1054cdee6bda7050d26891c9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 13 10:43:08 2017 +0800

    Import EasyBind
    
    JavaFX does not provide API for binding the model and view easily.
    
    We need to create an additional ObservableList to map the FilteredList
    in the ModelManager. Also, we have to ensure that the ObservableList
    is updated whenever the FilteredList is updated.
    
    Let’s import EasyBind which abstracts the implementation, allowing
    us to bind view and model with less work.

[33mcommit b1c5e49fad734f8b07c87178c3b3108fc6c8ee50[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 12 12:35:32 2017 +0800

    Teach Person and ReadOnlyPerson to be observable
    
    Person is not using *Property for its fields.
    
    This makes Person unobservable.
    
    Let’s replace Person’s fields to use ObjectProperty, and let’s teach
    ReadOnlyPerson to return the ObjectProperty fields.

[33mcommit 84d6516fb88cceba44c55050d8cbd2a905f53374[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Tue Jul 18 09:29:27 2017 +0800

    [#557] ParserUtil: Update header comments on Optional usage (#558)
    
    ParserUtil#parseX(Optional) methods currently take in an Optional.
    
    This violates the usage of Java Optional. However, the methods in
    concern receive {@code Optional} return values from other methods as
    parameters and return {@code Optional} values based on whether the
    parameters were present. Therefore, it is redundant to unwrap the
    initial {@code Optional} before passing to {@code ParserUtil} as a
    parameter and then re-wrap it into an {@code Optional} return value
    inside {@code ParserUtil} methods.
    
    Let's add header comments in ParserUtil to make it clear to future
    developers why ParserUtil takes in Optional even though it violates
    Java's convention.

[33mcommit 52ec52609b8a17da202dd3fa8f9813b7820b5d3f[m
Merge: 24c4da05 cbc65717
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 17 09:30:10 2017 +0800

    [#545] Clean XCommandParserTests (#546)
    
    XCommandParserTests use their own assertParseSuccess(...) and
    assertParseFailure(...) to verify the test results.
    
    This violates the DRY principle as there are repeated code in these
    methods across the test classes.
    
    Let's extract these methods into a CommandParserTestUtil class and
    teach these test classes to use the methods in
    CommandParserTestUtil.

[33mcommit cbc6571757d250295849622286c1d8bf7cf8d621[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 7 09:00:57 2017 +0800

    Update DeveloperGuide

[33mcommit 5266cc7c22509a53b75f9020876d9fd3b9638e79[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:16:48 2017 +0800

    SelectCommandParserTest: Use helper methods in CommandParserTestUtil
    
    Following the addition of CommandParserTestUtil, there is no need for
    SelectCommandParserTest to have its own code for verifying the
    correctness of the test cases.
    
    Let's teach SelectCommandParserTest to use the helper methods from
    CommandParserTestUtil instead.

[33mcommit b29fd96927d9d5bcaa2e130c495ddcace6d4a2a6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:16:33 2017 +0800

    FindCommandParserTest: Use helper methods in CommandParserTestUtil
    
    Following the addition of CommandParserTestUtil, there is no need for
    FindCommandParserTest to have its own code for verifying the correctness
    of the test cases.
    
    Let's teach FindCommandParserTest to use the helper methods from
    CommandParserTestUtil instead.

[33mcommit 6eb4e3f700b49d44b13a6dfc1c295863a4149db9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:16:19 2017 +0800

    EditCommandParserTest: Use helper methods in CommandParserTestUtil
    
    EditCommandParserTest uses its own version of assertParseSuccess(...)
    and assertParseFailure(...)
    
    Following the addition of CommandParserTestUtil, there is no need for
    EditCommandParserTest to have its own code for verifying the correctness
    of the test cases.
    
    Let's teach EditCommandParserTest to use the helper methods from
    CommandParserTestUtil instead.

[33mcommit a7c50d6d951f8b7279cebe9b5f5c2907c7d4ae20[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:16:09 2017 +0800

    DeleteCommandParserTest: Use helper methods in CommandParserTestUtil
    
    Following the addition of CommandParserTestUtil, there is no need for
    DeleteCommandParserTest to have its own code for verifying the
    correctness of the test cases.
    
    Let's teach DeleteCommandParserTest to use the helper methods from
    CommandParserTestUtil instead.

[33mcommit 4fe4e2b7cc88803bb59343ff972c05a4332e6941[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:15:53 2017 +0800

    AddCommandParserTest: Use helper methods in CommandParserTestUtil
    
    AddCommandParserTest uses its own version of assertParseSuccess(...)
    and assertParseFailure(...)
    
    Following the addition of CommandParserTestUtil, there is no need for
    AddCommandParserTest to have its own code for verifying the correctness
    of the test cases.
    
    Let's teach AddCommandParserTest to use the helper methods from
    CommandParserTestUtil instead.

[33mcommit 7e4d4ec1391519d95e116d30ada2f37f836c8a04[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 09:12:19 2017 +0800

    Add CommandParserTestUtil
    
    XCommandParserTests have similar helper methods to verify the success of
    each test case.
    
    Following the DRY principle, we should extract these helper methods into
    a common class.
    
    Let’s create a CommandParserTestUtil, which is a utility class that
    has these helper methods for verifying the success of
    XCommandParserTests.

[33mcommit 402bcb01ec40c9c18435012b45997f89dd826842[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jul 6 08:43:06 2017 +0800

    Add Parser interface
    
    XCommandParsers have common behaviour. However, they are not linked
    by inheritance or interface.
    
    This makes the code look unstructured.
    
    Let’s add Parser as an interface, with the XCommandParsers
    implementing it.

[33mcommit 054aa63ad898cd5e37267f6dff49c3cf6751b36a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 7 08:48:13 2017 +0800

    Rename Parser to AddressBookParser
    
    Parser parses the commands specific to AddressBook application.
    
    It should have a more specific name: AddressBookParser as it is doing
    a specific task.
    
    Let’s rename Parser to a more specific name.

[33mcommit 24c4da0578cbde77f409b5bb36b8903e90615dc9[m
Merge: 56e874d0 5b3b6c0c
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 17 08:24:12 2017 +0800

    [#334] Model filtering not easily extensible (#431)
    
    ModelManager#updateFilteredPersonList(Set<String>) searches for name
    using a set of keywords. To add more filtering methods, the model source
    code must be edited directly.
    
    Using Java Predicates allow us to be more flexible by allowing the
    caller to search for fields other than name and different combinations
    of fields.
    
    Let's replace ModelManager#updateFilteredPersonList(Set<String>) with
    ModelManager#updateFilteredPersonList(Predicate<ReadOnlyPerson>) to
    allow more flexible searches.

[33mcommit 5b3b6c0c9ac501138399f6279603efc9d6fb0112[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Mon Jun 12 16:09:04 2017 +0800

    Add NameContainsKeywordsPredicateTest

[33mcommit dbf6c85d2c7800ba566d2e512df825d7a39c3831[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Mon Jun 12 16:07:58 2017 +0800

    Use predicates in ModelManager
    
    ModelManager#updateFilteredPersonList(Set<String>) searches for name
    using a set of keywords. To add more filtering methods, the model source
    code must be edited directly.
    
    Using Java Predicates allow us to be more flexible by allowing the
    caller to search for fields other than name and different combinations
    of fields.
    
    Let's replace ModelManager#updateFilteredPersonList(Set<String>) with
    ModelManager#updateFilteredPersonList(Predicate<ReadOnlyPerson>) to
    allow more flexible searches.

[33mcommit 56e874d0e7b4cab2b87d573782df3b34f9bafc3c[m
Merge: 6422e8f3 c140840f
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 14 08:07:46 2017 +0800

    [#459] Add NodeHandle and WindowHandle (#522)
    
    GuiHandle is a messy class. It has no proper encapsulation as it can
    access all nodes in the scene graph. It is also not very cohesive, as
    it handles interactions with text fields, labels and windows.
    
    Let's create NodeHandle, which points to a Node in the scene graph
    (usually used to point to a compoent), and StageHandle, which points
    to a Stage in the scene graph. NodeHandle and StageHandle will be the
    substitute to GuiHandle. Let's also port all our component handles to
    use the new NodeHandle and StageHandle.

[33mcommit 6422e8f3048fc63e9e46a8d7937eb3bc433e74ad[m
Merge: ddc6b98a 75061301
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 13 08:16:53 2017 +0800

    [#545] Clean XCommandTests (#544)
    
    XCommandTests use their own assertCommandSuccess(...) and
    assertCommandFailure(...) to verify the test results.
    
    As CommandTestUtil have similar methods, XCommandTests should use
    them instead.
    
    Let's teach them to use the common methods located in
    CommandTestUtil.

[33mcommit ddc6b98a69d841de003549cb4029dcf8bd199797[m
Merge: 3e71299f 0ea22876
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 13 08:12:48 2017 +0800

    [#539] Clean up UniqueTagList (#540)
    
    UniqueTagList has 2 overloaded methods to set tags:
    setTags(UniqueTagList) and setTags(Collection).
    
    Person#setTags(Set) constructs a UniqueTagList from the set of tags
    passed in. It then calls UniqueTagList#setTags(UniqueTagList),
    which then calls setAll(UniqueTagList#internalList).
    
    This makes the construction of UniqueTagList unnecessary as no
    other properties of UniqueTagList are required here.
    
    Also, AddressBook#resetData(ReadOnlyAddressBook) calls
    setTags(Collection), followed by a catch clause asserting that
    AddressBooks should not have duplicate tags.
    
    This makes the code unnecessarily long as there is a try-catch
    block, where the catch block does not do anything significant.
    
    Let’s replace these methods with UniqueTagList#setTags(Set<Tag>).
    Person#setTags(Set<Tag>) will not need to construct a UniqueTagList,
    and AddressBook#resetData(ReadOnlyAddressBook) will not need to
    catch the DuplicateTagException as there are no duplicate tags in a
    Set.

[33mcommit c140840f60ee8372271713d386c45d989e1721ec[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 16:18:10 2017 +0800

    Delete GuiHandle
    
    GuiHandle has been superseded by NodeHandle and StageHandle. It is no
    longer in use.
    
    Let's remove it.

[33mcommit 0c0a8549c695bf38b540cf7fd47332adb3055372[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 16:02:49 2017 +0800

    Port StatusBarFooterHandle to NodeHandle
    
    StatusBarFooterHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port StatusBarFooterHandle to use NodeHandle.

[33mcommit fce31fb84c1374e164cc5a56744cb1d5dc2b2c99[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 16:01:50 2017 +0800

    Port ResultDisplayHandle to NodeHandle
    
    ResultDisplayHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port ResultDisplayHandle to use NodeHandle.

[33mcommit 8f9c34211321faae3426ccbc6868273f32478100[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 11 16:06:17 2017 +0800

    PersonListPanelHandle: Remove unnecessary pre-condition check
    
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson) checks that
    the ReadOnlyPerson is in the list, and throws PersonNotFoundException if
    it isn't.
    
    We can safely assume that if the card is not found, then the person
    cannot exist in the list. The converse is also true (i.e. if the person
    is not in the list, then the corresponding card cannot exist).
    
    Let's simplify the logic of
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson) by removing
    the check of ReadOnlyPerson in the list, as it is unnecessary.

[33mcommit cb798b83108a028d1c33067cbcb2a1ff1d369199[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 16:00:31 2017 +0800

    Port PersonListPanelHandle to NodeHandle
    
    PersonListPanelHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port PersonListPanelHandle to use NodeHandle.

[33mcommit 5381e1c39d439db564e11fbbe0b8ac649f2ad9a7[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:58:54 2017 +0800

    Port PersonCardHandle to NodeHandle
    
    PersonCardHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port PersonCardHandle to use NodeHandle.

[33mcommit ff8c52591882336a12e025bde09798130c101909[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:58:06 2017 +0800

    Port MainMenuHandle to NodeHandle
    
    MainMenuHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port MainMenuHandle to use NodeHandle.
    
    The main menu does not have an ID for us to obtain its node. Let's
    modify the .fxml file to add one.

[33mcommit cbcfc41b07396c5826d3ec8f2059b539df8283bc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:56:46 2017 +0800

    Port HelpWindowHandle to StageHandle
    
    HelpWindowHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port HelpWindowHandle to use StageHandle.

[33mcommit 52290b8f96c161cb41c91597d9f497a63979114f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:54:25 2017 +0800

    Port CommandBoxHandle to NodeHandle
    
    CommandBoxHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port CommandBoxHandle to use NodeHandle.

[33mcommit b630578991d919fda0bb2aa6ab76364eb3c72bfc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:52:40 2017 +0800

    Port BrowserPanelHandle to NodeHandle
    
    BrowserPanelHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port BrowserPanelHandle to use NodeHandle.

[33mcommit 644ab7039db7bedc138bee3464ef3b4f31f823f2[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:50:28 2017 +0800

    Port AlertDialogHandle to StageHandle
    
    AlertDialogHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port AlertDialogHandle to use StageHandle.

[33mcommit 36b55346269f1ce09ccce1d698295ab4c0b739e9[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:36:27 2017 +0800

    Port MainWindowHandle to StageHandle
    
    MainWindowHandle inherits from GuiHandle.
    
    GuiHandle is deprecated.
    
    Let's port MainWindowHandle to use StageHandle instead.

[33mcommit 3295e1f3117431afa759dbcf1748f1f88b61754e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 30 09:58:23 2017 +0800

    Add GuiRobot#getStage(String)
    
    FxRobot#window(String) allows us to get the Window with the
    corresponding window title.
    
    Some tests require access to the Stage rather than the Window, in order
    to get its focus or close the window.
    
    Let's add GuiRobot#getStage(String).
    
    As it is possible that none of the stages matches the name given, let's
    also add StageNotFoundException, so that the tests stop with an
    appropriate error message.

[33mcommit 750613018859af887a9ff8e2c069196b2a1a87f8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:18:11 2017 +0800

    EditCommandTest: Static import CommandTestUtil methods
    
    EditCommandTest uses CommandTestUtil#assertCommandSuccess(...) and
    CommandTestUtil#assertCommandFailure(...)
    
    As both methods are called multiple times in the class, we should
    static import them to make the code look shorter.
    
    Let’s static import these 2 methods.

[33mcommit 09cc03796fd832cab610ca3678bb499c740fe483[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:18:03 2017 +0800

    DeleteCommandTest: Static import CommandTestUtil methods
    
    DeleteCommandTest uses CommandTestUtil#assertCommandSuccess(...) and
    CommandTestUtil#assertCommandFailure(...)
    
    As both methods are called multiple times in the class, we should
    static import them to make the code look shorter.
    
    Let’s static import these 2 methods.

[33mcommit 59fa74867986e3a2889d7ec761b1e92475f5d46e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:24:39 2017 +0800

    ListCommandTest: Use CommandTestUtil#assertCommandSuccess(...)
    
    ListCommandTest uses its assertCommandSuccess(...) to verify the
    test results.
    
    As CommandTestUtil has a similar method, ListCommandTest should use
    it instead.
    
    Let’s remove ListCommandTest#assertCommandSuccess(...) and teach
    ListCommand to use CommandTestUtil#assertCommandSuccess(...) instead.

[33mcommit aa8aeaf02f795944936f63ddcf0b1b18f07e6082[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:15:33 2017 +0800

    ClearCommandTest: Use CommandTestUtil#assertCommandSuccess(...)
    
    ClearCommandTest uses its assertCommandSuccess(...) to verify the
    test results.
    
    As CommandTestUtil has a similar method, ClearCommandTest should use
    it instead.
    
    Let’s remove ClearCommandTest#assertCommandSuccess(...) and teach
    ClearCommand to use CommandTestUtil#assertCommandSuccess(...) instead.

[33mcommit 9c6d89080e6671aee5e151659b473730eacc1616[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:11:57 2017 +0800

    AddCommandIntegrationTest: Use CommandTestUtil methods
    
    CommandTestUtil#assertCommandSuccess(...) and
    CommandTestUtil#assertCommandFailure(...) verify the content of the
    model. Therefore, these methods are suitable for doing verification
    in integration tests.
    
    AddCommandIntegrationTest does not use these methods for verification in
    its tests. The logic is inlined instead. This violates the DRY principle.
    
    Let's teach AddCommandIntegrationTest to use
    CommandTestUtil#assertCommandSuccess(...) and
    CommandTestUtil#assertCommandFailure(...).

[33mcommit 2b7b8567ca4f0c285e0c93a87128839e2aef3a05[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 30 16:31:24 2017 +0800

    AddressBookGuiTest: Add runCommand()
    
    It is common for tests to execute commands through the CommandBox.
    
    We can provide a helper method in AddressBookGuiTest.
    
    Let's add AddressBookGuiTest#runCommand().

[33mcommit 77395ccbb8b64256fdcf905e39fc0958f95f511a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 4 09:22:37 2017 +0800

    AddressBookGuiTest#setup(): Deter initialization of MainWindowHandle
    
    MainWindowHandle is initialized while the stage is being set up.
    
    Future implementation of MainWindowHandle might require accessing the
    nodes. The nodes will not be available while the stage is being set up.
    
    Let's deter the initialization of MainWindowHandle to after the stage is
    set up.

[33mcommit 2ea6f055e2aa0cb767e68b75accbc9c93b7b033d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 10:31:32 2017 +0800

    AddressBookGuiTest: Remove component handles
    
    AddressBookGuiTest manually obtains the handles of each component from
    MainGuiHandle and stores them in its own variables.
    
    This breaks the encapsulation as MainGuiHandle should be the owner of
    the handles.
    
    Let's add getter methods to AddressBookGuiTest which will obtain the
    handles from MainGuiHandle, rather than assigning the handles into
    our own variables.

[33mcommit 2d8edc5668ef0b6a965479add06d379989c5efe9[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 15:27:31 2017 +0800

    Add NodeHandle and StageHandle
    
    GuiHandle is a messy class. It has no proper encapsulation as it can
    access all nodes in the scene graph. It is also not very cohesive, as
    it handles interactions with text fields, labels and stages.
    
    There should be a handle class that deals with nodes only, and another
    handle class that deals with stages only.
    
    Let's create NodeHandle, which will concern itself with remembering the
    root node of the component, and is able to obtain sub-nodes within the
    component. It will also contain interaction methods that are applicable
    to all components.
    
    Let's also create StageHandle, which points to a Stage in the scene
    graph. It will also be capable of stage interactions, and obtaining
    the nodes within the Stage to allow us to create NodeHandles.
    
    As a result of creating NodeHandle and StageHandle, GuiHandle should no
    longer be used by any new classes. Let's deprecate GuiHandle, and update
    the header comments to mention about the new classes.
    
    NodeHandle#getChildNode(String) and StageHandle#getChildNode(String) may
    fail to find the nodes if the name given is invalid. Let's also create a
    NodeNotFoundException to allow us to warn the callers of such cases.

[33mcommit fa654d9636adc51cdc3e62afb166e91220de4862[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 14:05:42 2017 +0800

    Combine both CommandTestUtil classes
    
    There are two classes named CommandTestUtil, located in different
    packages.
    
    There is no need for these classes to be separate as they both have the
    same responsibilities.
    
    Let’s merge these classes.

[33mcommit 0ea22876167526b4058942a368fa0c8d080c5033[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 09:12:41 2017 +0800

    UniqueTagList: Remove setTags(Collection<Tag>)
    
    This method is now unused.
    
    Let’s remove it.

[33mcommit ffe36a8c0e6abda38149f8b013bddd7c8b18b324[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 09:12:14 2017 +0800

    AddressBook: Modify setTags(Collection<Tag>) to setTags(Set<Tag>)
    
    AddressBook#resetData(ReadOnlyAddressBook) calls setTags(Collection),
    followed by a catch clause asserting that AddressBooks should not
    have duplicate tags.
    
    This makes the code unnecessarily long as there is a try-catch
    block, where the catch block does not do anything significant.
    
    Let's modify setTags(Collection) to take in a Set instead. This
    method will call UniqueTagList#setTags(Set), which does not throw
    DuplicateTagException. Thus, this eliminates the need to catch it
    in AddressBook#setTags(Set), thus removing the unnecessary assertion.

[33mcommit aa05ef5e084e0e99e4df40bec8dd06f25ef3d036[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 08:56:29 2017 +0800

    UniqueTagList: Modify setTags(UniqueTagList) to setTags(Set<Tag>)
    
    Person#setTags(Set) constructs a UniqueTagList from the set of tags
    passed in. It then calls UniqueTagList#setTags(UniqueTagList),
    which then calls setAll(UniqueTagList#internalList).
    
    This makes the construction of UniqueTagList unnecessary as no
    other properties of UniqueTagList are required here.
    
    Let’s teach UniqueTagList#setTags(UniqueTagList) to take in Set
    instead, to avoid the unnecessary construction of UniqueTagList.

[33mcommit 3e71299fdd455bdd42ba4768bcc26fbddbd82cfc[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Jul 7 08:23:05 2017 +0800

    UniqueTagList: Remove unused constructors (#542)
    
    UniqueTagList(String...), UniqueTagList(Tag...),
    UniqueTagList(Collection<Tag>), UniqueTagList(UniqueTagList) are unused.
    
    Let’s remove them.

[33mcommit 89539897229b581a5a575a0f53a4b47c96976e2f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jul 7 08:21:15 2017 +0800

    DeveloperGuide.adoc: Add step for updating version number in MainApp (#543)
    
    When doing a new release, MainApp#VERSION needs to be updated to match
    the release version number.
    
    This step is not reflected in DeveloperGuide.adoc's release devops
    procedure.
    
    Let's add the step for updating the version number in MainApp.

[33mcommit b30adb414090e31783a294f8790bbc3bfebc6a83[m
Merge: a817b56d b404fa40
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jul 6 09:52:24 2017 +0800

    Allow up and down buttons to get previous and next input respectively (#491)
    
    The user is only able to see their previously typed commands through
    the history command.
    
    The user may need to access their previously typed commands quickly in
    order to fix a previous typo, or to reuse the input for another
    variation.
    
    Let's add a function that allows users to retrieve the previous and
    next input in the history by pressing the up and down arrow keys
    respectively.

[33mcommit a817b56dff2a2061049ba053b67093c1c8bcafe3[m[33m ([m[1;31morigin/addressbook-level3[m[33m)[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 09:09:06 2017 +0800

    [#534] HistoryCommand: Returns previous commands in reverse chronological order (#537)
    
    The HistoryCommand returns the previous commands in chronological
    order.
    
    This goes against the intuition that history ought to be viewed in
    reverse chronological order. We are expecting that the user will want
    to see what he has typed most recently, just like how Google Chrome
    History works.
    
    Let’s update HistoryCommand to return previous commands in reverse
    chronological order.

[33mcommit 152302ea562807f782fb865528776093592e326a[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jul 5 09:02:14 2017 +0800

    [#249] MainApp: Update version to 1.4 (#541)
    
    The version is 1.0.
    
    This number is outdated, as we have recently released version 1.4 of the
    app.
    
    Let’s update the version to reflect the new version of the recent
    release.

[33mcommit 05b883ebfd21e2c3cd8d209ead3dc19852f9c5d2[m
Merge: 5421bbf7 e03ce4f1
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 08:18:14 2017 +0800

    Add ParserTest #538

[33mcommit 5421bbf7dc83c29c2ad1c7e949291e9c8e41557f[m
Merge: 4e727c4a 540862f6
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 08:16:42 2017 +0800

    [#327] Clean LogicManagerTest (#495)
    
    LogicManagerTest contains unit tests for XCommand and XCommandParser.
    
    LogicManagerTest should only be testing the code flow in LogicManager.
    Unit tests for XCommand and XCommandParser should instead be written
    in XCommandTest and XCommandParserTest respectively.
    
    As these unit tests for XCommand and XCommandParser have been written
    already, let's delete the tests that are not relevant to
    LogicManagerTest.

[33mcommit 4e727c4adf3c6802e4dd92319d4877ce097a9927[m
Merge: 877982f2 be4b7fbe
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 08:15:53 2017 +0800

    [#498] Shift event handling methods out of UiManager (#499)
    
    UiManager is catching events such as JumpToListRequestEvent which then
    calls methods to cause the PersonListPanel to scroll to the
    corresponding location.
    
    There is no need for a high-level component such as UiManager to catch
    these events. As such, the individual components that are handling
    these events ought to catch them instead.
    
    Let's shift the catching of events into the classes that are handling
    them.

[33mcommit 877982f2642e021b0e121c1eef7106f9d67ed27f[m
Merge: 47a1661c c2c9a65d
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 08:13:52 2017 +0800

    [#459] Clean up ErrorDialogGuiTest (#531)
    
    Let's
    
    - Extract out commonly used strings and objects as constants to avoid
      violating DRY principle.
    - Remove unnecessary declaration of runtime exception
      InterruptedException.
    - Create methods in AlertDialogHandle, allowing us to verify the contents
      of the error dialog box.
    - Inline AlertDialogHandle#isMatching(String, String), as it should be
      the responsibility of ErrorDialogGuiTest to verify the content.

[33mcommit 47a1661c2e2dfbe0e0c43b79b5ec0497dd30bde3[m
Merge: 89889b9a df5c210b
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jul 5 08:04:08 2017 +0800

    Add unit tests for PersonCard class (#260)
    
    The GUI tests are system tests, which would make use of the main
    application and create all of the GUI parts.
    
    There is no easy way to unit test the GUI parts without launching the
    entire application. Therefore, there are no unit tests for GUI parts.
    
    Let's create a testing architecture for testing individual GUI parts,
    and let's create PersonCard unit test as a demonstration of the testing
    architecture.

[33mcommit e03ce4f16937da11ff9269d447f66c955ecbc7b9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 27 10:36:47 2017 +0800

    Add ParserTest

[33mcommit 8dc5b6e49b781994f7309a83740a08af55cd18f5[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jul 4 11:37:15 2017 +0800

    PersonUtil: Update getPersonDetails(...) visibility modifier to public
    
    getPersonDetails(Person) visibility modifier is private.
    
    A future test will need this method (see next commit).
    
    Let’s change the visibility modifier to public.

[33mcommit b404fa406bb23173f7ce9abb1cc016d35aeab33c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 29 14:17:54 2017 +0800

    Update User Guide

[33mcommit 8af0d06c72c25b1868d2491bb7c8e239ec836266[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jul 4 09:44:35 2017 +0800

    CommandBoxTest: Update existing test case
    
    commandBox_handleKeyPress() no longer needs to create a local GuiRobot
    as the class already has a GuiRobot.
    
    Let’s remove the creation of the local GuiRobot in
    commandBox_handleKeyPress().

[33mcommit 5856b94e0c851d40fd0de5cb28593d400a96fd80[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 29 14:17:49 2017 +0800

    Allow up and down buttons to get previous and next input respectively
    
    The user is only able to see their previously typed commands through
    the history command.
    
    The user may need to access their previously typed commands quickly in
    order to fix a previous typo, or to reuse the input for another
    variation.
    
    Let's add a function that allows users to retrieve the previous and
    next input in the history by pressing the up and down arrow keys
    respectively.

[33mcommit 389b2a177a1a671e69daa8fbd2153b6ae07f130d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 29 14:17:10 2017 +0800

    Teach Logic component to return the user input history
    
    CommandBox has no way to access the user input history in Logic as
    CommandHistory’s visibility modifier is private.
    
    This makes it impossible for CommandBox to retrieve what the user
    has input previously.
    
    As a step towards allowing up and down buttons to get the previous and
    next input respectively, let’s teach the Logic component to return
    the user input history in CommandHistory.

[33mcommit 175017ddff5c23826d3d5cac9fe2fb1a92b1e8d1[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 21 14:12:11 2017 +0800

    Add ListElementPointer
    
    The native ListIterator’s cursor does not point to an element.
    Rather, it points in between elements. As a result, alternating
    calls of ListIterator#next() and ListIterator#previous() return
    the same element.
    
    This behaviour is not suitable for implementing the functionality
    of allowing up and down buttons to return the previous and next
    input respectively.
    
    As a step towards allowing up and down buttons to get previous and
    next input respectively, let’s create ListElementPointer.
    ListElementPointer has an index that works as a pointer to an element
    in the list. This allows us to iterate through the list while
    providing better code clarity.
    
    We have tried to create a class that wraps around ListIterator, but
    it does not work well because the cursor still does not point to an
    element.
    
    Also, we have tried to create a PeekingListIterator(an extension
    of PeekingIterator [1]), in which we use peekNext() and peekPrevious()
    to get the next and previous elements accordingly. One of the ways
    is to override the next() and previous() methods such that they do
    not return anything. However, this would violate the Iterator’s
    semantics. Another way is to not override both methods, and simply
    ignore the return values i.e we only access the next and previous
    elements by using peekNext() and peekPrevious() respectively.
    However, this isn’t intuitive to future developers who may wonder
    why we are ignoring the return values.
    
    [1]: http://google.github.io/guava/releases/21.0/api/docs/com/google/common/collect/PeekingIterator.html

[33mcommit be4b7fbe305992b86a4d3ab63bee6f65cbb7f770[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 19 16:01:41 2017 +0800

    Update BrowserPanel#loadPersonPage(…) visibility modifier to private
    
    This method is no longer called by classes other than itself.
    
    Let’s update its visibility modifier to private.

[33mcommit d725516f91920b256dcb7966b8b78ff37bb770f0[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 16 14:15:17 2017 +0800

    Move UiManager#handlePersonPanelSelectionChangedEvent(…) to BrowserPanel
    
    UiManager catches PersonPanelSelectionChangedEvent.
    
    PersonPanelSelectionChangedEvent is handled by BrowserPanel, so it
    should be caught by BrowserPanel instead.
    
    Let’s move this method to BrowserPanel.

[33mcommit 15cf4b14b80b91fc6d2259105cd88411849dbc33[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 19 16:01:31 2017 +0800

    Update PersonListPanel#scrollTo(int) visibility modifier to private
    
    This method is no longer called by classes other than itself.
    
    Let’s update its visibility modifier to private.

[33mcommit 481e58e9256c2ca5411d85e17d75c023d6316781[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 16 14:11:29 2017 +0800

    Move UiManager#handleJumpToListRequestEvent(…) to PersonListPanel
    
    UiManager catches JumpToListRequestEvent.
    
    JumpToListRequestEvent is handled by PersonListPanel, so it should be
    caught by PersonListPanel instead.
    
    Let’s move this method to PersonListPanel.

[33mcommit 2a4b7aa165fc368eb95ddc87e3e374530cf26902[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 16 14:09:44 2017 +0800

    Move UiManager#handleShowHelpEvent(…) to MainWindow
    
    UiManager catches ShowHelpRequestEvent.
    
    ShowHelpRequestEvent is handled by MainWindow, so it should be caught
    by MainWindow instead.
    
    Let’s move this method to MainWindow.

[33mcommit 89889b9a0bb1c75b945d41466adc4bec50f9a72e[m
Merge: 5a70b77b 1b6aa209
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jul 4 08:09:10 2017 +0800

    [#529] CommandBox: Reset style class upon keypress (#530)
    
    CommandBox is highlighted red when the user presses enter with an
    invalid command input in the CommandBox. The highlight is only reset
    when the user presses enter with a valid command input in the CommandBox.
    
    As the highlight is meant to inform the user that he / she has entered
    an invalid input, there is no need for the highlight to persist after
    the user has edited the text in CommandBox.
    
    Let's reset the highlight of the CommandBox the text in it is updated.

[33mcommit 1b6aa2091c5a48eaa1757ebc164d1099942b0c61[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 28 13:17:11 2017 +0800

    Rename setStyleToIndicateCommandSuccess() to setStyleToDefault()
    
    This method is no longer called when a command is successfully
    executed. Instead, it is called whenever the text field is edited.
    
    Let’s update the name of this method to reflect this behaviour.

[33mcommit c2c9a65d4e18575e68146563654cd6a10815efae[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 10:33:03 2017 +0800

    AlertDialogHandle: Refactor out isMatching(String, String)
    
    AlertDialogHandle#isMatching(String, String) checks whether the content
    of the dialog box matches the expected header and content messages.
    
    AlertDialogHandle should not be checking whether the content matches
    what was expected. That should be the job of the caller of the method,
    ErrorDialogGuiTest.
    
    Let's refactor out the logic of isMatching(String, String) to
    ErrorDialogGuiTest.

[33mcommit def162d6cd921df6386b0c2bbfa01631edb50b0c[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 10:25:57 2017 +0800

    AlertDialogHandle: Add getHeaderText() and getContentText()
    
    AlertDialogHandle#isMatching(String, String) checks whether the content
    of the dialog box matches the expected header and content messages.
    
    AlertDialogHandle should not be checking whether the content matches
    what was expected. That should be the job of the caller of the method,
    ErrorDialogGuiTest.
    
    As a step towards refactoring isMatching(String, String) out to
    ErrorDialogGuiTest, let's add getHeaderText() and getContentText() to
    allow users of the AlertDialogHandle to get the content of the dialog
    box.

[33mcommit dff17e041ce00696ee0423914808bde4393bc5e3[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 15:15:55 2017 +0800

    ErrorDialogGuiTest: Extract exception constant
    
    ErrorDialogGuiTest#showErrorDialogs() tests the handling of the dialog
    box launch event by using a custom made exception.
    
    The message of the exception can be taken from the Exception#toString()
    method. However, it is not used in the verification stage, which uses a
    hard-coded magic string instead.
    
    Let's extract the exception so that it can be reused to test that the
    proper error message is shown during the verification stage.

[33mcommit 8c6cdf03784e9c2cbee26ec8f0d512c8d85c05fd[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 16:20:09 2017 +0800

    ErrorDialogGuiTest: Remove InterruptedException declaration
    
    ErrorDialogGuiTest#showErrorDialogs() declares that it throws an
    InterruptedException.
    
    Runtime exceptions do not need to be declared.
    
    Let's remove the InterruptedException declaration in
    ErrorDialogGuiTest#showErrorDialogs().

[33mcommit 6c20a77fcda62a30f1431d9fc090cd10293eede6[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 28 09:48:32 2017 +0800

    CommandBox: Reset style class upon editing text
    
    CommandBox is highlighted red when the user presses enter with an
    invalid command input in the CommandBox. The highlight is only reset
    when the user presses enter with a valid command input in the CommandBox.
    
    As the highlight is meant to inform the user that he / she has entered
    an invalid input, there is no need for the highlight to persist after
    the user has edited the text in CommandBox.
    
    Let's reset the highlight of the CommandBox the text in it is updated.

[33mcommit 93b6d48be4a11a053482140e55ca6cd40013ca56[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 09:49:51 2017 +0800

    ErrorDialogGuiTest: Use string constants in UiManager
    
    ErrorDialogGuiTest#showErrorDialogs() verifies that the content of the
    error dialog box is correct. It uses magic strings to do the
    verification.
    
    We already have the appropriate string constants in UiManager.
    
    Let's teach ErrorDialogGuiTest to use the constants in UiManager.

[33mcommit 928591ce1dc41288bef8923258c7ac0d86c32322[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 09:47:33 2017 +0800

    UiManager: Extract out magic strings for file ops error dialog box
    
    When handling an exception for a file operation, UiManager uses magic
    strings to create the appropriate dialog box.
    
    Magic strings should not be used as it does not tell us which part of
    the dialog box is the text used for.
    
    Let's extract out the magic strings for file ops error dialog box into
    constants, and let's use these constants when creating our appropriate
    dialog box.

[33mcommit 5a70b77b2a4679666e12e36fe92dccc4f53f5310[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Mon Jul 3 07:46:27 2017 +0800

    [#532] CommandHistory: Change userInputHistory implementation to LinkedList (#533)
    
    CommandHistory only allows elements to be appended to it (which is
    backed by an ArrayList).
    
    Appending to an ArrayList takes amortised O(1) time. This will be
    worsened after #491 is merged, whereby CommandHistory only allows
    elements to be prepended to it, which takes O(n) time per insertion
    using an ArrayList. On the other hand, using a LinkedList takes a
    constant θ(1) time to append or prepend an element.
    
    Let's change the implementation of userInputHistory to use LinkedList
    instead.

[33mcommit a16043703f28e5b3dab95915f5c5e5bf4fdc5fc1[m
Merge: 0b45e7e5 9c5882a2
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 3 07:45:31 2017 +0800

    [#459] Clean up AddressbookGuiTest (#520)
    
    Let's clean up AddressBookGuiTest by:
    
    - Removing the while loop that waits for the stage to show in the
      setup() phase. FxToolkit#showStage() automatically blocks until
      the stage shows, so the wait is unnecessary.
    - Creating the guiRobot only in AddressBookGuiTest. It need not be
      recreated and can be shared by everyone.
    - Reducing the visibility of assertMatching(...) and raise(...) from
      public to private.
    - Renaming method parameters that does not conform to coding standards.
    - Renaming setupSpec() to setupOnce().
    - Changing cleanup()'s throws declaration from TimeoutException to
      Exception.
    - Renaming assertMatching(...) to assertCardMatchesPerson(...).

[33mcommit 0b45e7e5883f9da332e505f18940cbf607e16010[m
Merge: daddc428 9475a8ee
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jul 3 07:44:34 2017 +0800

    [#327] Add FindCommandTest and FindCommandParserTest (#513)

[33mcommit df5c210b274c29371218da83a997fd6ad7f572f1[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 16:29:04 2017 +0800

    build.gradle: Add 'seedu/address/ui/' as part of guiTests
    
    Our GUI unit tests are located in 'seedu/address/ui/'.
    
    This is not configured in our build.gradle, thus our GUI unit tests will
    not run when running the task 'guiTests'.
    
    Let's add 'seedu/address/ui/' as one of the test paths for 'guiTests'
    task, so that our GUI unit tests will run as well.

[33mcommit 3f9a4d2e21bd213e162dbb8faf8b176047d6f51b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jan 20 11:17:09 2017 +0800

    Add PersonCardTest
    
    The GUI tests are system tests.
    
    The individual GUIs do not have unit tests.
    
    Let's add a PersonCardTest to unit test the PersonCard GUI component.
    
    An alternative method of checking the labels would be to use
    reflections. However, reflections are not suitable for level 4
    learning objectives.

[33mcommit eb96cfb139f2ecbfd8e768dbd41936c7135463a0[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 15:49:14 2017 +0800

    Add UiPartRule
    
    To implement GUI unit tests, we need to isolate the GUI component.
    
    Let's create UiPartRule, which sets up an empty stage and provides us
    with a method to insert a single GUI component for testing.

[33mcommit 45bd11168de845fc639a20fc3d654db8a60ceaf7[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 15:48:38 2017 +0800

    Add StageRule
    
    To test GUI features related to JavaFx, we need to set up the stage
    during startup and do necessary cleanup.
    
    We can implement a StageRule to automate the process.
    
    Let's create StageRule that properly sets up and tears down a JavaFx
    stage when doing Gui test rules.

[33mcommit 9956957a750b1addad8e5c0e52717d6f95964cac[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu May 11 11:25:44 2017 +0800

    Add TestUtil#getTagsAsStringsList()
    
    Person returns tags as a UniqueTagList.
    
    We need to check that the tags shown in the PersonCard are correct.
    However, PersonCardHandle returns a list of Strings rather than
    UniqueTagList.
    
    Let's add TestUtil#getTagsAsStringsList() as a test utility method to
    convert UniqueTagList back into a set of Strings, to simplify
    comparison.

[33mcommit 9475a8eeaea9ebb7e5ce328df23fd1e47c327669[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue Jun 27 15:54:22 2017 +0800

    Add FindCommandParserTest

[33mcommit 75aa3d928e96924ee95ba8b2ef7471e1aee46375[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue Jun 27 15:54:13 2017 +0800

    FindCommand: Add equals(Object)

[33mcommit 665c58746415be8eea0debf1c9a2503bc7147308[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Mon Jun 12 16:09:17 2017 +0800

    Add FindCommandTest

[33mcommit 50f20b286e8b31215159e937c2da1cd927e1c6a6[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jan 24 13:14:58 2017 +0800

    Update PersonCardHandle to include ID label
    
    The handle for PersonCard does not provide a way to access the ID
    label.
    
    We need to access the ID in our PersonCard unit test.
    
    Let's add getId().

[33mcommit 9c5882a29c73e0e6f332dec386c265bb4b59153f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 10:50:43 2017 +0800

    AddressBookGuiTest#assertMatching(...): Rename method
    
    AddressBookGuiTest#assertMatching(...) checks that the card is
    associated with the person.
    
    The name of the method can be improved as it does not tell us what it is
    matching.
    
    Let's rename the method to assertCardMatchesPerson(...).

[33mcommit 0e3422e7949ccb1d54ed5cdf85385dfd5a573d0e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 10:42:44 2017 +0800

    AddressBookGuiTest#cleanup(): Change throws declaration to Exception
    
    AddressBookGuiTest#cleanup() throws a specific exception,
    TimeoutException.
    
    We can use a more generic exception just like the rest of the test
    methods in the code base.
    
    Let's change the throws declaration from TimeoutException to Exception.

[33mcommit bd39c0ae91bb72860a00fd8a77b36e8832017377[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 08:55:51 2017 +0800

    AddressBookGuiTest: Make assertMatching(...) and raise(...) protected
    
    AddressBookGuiTest#assertMatching(ReadOnlyPerson, PersonCardHandle) and
    AddressBookGuiTest#raise(BaseEvent) have their visibility modifier set
    to public.
    
    Only AddressBookGuiTest and classes that inherit from AddressBookGuiTest
    should use these methods.
    
    Let's change the visibility modifier of these two methods from public to
    protected.

[33mcommit 3c91ad3a6d63c57d2ac537cc4622e05917c0cb6d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 08:53:20 2017 +0800

    AddressBookGuiTest#setupSpec(): Rename to setupOnce()
    
    AddressBookGuiTest#setupSpec() is not a standard name for a
    'BeforeClass' test method.
    
    Let's rename setupSpec() to setupOnce().

[33mcommit 9987ec0aadd7eafeb2c80f1210fcce63384e0baf[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 08:51:41 2017 +0800

    AddressBookGuiTest#raise(BaseEvent): Rename parameter from e to event
    
    AddressBookGuiTest#raise(BaseEvent) takes in a parameter.
    
    The parameter's name is in short form. That is not allowed in the coding
    standards.
    
    Let's rename the parameter from e to event.

[33mcommit 679de5d6f488e76035d20dee69b6478904ba2621[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 11:20:29 2017 +0800

    AddressBookGuiTest: Add guiRobot
    
    Each GUI tests require the use of guiRobot to emulate user actions.
    
    It is unnecessary for the creation of guiRobot to be in each individual
    GUI test.
    
    Let's add GuiRobot to AddressBookGuiTest, so that classes that inherit
    AddressBookGuiTest need not create it on its own.

[33mcommit dc43834458e38fe011dbff0081aa09e99f282d6a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 10:38:47 2017 +0800

    AddressBookGuiTest#setup(): Remove redundant wait for stage to show
    
    AddressBookGuiTest#setup() waits for the stage to show up after executing
    FxToolkit#showStage().
    
    The wait is unncessary as FxToolkit#showStage() already blocks the
    current thread until the stage is shown.
    
    Let's remove the redundant wait.

[33mcommit daddc4289462285c4474311539b79287465273cc[m
Merge: 8d486143 951ca32c
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 08:34:26 2017 +0800

    Update DeleteCommand & SelectCommand targetIndex visibility (#527)
    
    Both target indices of DeleteCommand & SelectCommand are public.
    
    This breaks the encapsulation of these classes.
    
    Let's change them to private. As DeleteCommandParserTest and
    SelectCommandParserTest no longer have access to the target indices
    directly, let's use DeleteCommand#equals(...) and
    SelectCommand#equals(...) to check that the target indices are correct.

[33mcommit 8d4861438a18bf73edacfedf469877425296a352[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 29 08:30:49 2017 +0800

    Remove calls to guiRobot#targetWindow(Window) (#526)
    
    Calling guiRobot#targetWindow(Window) assigns the window to the guiRobot.
    
    GuiRobot does not access the window. Thus, there is no point assigning
    the window to guiRobot.
    
    Let’s remove these calls.

[33mcommit 681369a13fd875c41b378e3f5163d888cfba60e6[m
Merge: 2c981475 398be6d6
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 29 08:28:56 2017 +0800

    [#459] Clean PersonListPanelHandle (#514)
    
    PersonListPanelHandle contains an unused method. The logic for some
    methods in PersonListPanelHandle can also be improved.
    
    Let's tidy up PersonListPanelHandle by:
    
    * Removing unused or unnecessary methods
    * Throwing more specific exceptions
    * Improving the logic of various methods

[33mcommit 398be6d60b2d1473224f56c793919ac4eaf46fd3[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 13:42:24 2017 +0800

    PersonCardHandle#getPersonCardHandle(ReadOnlyPerson): Fix logic
    
    PersonCardHandle#getPersonCardHandle(ReadOnlyPerson) uses a stream to
    find the corresponding PersonCard that belongs to the ReadOnlyPerson. It
    then returns the JavaFx node.
    
    The handle can be returned directly as it has already been created in
    the stream.
    
    Let's simplify the logic of
    PersonCardHandle#getPersonCardHandle(ReadOnlyPerson) such that the
    handle is returned immediately upon comparison.

[33mcommit 951ca32ca14f47e139a7167c2ac152f1751f6fe9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 27 13:01:37 2017 +0800

    Update visibility modifier of DeleteCommand & SelectCommand
    
    Both target indices of DeleteCommand & SelectCommand are public.
    
    This breaks the encapsulation of these classes.
    
    Let's change them to private. As DeleteCommandParserTest and
    SelectCommandParserTest no longer have access to the target indices
    directly, let's use DeleteCommand#equals(...) and
    SelectCommand#equals(...) to check that the target indices are correct.

[33mcommit 16e31fc560bc8e444312af09a5eae209cc813d6a[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 27 15:11:42 2017 +0800

    Implement equals(Object) for DeleteCommand & SelectCommand

[33mcommit a19323689966de1c960b4e4977fefcbe2746a0ef[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 13:26:35 2017 +0800

    Simplify PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson)
    
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson) obtains the
    corresponding ReadOnlyPerson from the list. It also creates a defensive
    copy of the Person.
    
    PersonListPanelHandle#getPerson(int) already allows us to get the
    corresponding person in the list. Furthermore, creating a defensive
    copy is unnecessary when it is passed into
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson), which
    will not modify ReadOnlyPerson.
    
    Let's simplify the logic of
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson).

[33mcommit 80f0ec0643e7473ae1a13e5f56485ce265dce983[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 27 20:09:37 2017 +0800

    PersonListPanelHandle: Change access modifier to private
    
    PersonListPanelHandle contains a class variable and class methods that
    are not used outside of PersonListPanelHandle.
    
    Methods and variables that are not used outside of PersonListPanelHandle
    should not be exposed outside the class.
    
    Let's change the access modifiers of a class variable and class methods
    to private.

[33mcommit 84f9160426370dcfa5c047f4b8a9d6d712c6fdf0[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 10:27:32 2017 +0800

    PersonListPanelHandle#getPersonCardHandle(...): Add precondition
    
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson) returns a null
    if the person is not in the list.
    
    Callers are expected to not pass in a ReadOnlyPerson if the person is
    not in the list.
    
    Let's add a precondition check to ensure that the ReadOnlyPerson is on
    the list, and throw PersonNotFoundException if it isn't.

[33mcommit f55e4b9ed18eac87457b258f4ebfecb54e868a5a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 10:16:09 2017 +0800

    PersonListPanelHandle#navigateToPerson(...): Remove return type
    
    PersonListPanelHandle#navigateToPerson(ReadOnlyPerson) scrolls to the
    person on the list and selects it. It also returns the associated
    PersonCardHandle for that person on the list.
    
    The method should not be doing two different things. It should only be
    responsible for navigating the list to the person.
    
    Let's remove PersonListPanelHandle#navigateToPerson(ReadOnlyPerson)'s
    return type. Methods that still require a PersonCardHandle should call
    PersonListPanelHandle#getPersonCardHandle(ReadOnlyPerson).

[33mcommit d2d04cfa09e0002eab4633779842ac678b0fb899[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 27 15:36:06 2017 +0800

    PersonListPanelHandle: Remove unused startPosition parameter
    
    PersonListPanelHandle#cardsAndPersonsMatchInOrder(...) has a
    startPosition.
    
    All callers of the method only specifies 0 as the startPosition (i.e.
    use the entire list). This makes the startPosition parameter
    unnecessary.
    
    Let's remove unused startPosition parameter in
    PersonListPanelHandle#cardsAndPersonsMatchInOrder(ReadOnlyPerson). With
    the parameter startPosition removed,
    PersonListPanelHandle#isListMatching(int, ReadOnlyPerson) is no longer
    necessary. Let's remove that too.

[33mcommit 85e001d85418e283e296e14fc3d5a320a6f2399e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 11:23:31 2017 +0800

    PersonListPanelHandle#navigateToPerson(): Remove pauseForHuman() calls
    
    PersonListPanelHandle pauses two times using GuiRobot#pauseForHuman():
      1. Before selecting the person
      2. After selecting the person
    
    The entire navigation should be seen as a single unit of action by a
    human. Therefore, pause 1 is unnecessary.
    
    Let's remove pause 1.

[33mcommit b75943c924dffc1ce27efc8a3a7664780bd18a94[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 27 19:57:27 2017 +0800

    Remove PersonListPanelHandle#navigateToPerson(String)
    
    PersonListPanelHandle#navigateToPerson(String) picks a Person that has a
    matching name.
    
    There may be two Persons of the same name. It is not possible to
    identify which Person should be picked in such situation.
    
    Let's remove PersonListPanelHandle#navigateToPerson(String).

[33mcommit ae4a128404c1b15f0181afe115e83b6021ee89ef[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 08:28:06 2017 +0800

    PersonListPanelHandle: Remove unused getPersonIndex(int)
    
    PersonListPanelHandle#getPersonIndex(int) is no longer in use.
    
    Let's remove it.

[33mcommit d49d89a4f1c337ef05d71c344d913a331fbe767e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 21:44:42 2017 +0800

    PersonListPanelHandle#navigateToPerson(...): Use Person instead of index
    
    PersonListPanelHandle#navigateToPerson(...) obtains the index of the
    targeted person to scroll to.
    
    We can use the Person object directly instead of obtaining an index.
    
    Let's change PersonListPanelHandle#navigateToPerson(...) to use a Person
    instead of an index. Since the Person may not be in the list, let's
    throw a PersonNotFoundException if the person cannot be found in the list.

[33mcommit 028b25c2f414068d9f918ac4ea1d460ea7d7564a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 13:33:49 2017 +0800

    PersonListPanelHandle#navigateToPerson(): Throw PersonNotFoundException
    
    PersonListPanelHandle#navigateToPerson(String) throws an
    IllegalStateException.
    
    We should throw a checked exception so that our tests would be able to
    handle the situation whereby the person we are trying to navigate to
    does not exist.
    
    Let's replace throwing an IllegalStateException to a
    PersonNotFoundException.

[33mcommit 3a2c9adbf25142ddf92e3275fe010bb40046b3bd[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 21:36:20 2017 +0800

    PersonListPanelHandle#isListMatching(...): Retrieve list view once
    
    PersonListPanelHandle#isListMatching(...) retrieves the list view twice.
    
    Retrieving the list view multiple times is inefficient. Furthermore, the
    state of the list view might have changed between the two retrievals,
    leading to an inaccurate result.
    
    Let's change PersonListPanelHandle#isListMatching(...)'s logic to ensure
    that the retrieval is only done at the start of the method.

[33mcommit 359ca02c1caaf1a1cf797f1078dac0dbeccce137[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 21:38:57 2017 +0800

    Remove PersonListPanelHandle#containsInOrder(...)
    
    PersonListPanelHandle#containsInOrder(int, ReadOnlyPerson...) checks
    that the contents of the list view matches our expected person list.
    This behaviour is similar to isListMatching(...).
    
    Having two methods with the same functionality is unnecessary.
    
    Let's remove PersonListPanelHandle#containsInOrder(...).

[33mcommit 980c03648955b220df4d8c18057258cbb11753cc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 16:25:39 2017 +0800

    PersonListPanelHandle: Change getSelectedPersons()
    
    getSelectedPersons() returns a list of persons.
    
    The MainWindow's PersonListPanel only allows a maximum of one person to
    be selected. There is no reason for getSelectedPersons() to return a
    list of persons.
    
    Let's modify PersonListPanelHandle#getSelectedPersons() to return the
    person selected, or Optional.empty() if no one is selected, and rename
    it to getSelectedPerson() to reflect the new behaviour.

[33mcommit 2c9814756eafc5121e1a13e4ce4d5b8a9b28b7bf[m
Merge: 3ef87448 b1ab21f8
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 08:00:16 2017 +0800

    [#327] Add AddCommandParserTest (#494)

[33mcommit 3ef87448dab34c0065e23f6dfa55a138bea79f91[m
Merge: 0e544cd8 fbdc4838
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 07:59:05 2017 +0800

    [#504] Use EventsCollector when testing commands (#507)
    
    Some command tests check that the correct events are being triggered by
    manually subscribing to the events that they are expecting.
    
    We already have EventsCollector class in our codebase that catches all
    possible events, and allows us to extract data from the triggered
    events as well.
    
    Let's replace all manual subscription of events with EventsCollector
    instead.

[33mcommit 0e544cd8273221ef19e29f4724f9c1f8ce5df70c[m
Merge: 8cfab29d 98bab2b3
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 28 07:57:42 2017 +0800

    [#459] Clean up GuiHandle (#515)
    
    GuiHandle contains unnecessary parameters in its constructor. It also
    contains methods that are more specialized to individual components.
    
    Let's remove these constructor parameters, and move the methods to their
    appropriate component handle classes.

[33mcommit fbdc48389e26e64d9089a274e243ef565b3ee7d1[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 11:02:38 2017 +0800

    EventsCollector: Remove get(int)
    
    EventsCollector#get(int) is unused.
    
    Let's remove it.

[33mcommit 1bf9b4f4176f71db4d19f30641182c6670b0e42d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 09:37:28 2017 +0800

    EventsCollector: Add isEmpty()
    
    SelectCommandTest expects that no events are raised.
    
    Let's create EventsCollector#isEmpty() to check that no events are
    raised.

[33mcommit 64fd5b9fa247f3bff113b474409d0ea934655336[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 19 09:33:17 2017 +0800

    SelectCommandTest: Use EventsCollector to receive events
    
    SelectCommandTest manually subscribes to JumpToListRequestEvent to test
    that the event is actually being raised with the correct Index.
    
    EventsCollector allows us to check that the event is raised without
    having to manually subscribe to the event.
    
    Let's use EventsCollector in our SelectCommandTest instead.

[33mcommit 21b0e337c24db98d1fe8d2580fb411f18e812006[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 19 09:20:50 2017 +0800

    ExitCommandTest: Use EventsCollector to receive events
    
    ExitCommandTest manually subscribes to ExitAppRequestEvent to test that
    the event is actually being raised.
    
    EventsCollector allows us to check that the event is raised without
    having to manually subscribe to the event.
    
    Let's use EventsCollector in our ExitCommandTest instead.

[33mcommit 36edb5221a2ea76f8136941db55cf869635c426f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 19 09:13:15 2017 +0800

    HelpCommandTest: Use EventsCollector to receive events
    
    HelpCommandTest manually subscribes to ShowHelpRequestEvent to test that
    the event is actually being raised.
    
    EventsCollector allows us to check that the event is raised without
    having to manually subscribe to the event.
    
    Let's use EventsCollector in our HelpCommandTest instead.

[33mcommit 0fd010a8095baa15b79f6169466f92d151151de5[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 09:24:57 2017 +0800

    EventsCollector: Add getMostRecent()
    
    StorageManagerTest uses EventsCollector. It is only interested in
    testing the most recent event that has occurred.
    
    The test gets the first event from the EventsCollector's List as it
    assumes that is the most recent event. That assumption may not always
    be true.
    
    Let's add EventsCollector#getMostRecent() that retrieves the most recent
    event, and teach StorageManagerTest to call that instead.

[33mcommit 943d1286f93d140b62e0ecf3f2c837a2ebb7ac4b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 11:04:23 2017 +0800

    EventsCollector: Add getSize()
    
    Some test requires checking that no extra events were called.
    
    Let's add EventsCollector#getSize() to check how many events were called.

[33mcommit 98bab2b3c6a5544e127634a7487bd70b65ef0e17[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 21 08:39:39 2017 +0800

    Inline GuiHandle#getTextFromLabel(String, Node)
    
    GuiHandle#getTextFromLabel(String, Node) gets the content of a label
    belonging to a root node.
    
    Not all components have a label. Furthermore, only PersonCardHandle uses
    a label.
    
    Let's inline GuiHandle#getTextFromLabel(String, Node).

[33mcommit c2319a9a1d377c6d44f4d6b3a90b53fe95228599[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 21 08:35:39 2017 +0800

    Inline GuiHandle#getTextFieldText(String)
    
    GuiHandle#getTextFieldText(String) gets the content of a text field.
    
    Not all components have a text field. Furthermore, only CommandBoxHandle
    uses a text field.
    
    Let's inline GuiHandle#getTextFieldText(String).

[33mcommit 99062b465ebd087a0946d396ad7775a714df998d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 09:46:57 2017 +0800

    Inline GuiHandle#setTextFieldText()
    
    GuiHandle#setTextFieldText() emulates the user typing text into the
    specified text field.
    
    Only CommandBoxHandle uses setTextFieldText().
    
    Let's inline GuiHandle#setTextFieldText().

[33mcommit 8eed4fc38775b57ab97bff49709f832519682b54[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 09:12:25 2017 +0800

    GuiHandle: Move pressEnter() to CommandBoxHandle
    
    GuiHandle#pressEnter() allows tests to press the Enter key and pause for
    a while.
    
    Only CommandBoxHandle uses pressEnter().
    
    Let's move pressEnter() from GuiHandle to CommandBoxHandle.

[33mcommit 39edc0922122b9d714acc6dbcf46d2d9612715e8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 15:17:17 2017 +0800

    GuiHandle: Remove primaryStage constructor parameter
    
    The primaryStage variable is not used anywhere.
    
    Let's remove it.

[33mcommit 357325788727f5f5e81d10ab07ba50f18532067c[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 20 14:51:38 2017 +0800

    GuiHandle: Remove guiRobot from constructor parameters
    
    It is not necessary to pass in a guiRobot when each handle can create
    one on their own.
    
    Let's remove guiRobot from the constructor parameters.

[33mcommit 8cfab29d930e3fa60c7411a7eb6992373cff0686[m
Merge: d4dd4c25 315ca9c8
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 27 08:18:32 2017 +0800

    [#502] Revamp sleep() for Gui tests (#503)
    
    The current uses of `guiRobot.sleep()` in our gui tests can be
    categorized into two groups:
    
      (A) To prevent the tests from executing too fast, as that prevents us
          from visually examining the progression of the test.
    
      (B) To wait for something to happen on the JavaFX Application thread.
    
    Both types of uses of `guiRobot.sleep()` are undesirable. Group (A)
    unfairly makes our GUI tests slower in headless mode, as in headless
    mode we can't visually examine GUI test progression anyway. Group (B)
    is wrong and can lead to flaky tests, as sleeping for a set amount of
    time does not guarantee that what we are waiting for actually occurs on
    the JavaFX Application thread.
    
    Let's
    - Add GuiRobot#pauseForHuman() (for group A) for pauses that are merely
      for human observations. We are able to disable these pauses in
      headless mode.
    - Add guiRobot.waitForEvent() (for group B) with incremental waits, so
      that we are able to wait for events in JavaFX Application thread,
      instead of waiting for a fixed interval and assuming that the events
      happened.

[33mcommit 315ca9c8c15b5854256ec44809aaee2642cf2b14[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 16 16:24:46 2017 +0800

    GuiRobot#waitForEvent(BooleanSupplier, int): Add default timeout value
    
    GuiRobot#waitForEvent(BooleanSupplier, int) takes in a parameter for the
    timeout value.
    
    For most events, a reasonable waiting time would be 5000ms.
    
    Let's add a default timeout value for GuiRobot#waitForEvent().

[33mcommit 46b19c02d2a6e1e7f6e18ff8878b58fbd6850c79[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 14:53:18 2017 +0800

    GuiRobot#pauseForHuman(int): Remove duration parameter
    
    Some events are easy to examine and require less time for pausing, while
    other events require more human processing time. Therefore, the tests
    require different values of time to sleep.
    
    However, this makes it difficult to use GuiRobot#pauseForHuman(int) as
    developers need to determine the desirable waiting time.
    
    Let's remove the duration parameter, and standardise the waiting time
    to be 250ms, which is sufficient for events that require more human
    processing time.

[33mcommit aa9693501043561b79998de82d667f5c0c5f4c5a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 12:10:15 2017 +0800

    ErrorDialogGuiTest: Implement smart wait for showErrorDialogs()
    
    ErrorDialogGuiTest#showErrorDialogs() posts a 'DataSavingExceptionEvent'.
    This event is caught by the GUI, which launches an Alert dialog box.
    
    The GUI launches the dialog box, waits for 1000ms, and assumes that the
    dialog box is open after 1000ms. The delay does not guarantee that the
    Alert dialog box is actually opened after 1000ms has passed.
    
    Let's add guiRobot.waitForEvent() to add incremental wait, and also ensure
    that the Alert dialog box is actually opened before proceeding. It will
    also fail if our wait becomes too long.

[33mcommit b1ab21f8350f16616af46922255e7794f2798d0e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 15 10:33:40 2017 +0800

    Add tests for AddCommandParser

[33mcommit c4e0a604808d195dcec7b7e933e6b0d275eec2e4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 22 11:15:04 2017 +0800

    AddCommand: Implement equals(Object) method

[33mcommit cc2b06cdcf78ec88b425fadd4470dc4e5a065627[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 3 09:36:08 2017 +0800

    Extract constants from EditCommandParserTest to CommandTestUtil
    
    Constants in EditCommandParserTest can be used by other command
    tests.
    
    Let's extract these constants from EditCommandParserTest to
    CommandTestUtil.

[33mcommit a4bc9f8b32900dc0dfd43acf573c586c329e4b59[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 15 10:23:02 2017 +0800

    Rename EditCommandTestUtil to CommandTestUtil
    
    The constants declared in EditCommandTestUtil can be used by other
    command tests.
    
    Let's rename EditCommandTestUtil to a more generic name,
    CommandTestUtil.

[33mcommit e5ea5d7121fee2bacd02acf94c37106e944b95aa[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 09:43:00 2017 +0800

    GuiRobot: Add pauseForHuman(int)
    
    The current uses of `guiRobot.sleep()` in our gui tests can be
    categorized into two groups:
    
      (A) To prevent the tests from executing too fast, as that prevents us
          from visually examining the progression of the test.
    
      (B) To wait for something to happen on the JavaFX Application thread.
    
    Both types of uses of `guiRobot.sleep()` are undesirable. Group (A)
    unfairly makes our GUI tests slower in headless mode, as in headless
    mode we can't visually examine GUI test progression anyway. Group (B)
    is wrong and can lead to flaky tests, as sleeping for a set amount of
    time does not guarantee that what we are waiting for actually occurs on
    the JavaFX Application thread.
    
    Let's start by cleaning up group (A), by adding GuiRobot#pauseForHuman(int)
    to make the usage of pausing the test execution clearer, and also to
    allow headless mode to disable these unnecessary pauses.
    
    We then replace all usages of `guiRobot.sleep()` in group (A) with
    `guiRobot.pauseForHuman()`.
    
    The remaining usages of `guiRobot.sleep()` in the code base fall into
    group (B), which we shall clean up in the next commit.

[33mcommit d4dd4c253b3218faf475d5d3941e5db377e62637[m
Merge: 97653b7f 276d47c2
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 23 08:25:03 2017 +0800

    Add tests for DeleteCommand (#464)

[33mcommit 276d47c2fcac0111d69e01dc352ca172559b298f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 5 10:13:56 2017 +0800

    Add DeleteCommandTest

[33mcommit 1e8bd97eda888e6ef9038233794780c70c01d0eb[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 5 10:05:04 2017 +0800

    EditCommandTest: Move assertCommandSuccess(...) to CommandTestUtil
    
    EditCommandTest#assertCommandSuccess(EditCommand, String,
    ReadOnlyAddressBook, List<? extends ReadOnlyPerson>) can be used to test
    commands other than EditCommand.
    
    Let's extract EditCommandTest#assertCommandSuccess(...) out to
    CommandTestUtil, and make the command parameter more generic so that it
    can be used by any type of commands.

[33mcommit 9e2f9bd84259c9414359cf4f21a8002d7b81a642[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 5 09:50:28 2017 +0800

    EditCommandTest: Move assertCommandFailure(...) to CommandTestUtil
    
    EditCommandTest#assertCommandFailure(EditCommand, String) can be
    used to test commands other than EditCommand.
    
    Let's extract EditCommandTest#assertCommandFailure(EditCommand, String)
    out to CommandTestUtil, and make the command parameter more generic so
    that it can be used by any type of commands.

[33mcommit 97653b7fa08a90902a9a5c8b800007d3bbb483bf[m
Merge: 7414fb54 0e39f066
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 13:32:59 2017 +0800

    [#448] ui: Remove bidirectional dependencies in UiParts (#497)
    
    The components accept a placeholder in their parameter in order for them
    to add themselves into the placeholder. Therefore the placeholder acts
    like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in all component's constructor, and
    let MainWindow add the component to the placeholder instead.
    
    The components no longer fills up the entire space of the placeholder as
    it now contains the root node of the component as well. Let's also
    modify the .fxml to allow the component to fill up the entire space.

[33mcommit 7414fb54a2c702efb919616ec1061d9926ade0aa[m
Merge: 48775e45 b7663dbf
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 13:31:51 2017 +0800

    [#459] Clean up MainGuiHandle (#511)
    
    MainGuiHandle recreates a new Handle whenever one is requested. It also
    handles AlertDialog box, even though it is only responsible for the
    MainWindow.
    
    There is no need to recreate the handles. Furthermore, MainGuiHandle
    should be the owner of all the handles to the components in MainWindow,
    but not for any error dialog boxes.
    
    Let's encapsulate the handles in MainGuiHandle. Let's also remove
    getAlertDialog(String), and make the callers create the handle on their
    own instead.

[33mcommit 0e39f066e4b692996782bccafe1634de127762f3[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 08:52:49 2017 +0800

    ResultDisplay: Change AnchorPane to StackPane
    
    ResultDisplay is enclosed inside an AnchorPane. We have to configure
    ResultDisplay's anchor attributes to allow it to stretch together with
    the AnchorPane.
    
    StackPane already provide this behavior by default. Therefore, StackPane
    is more suitable than AnchorPane for our purpose.
    
    Let's change the use of AnchorPane to StackPane instead.

[33mcommit 32513851709c5e16ba9a5551ab95a5d4f43c588b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 08:51:53 2017 +0800

    CommandBox: Change AnchorPane to StackPane
    
    CommandBox is enclosed inside an AnchorPane. We have to configure
    CommandBox's anchor attributes to allow it to stretch together with
    the AnchorPane.
    
    StackPane already provide this behavior by default. Therefore, StackPane
    is more suitable than AnchorPane for our purpose.
    
    Let's change the use of AnchorPane to StackPane instead.

[33mcommit 729eec99c286f31677bc0082231f72ea1d8fdde7[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 22 08:41:45 2017 +0800

    BrowserPanel: Change AnchorPane to StackPane
    
    BrowserPanel is enclosed inside an AnchorPane. We have to configure
    BrowserPanel's anchor attributes to allow it to stretch together with
    the AnchorPane.
    
    StackPane already provide this behavior by default. Therefore, StackPane
    is more suitable than AnchorPane for our purpose.
    
    Let's change the use of AnchorPane to StackPane instead.

[33mcommit 540862f623c58f94ce112f611c2a49484d23869f[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 20 09:42:57 2017 +0800

    LogicManagerTest: Initialise object variables during declaration
    
    Object variables `model` and `logic` are initialised in #setUp().
    
    This is unnecessary as JUnit instantiates the class for each test,
    thus resetting instance variables after each test.
    
    Let’s initialise these object variables during declaration instead.

[33mcommit 2a932f5be144dde36aad1c1e9100a2b222769034[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 19 15:59:04 2017 +0800

    LogicManagerTest: Merge LogicManagerTest#execute_verifyHistory_success()
    
    A separate test is created to verify the history.
    
    This is unnecessary as we can verify the history in each test.
    
    Let’s remove LogicManagerTest#execute_verifyHistory_success() and test
    for the history in each individual test.

[33mcommit 81fc7600593f69143b957f67cb04995d7d71f4ef[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 19 15:47:44 2017 +0800

    LogicManagerTest: Add successful test

[33mcommit 99bfbcef557690d7cc942a95f361f05380ad2935[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 10:05:44 2017 +0800

    LogicManagerTest: Add test for CommandException thrown

[33mcommit 265c96ff581fc24f88c6d10a38d3d06ddb41a343[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 20 08:42:19 2017 +0800

    LogicManagerTest: Rename test method
    
    The current test method name does not reflect the equivalence class
    being tested.
    
    Let’s update the test method name accordingly, and rename the local
    variable inside the test method to reflect the update.

[33mcommit 06a592eca49d0d181355753c7f97c6595537aef4[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Jun 20 08:40:02 2017 +0800

    LogicManagerTest: Place private methods after test methods

[33mcommit 5303863303cd39ab4c5f8cc15e386106c17160d1[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 10:02:48 2017 +0800

    LogicManagerTest: Remove unnecessary test
    
    LogicManagerTest has 2 tests testing for the same code path (verifying
    that ParseException is thrown).
    
    This is unnecessary. Let’s remove it.

[33mcommit 82b33c2dbf1367e310794d5c36391ea91e2cc625[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 09:56:06 2017 +0800

    LogicManagerTest: Remove generic type name
    
    Specifying the generic type name is unnecessary.
    
    Let’s replace it with a wildcard instead.

[33mcommit e05d7e14797fd4fd004c742980134aee08a5d901[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 09:48:10 2017 +0800

    LogicManagerTest: Remove Storage component
    
    LogicManagerTest is an integration test for Logic, Model and Storage.
    
    Since the system tests cover Storage, it is unnecessary for
    LogicManagerTest to include Storage.
    
    Let’s remove the Storage component from LogicManagerTest, so that
    LogicManagerTest is an integration test for Logic and Model only.

[33mcommit 920e3f5b48fe93b0767d63e08c340bc2c6b5b651[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 09:34:01 2017 +0800

    LogicManagerTest: Remove unused methods
    
    After removing repeated tests from LogicManagerTest, some methods are
    now unused.
    
    Let's remove them.

[33mcommit ac351cfa0111c4edb737875d1ad69254fe54f6f8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 09:21:34 2017 +0800

    LogicManagerTest: Remove repeated tests
    
    LogicManagerTest tests all commands at integration test level.
    
    These tests have already been covered in *CommandIntegrationTest.
    
    Let’s remove them.

[33mcommit d511d69e7f4ee1a07d83c8a6d0d0d1f53eeb391d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 20 15:23:10 2017 +0800

    MainWindow: Remove getXPlaceholder() methods
    
    The MainWindow contains getter methods for each placeholder.
    
    They are unused.
    
    Let's remove them.

[33mcommit 1d780e1567479dce3bfdbd15891f44b70f5ab7fb[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 15:03:17 2017 +0800

    BrowserPanel: Remove placeholder from constructor
    
    The components accept a placeholder in their constructor in order for
    them to add themselves into the placeholder. Therefore the placeholder
    acts like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in BrowserPanel's constructor, and
    let MainWindow add the component to the placeholder instead.
    
    The component no longer fills up the entire space of the placeholder as
    it now contains the root node of the component as well. Let's also
    modify the .fxml to allow the component to fill up the entire space.

[33mcommit 9b45ac30273c71d112a1b34bf2b55732868bf561[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 14:59:21 2017 +0800

    PersonListPanel: Remove placeholder from constructor
    
    The components accept a placeholder in their constructor in order for
    them to add themselves into the placeholder. Therefore the placeholder
    acts like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in PersonListPanel's constructor, and
    let MainWindow add the component to the placeholder instead.

[33mcommit 7608a9c595d4779a9d3a56f70d8f6d6500d6b919[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 21 13:41:14 2017 +0800

    PersonListPanel: Fix SplitPane.resizableWithParent not working
    
    PersonListPanel should not resize when the MainWindow is being resized.
    This is accomplished by setting the SplitPane.resizableWithParent
    attribute to false.
    
    The attribute is set inside the PersonListPanel's placeholder, but the
    placeholder is enclosed inside a VBox element. Therefore, when the user
    resizes the window, the SplitPane is still able to resize the VBox,
    which in turn resizes the placeholder. This behavior overrides the
    attribute.
    
    Let's set the SplitPane.resizableWithParent attribute in the VBox
    element, so that the VBox element cannot be resized by the window, which
    in turn prevents the placeholder from resizing as well.

[33mcommit d1bd1cd1a49ab1fe3159cf955aa37de686db3cf5[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 21 09:25:53 2017 +0800

    PersonListPanel: Set SplitPane.resizableWithParent in .fxml
    
    PersonListPanel's placeholder should not resize when the SplitPane is
    resized.
    
    The attribute can be set in .fxml, rather than setting it
    programmatically.
    
    Let's set PersonListPanel placeholder's SplitPane.resizableWithParent
    attribute in .fxml instead of setting it programmatically.

[33mcommit baf00d32843e028a9875e93f413f818e8e5346f8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 14:55:39 2017 +0800

    ResultDisplay: Remove placeholder from constructor
    
    The components accept a placeholder in their constructor in order for
    them to add themselves into the placeholder. Therefore the placeholder
    acts like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in ResultDisplay's constructor, and
    let MainWindow add the component to the placeholder instead.
    
    The component no longer fills up the entire space of the placeholder as
    it now contains the root node of the component as well. Let's also
    modify the .fxml to allow the component to fill up the entire space.

[33mcommit dac78051e25237a925636246c6f873e2e9bebd65[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 14:53:50 2017 +0800

    StatusBarFooter: Remove placeholder from constructor
    
    The components accept a placeholder in their constructor in order for
    them to add themselves into the placeholder. Therefore the placeholder
    acts like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in StatusBarFooter's constructor, and
    let MainWindow add the component to the placeholder instead.

[33mcommit 4acbb6cd76c5a683c70ff519eeecea775d2ab2df[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 14:32:49 2017 +0800

    CommandBox: Remove placeholder from constructor
    
    The components accept a placeholder in their constructor in order for
    them to add themselves into the placeholder. Therefore the placeholder
    acts like a parent to the component.
    
    The components themselves should not know about their parent placeholder
    as this creates a bi-directional dependency coupling.
    
    Let's remove the placeholder parameter in CommandBox's constructor, and
    let MainWindow add the component to the placeholder instead.
    
    The component no longer fills up the entire space of the placeholder as
    it now contains the root node of the component as well. Let's also
    modify the .fxml to allow the component to fill up the entire space.

[33mcommit f7a5766af3d09475af6f9b276c8c26dc624b502d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 21 09:17:13 2017 +0800

    CommandBox: Remove call to SplitPane#setResizableWithParent()
    
    The placeholder for CommandBox is stored inside StackPane, not a
    SplitPane.
    
    The call to SplitPane#setResizableWithParent() is erroneous and has no
    effect.
    
    Let's remove the call to SplitPane#setResizableWithParent() in
    addToPlaceholder(Pane).

[33mcommit 48775e45f9e37d5c00b99f7241d2856b3e2eac9e[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 21 08:06:48 2017 +0800

    [#480] Change EditPersonDescriptor’s parameters to be non-Optional (#482)
    
    EditPersonDescriptor’s parameters are of type Optional.
    
    Optional should not be used as parameters. The intended use case is
    for return types to indicate that there is no result.
    
    Let’s update EditPersonDescriptor’s parameters to be non-Optional.

[33mcommit b7663dbf33e89d4adccdc5fcf2e7303c7f562867[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 20 13:51:56 2017 +0800

    Rename MainGuiHandle to MainWindowHandle
    
    MainGuiHandle contains a list of handles to components found inside
    MainWindow.
    
    It would be more appropriate to rename the class MainWindowHandle as it
    is tied to MainWindow rather than MainGui (which does not exist).
    
    Let's rename it from MainGuiHandle to MainWindowHandle.

[33mcommit 94bfea960fffee520d7b2301b4951e3bcb4720a7[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 10:13:34 2017 +0800

    MainGuiHandle: Create handles only once
    
    The getter methods of MainGuiHandle return a new Handle when one is
    requested.
    
    This is inefficient as there is no need to recreate the handles.
    Furthermore, MainGuiHandle should be the owner of all the handles to the
    components.
    
    Let's create the handles once in the constructor, and return these
    existing handles in the getter methods.

[33mcommit 470f285abd57ac5a258f3adb51d9276caed5c5cf[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 13 10:15:38 2017 +0800

    MainGuiHandle: Remove getAlertDialog(String)
    
    An alert dialog box is a separate window from the main window.
    As MainGuiHandle is the handle for the main window, it should not be
    the responsibility of MainGuiHandle to create such a handle for the
    callers.
    
    Let's remove getAlertDialog(String), and make the callers create the
    handle on their own instead.

[33mcommit 425582ae92d17a02ed45464fb87e52d3e0034b0c[m
Merge: 5cc85fcf bafef4e8
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 20 10:42:02 2017 +0800

    Remove unused test methods (#508)
    
    GuiRobot#push(KeyCodeCombination) and TestUtil#scrub(KeyCodeCombination)
    are not used by any classes.
    
    Let's remove them.

[33mcommit bafef4e86336b809168ae6d9123746e8b59bb8ba[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 15 08:21:41 2017 +0800

    TestUtil: Remove scrub(KeyCodeCombination)
    
    TestUtil#scrub(KeyCodeCombination) is no longer used in the codebase.
    
    Let's remove it.

[33mcommit e98aa4c2770c1b194f8d29d62d851d29c1f6554f[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 09:18:59 2017 +0800

    GuiRobot: Remove push(KeyCodeCombination)
    
    GuiRobot#push(KeyCodeCombination) is not used in the codebase.
    
    Let's remove it.

[33mcommit 5cc85fcf11b40d1660d0b6be20a3ef90bc71c1c1[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 15 07:50:29 2017 +0800

    [#437] Remove unused parameter in LogicManager constructor (#493)

[33mcommit 94149b9b67146de586e7a43a5b8878ee3dd2f5b4[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 15 07:49:49 2017 +0800

    [#327] Add AddCommandIntegrationTest (#488)

[33mcommit 6ec9b6811339fd6a8d8a6e951b283d5e28fe6f6b[m
Merge: 4fda0955 ae3f81e3
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 09:15:56 2017 +0800

    [#417] Make help documentation accessible offline (#420)
    
    The help window accesses the online version of the documentation.
    
    Users are unable to access it if they are offline. Furthermore, the
    application version for the online documentation may not match the
    application version that the user is using.
    
    Let's change the help window to use an offline version instead, and
    deploy the offline version to the 'src/main/resources/' folder such
    that shadowJar will automatically bundle the documentation with the app.

[33mcommit 4fda095582f3ce6f53774550edbc0561c9172b2c[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 14 09:15:05 2017 +0800

    [#327] Add tests for SelectCommandParser (#485)

[33mcommit 54faa4d46764fdf5a89fbe229686e7888cffe897[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed Jun 14 09:14:39 2017 +0800

    [#327] Add SelectCommandTest (#487)

[33mcommit 1bea354f06cfe721d17bdf267a560a7131aa3cae[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 12 08:03:38 2017 +0800

    [#327] Add tests for ListCommand (#473)

[33mcommit ae3f81e3ea549be88aac672f9498ee599015c45a[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 16 16:55:16 2017 +0800

    HelpWindow: Use offline version of user guide
    
    The help window accesses the user guide at:
    https://se-edu.github.io/addressbook-level4/docs/UserGuide.
    
    The user will not be able to access it if he has no internet connection.
    Furthermore, the user guide may not match the version that he is using.
    
    Let's change the user guide used by HelpWindow to an offline version.
    
    The offline user guide and its associated files are stored at
    'src/main/resources/docs', so that gradle's shadowJar deployment task
    will automatically copy them to the output .jar file. It also allows
    HelpWindow to access them using a simple relative filepath.

[33mcommit 591c4c521c592d0008f67be98adf9e26ee1fb2f9[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 23 15:07:52 2017 +0800

    Create gradle task for generating offline user guide
    
    The offline user guide and its associated files have to be manually
    updated by copying the corresponding html files from the asciidoctor's
    output directory.
    
    Such a process is tedious and prone to errors. Furthermore, we may
    forget to update to the new version when deploying a new .jar file.
    
    Let's create a new gradle task 'deployOfflineDocs', to automate the
    copying process, in order to allow 'processResources' task to update
    the offline user guide and its associated files first before running
    or deploying the application.

[33mcommit a76a2a505499c1c7c68a22083026f286f4f85592[m
Merge: 27f8e004 8c3eb789
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 9 09:56:27 2017 +0800

    [#467] Add Prefix "n/" for specifying names (#474)
    
    There is no Prefix for specifying names. The name is included in the
    preamble of the argument for the add and edit commands.
    
    Putting the name in the preamble can make the code more complex. For
    example, in EditCommandParser, the preamble includes both the index
    and the name, so EditCommandParser has to split it.
    
    Let's add a new Prefix "n/" for specifying names so that the name will
    not be parsed as part of the preamble.

[33mcommit 27f8e004e290b89da155d2a30188f6805fde21d4[m
Merge: 9db18c3e 7290079e
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 9 09:54:45 2017 +0800

    [#254] Add more tests for EditCommand (#393)

[33mcommit 7290079e5e3ef46ceff790253f8d00a73d5f9bff[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu May 18 14:16:05 2017 +0800

    Add missing integration and hybrid tests

[33mcommit 79bb60d09f1c2872be0ed291e109162986ca29d8[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 5 09:45:10 2017 +0800

    Move EditCommandTest#createEditPersonDescriptor(ReadOnlyPerson)
    
    This method is a helper method that creates an EditPersonDescriptor
    object. EditPersonDescriptorBuilder also contains helper methods to
    create EditPersonDescriptor objects.
    
    This causes inconsistency in the codebase as EditPersonDescriptorBuilder
    ought to contain all necessary helper methods required to construct
    an EditPersonDescriptor object.
    
    Let’s move this method over to EditPersonDescriptorBuilder.

[33mcommit 8d2ccd94e022622f950a5d5bca83b07b4f2ec3cd[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Jun 5 09:31:44 2017 +0800

    Update EditCommandTest to check equality using Model directly
    
    The tests check for equality of the individual components of Model
    (AddressBook and FilteredList).
    
    This can be simplified by checking for equality of the entire Model
    directly using ModelManager#equals().
    
    Let’s update EditCommandTest accordingly.

[33mcommit c7710969266fa3887aff311d4bc05f93b5701f30[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 3 12:12:24 2017 +0800

    PersonBuilder constructor: Change Person to ReadOnlyPerson
    
    PersonBuilder's constructor takes in Person, which is more specialized
    than ReadOnlyPerson.
    
    As we can also copy the details of a person with ReadOnlyPerson, the
    constructor is unnecessarily restrictive.
    
    Let’s change it to take in a ReadOnlyPerson instead.

[33mcommit 9db18c3ec4b2df042e036616e8bce2d2fb3dd7d5[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 9 08:19:48 2017 +0800

    [#327] Add tests for DeleteCommandParser (#472)

[33mcommit 5719ad6697102ce3513c1df2160f38b62aad4630[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 9 08:01:55 2017 +0800

    [#476] Extract exceptions in UniquePersonList (#479)
    
    Model API refers to UniquePersonList.DuplicatePersonException and
    UniquePersonList.PersonNotFoundException.
    
    UniquePersonList is a class inside the model component which need not
    be exposed to classes outside the Model component.
    
    Let's extract these two exception as standalone classes so that the
    Model API no longer exposes the UniquePersonList class.

[33mcommit 8c3eb78925eff1fb77e38cd988b9b1e1a14aac57[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue Jun 6 10:44:56 2017 +0800

    docs: Add new Name prefix

[33mcommit 3c729eccff474ae0f36636207807a26df52eb3f2[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue Jun 6 10:36:22 2017 +0800

    Remove ParserUtil#split(String, int)
    
    ParserUtil#split(String, int) is unused.
    
    Let's remove ParserUtil#split(String, int) and its tests.

[33mcommit 17aceb2eb3fb492aa8541c6224d530a2836b3777[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue Jun 6 10:27:33 2017 +0800

    Add Prefix "n/" for specifying names
    
    There is no Prefix for specifying names. The name is included in the
    preamble of the argument for the add and edit commands.
    
    Putting the name in the preamble can make the code more complex. For
    example, in EditCommandParser, the preamble includes both the index
    and the name, so EditCommandParser has to split it.
    
    Let's add a new Prefix "n/" for specifying names so that the name will
    not be parsed as part of the preamble.

[33mcommit 8e4f02b5ad8da2c440f262c2787f24f824978e4c[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 8 10:19:22 2017 +0800

    [#327] Add tests for ClearCommand (#475)

[33mcommit 2dacdc4e3029a3bc345dc15739e6cb9939fe5659[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 8 10:18:20 2017 +0800

    [#327] Add tests for HelpCommand (#477)

[33mcommit 3cee7812a525b60e0a8aef516c77dac11d941124[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu Jun 8 10:11:50 2017 +0800

    [#327] Add tests for ExitCommand (#478)

[33mcommit a300eb7b7798dfd52a5b056874219042c7123ec7[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 7 12:49:51 2017 +0800

    [#468] Model#updatePerson(...): Change parameter from Index to ReadOnlyPerson (#471)
    
    Model exposes its internal representation by taking in an `int index`
    to update the person at the index.
    
    Model is a facade and should not expose its internal representation.
    
    Let’s update Model#updatePerson(int, ReadOnlyPerson) to
    Model#updatePerson(ReadOnlyPerson, ReadOnlyPerson).

[33mcommit 857090e443120e18c45deb59c15089c64cce11d5[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed Jun 7 12:48:50 2017 +0800

    Remove IndexUtil#oneToZeroIndex(int) (#463)
    
    The creation of Index class in #447 makes IndexUtil#oneToZeroIndex(int)
    obsolete.
    
    Let’s standardise the codebase to use Index instead.

[33mcommit 3de3b34bcf05aa4a9a656b238be22d7de6d78279[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Jun 6 11:24:41 2017 +0800

    [#469] Fix HelpWindow online user guide URL (#470)
    
    We migrated the documentation rendering system from Markdown to
    Asciidoctor. The URL for the online user guide in the new Asciidoctor
    website was changed.
    
    HelpWindow now points to the wrong URL.
    
    Let's fix the URL to point to the correct online user guide URL.

[33mcommit dfe3b25eb274119f2d0605fa266877597a3341c6[m
Merge: 5ccd6d18 ae548190
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jun 5 08:26:25 2017 +0800

    [#439] Allow user to see the command history (#440)
    
    AddressBook does not keep track of entered commands.
    
    This makes it difficult for the user to trace commands entered
    previously. In addition, users have to type out the whole command again
    should they make a small typo in their commands previously.
    
    Let’s implement the History functionality to allow the user to access
    previously entered commands in the GUI.

[33mcommit ae5481905f5c735dd9f927474b75ff1bca7739c5[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 2 09:53:54 2017 +0800

    DeveloperGuide: Include CommandHistory

[33mcommit 554e26f9a97b3323276e8ec30a628f502b04ec11[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 24 14:58:25 2017 +0800

    UserGuide: Add History command

[33mcommit 567545ee8e951fc67db600f37f7820cb6c5b00e2[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 24 10:41:03 2017 +0800

    Teach Parser to parse HistoryCommand
    
    Addressbook does not keep track of entered commands.
    
    This makes it difficult for the user to trace commands entered
    previously. In addition, users have to type out the whole command again
    should they make a small typo in their commands entered into the
    system.
    
    Let’s teach Parser to parse HistoryCommand to allow the user to see
    what he has entered previously.

[33mcommit c184e7351763bbd049b55d9a5b58c635d3f976c7[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 24 10:40:54 2017 +0800

    Create HistoryCommand
    
    Addressbook does not keep track of entered commands.
    
    This makes it difficult for the user to trace commands entered
    previously. In addition, users have to type out the whole command again
    should they make a small typo in their commands entered into the
    system.
    
    As a step towards implementing history functionality, let’s create
    the class HistoryCommand.

[33mcommit 6ddeccc82b19d3c61ab68b6dc8249ed5aa4d86ac[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu May 4 09:02:56 2017 +0800

    Logic: Create CommandHistory
    
    Addressbook does not keep track of entered commands.
    
    This makes it difficult for the user to trace commands entered
    previously. In addition, users have to type out the whole command again
    should they make a small typo in their commands entered into the
    system.
    
    As a step towards implementing history functionality, let’s create
    the class CommandHistory.

[33mcommit 5ccd6d185c69c6af44f01b45eab992d90a4358f3[m
Merge: d8b24e8a 55838d7d
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 10:09:02 2017 +0800

    [#401] Create unit tests for ParserUtil#splitPreamble() (#424)
    
    ParserUtil#split() has no unit test.
    
    It exhibits undesirable behaviours such as not properly splitting the
    string when there are leading and trailing white spaces. For example,
    the string " abc def" will be split into: an empty string and "abc def",
    instead of two strings "abc" and "def". It also allows the method to be
    called when there are fewer than 2 parts.
    
    Let's fix those issues and create unit tests for the method.

[33mcommit 55838d7de4156586b478ef44ce605c193b0ec793[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Thu May 25 16:29:24 2017 +0800

    ParserUtil#split(): Add precondition for numOfParts < 2
    
    ParserUtil#split() does not make sense if the number of parts is less
    than 2. There is no precondition check for this method.
    
    Let's add a precondition check that throws an IllegalArgumentException
    if there is an insufficient number of parts.

[33mcommit b1ef8f3054c2675a6b985e28af501e5066b1e6ad[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Wed May 31 10:25:41 2017 +0800

    ParserUtil#split(String, int): Trim whitespace
    
    If there are leading whitespace characters in the string, the first
    field will be an empty string after splitting.
    
    This may cause unexpected behaviour when splitting the string.
    For example, the string " abc def" will be split into: an empty string
    and "abc def", instead of two strings "abc" and "def".
    
    Let's trim the whitespace in the string before splitting it so
    that this behaviour can be avoided.

[33mcommit 84a9893b98ee57a7837f5648f7af1ac8060cd174[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Thu May 25 15:37:01 2017 +0800

    ParserUtil: Rename splitPreamble() to split()
    
    The method name is misleading as it is not limited to just preambles.
    
    Let's rename it to ParserUtil#split().

[33mcommit 6ca3d19bc7bd901f41b3d63d53552f3641ddb107[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 23 11:40:44 2017 +0800

    Add unit tests for ParserUtil#splitPreamble()

[33mcommit d8b24e8a0c61af4746f7dce842eb2771c8583402[m
Merge: 0352e6b6 24622e28
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 08:41:20 2017 +0800

    [#438] Create a new Index class (#447)
    
    The usages of zero-based indices and one-based indices are mixed
    throughout the codebase. Both uses int, and are only differentiated by
    different suffixes for the variable names (e.g int zeroBasedIndex,
    int oneBasedIndex).
    
    The index base can be easily confused and is prone to error. The
    conversion also takes place at different areas of the codebase and is
    not consistent.
    
    Let's create an Index class that understands how to convert to a
    both zero-based and one-based index, and update the codebase to use
    Index instead of int when handling user inputs.
    
    Index from the point when a new user input is being parsed, so that if
    the current component wants to communicate with another component, it
    can send an Index to avoid having to know what base the other component
    is using for its index. However, after receiving the Index, that
    component can convert it back to an int if the index will not be passed
    to a different component again.

[33mcommit 24622e28586a5d932a78520e0645588e5b37eeea[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu May 25 14:29:32 2017 +0800

    Update codebase to use Index instead of int
    
    The usages of zero-based indices and one-based indices are mixed
    throughout the codebase. Both use int, and are only differentiated by
    different prefixes for the variable names (e.g zeroBasedIndex,
    oneBasedIndex).
    
    The index base can cause confusion and is prone to error. The
    conversion also takes place at different areas of the codebase and is
    inconsistent.
    
    Let's update the codebase to use Index from the point when a new user
    input is being parsed. Index will be passed around when communicating
    with other components. However, each component within itself should
    convert it back to int using Index#getZeroBased() or Index#getOneBased()
    depending on the standard base of the index used within the component.

[33mcommit 413275f9f022ee1c350c9fff276df87d84d985a8[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed May 24 11:32:38 2017 +0800

    Create Index class
    
    The usages of zero-based indices and one-based indices are mixed
    throughout the codebase. Both use int, and are only differentiated by
    different prefixes for the variable names (e.g zeroBasedIndex,
    oneBasedIndex).
    
    The index base can cause confusion and is prone to error. The
    conversion also takes place at different areas of the codebase and is
    inconsistent.
    
    Let's create an Index class, allowing methods to specify their expected
    base for the input index without explicitly converting it.

[33mcommit 0352e6b6e3f51910edbff7a786f6ae24f453d38f[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri Jun 2 08:13:34 2017 +0800

    [#436] StringUtil#isUnsignedInteger(String): Fix unhandled NFE (#460)
    
    StringUtil#isUnsignedInteger(String) attempts to convert any given
    number to an integer (as a step in checking if it is an unsigned integer).
    
    When the input is a number higher than Integer.MAX_VALUE,
    the method fails with an exception instead of returning false.
    
    Let’s teach StringUtil#isUnsignedInteger(String) to return false if
    the input number is higher than Integer.MAX_VALUE.

[33mcommit f6fe1a019300e879cb62af993a0c12d61cb28f87[m
Merge: 2f5b10f1 46e57b8f
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri Jun 2 08:12:47 2017 +0800

    Tidy EditCommand related classes (#445)

[33mcommit 46e57b8f069ac90945b4fb5e94ad88c5dd1e1f30[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri May 26 16:55:19 2017 +0800

    EditCommandTest: Replace `Command command` w/ `EditCommand editCommand`
    
    EditCommandTest only contain tests for EditCommand. There is no need
    for these helper methods to take in Command which is more general.
    
    Let’s do the replacement.

[33mcommit 6685551ab60859ab8d824bceae904a44791d7442[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri May 26 16:54:25 2017 +0800

    EditCommandTest: Remove unnecessary line breaks in header comments
    
    These line breaks are unnecessary as they are located on the last
    line of code.
    
    Let’s remove them.

[33mcommit 8087b5dc3806533c4258a7622d16018d30ac4f65[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri May 26 16:53:57 2017 +0800

    EditCommandTest: Update PersonBuilder usage with more compact version
    
    These lines of code were written before PersonBuilder had default values
    in the default constructor. It is now unnecessary to call PersonBuilder#with*
    methods as default values will be assigned when calling the default
    constructor.
    
    Let’s make this code more compact.

[33mcommit 701cb3b9a8fb6b5a7cc5a0c4850b4b27399999d9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon May 22 08:47:38 2017 +0800

    EditCommandTest: Construct EditCommand directly
    
    EditCommandTest constructs its EditCommands for testing by first
    constructing an edit command string via PersonUtil#getEditCommand()
    and then parsing that via Parser#parseCommand() to obtain an EditCommand.
    
    This causes unnecessary coupling with Parser in EditCommandTest as
    constructing EditCommand does not require Parser.
    
    Let’s improve EditCommandTest by constructing EditCommand using its
    constructor instead.

[33mcommit f3eb596fe316f5508c63cede160be2b74931f73c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu May 4 10:15:47 2017 +0800

    EditCommandTest: Merge with EditCommandIntegrationTest
    
    As we have decided not to write pure unit tests for EditCommand, there
    is no need to specifically make the distinction between EditCommandTest
    and EditCommandIntegrationTest.
    
    Let’s merge them into EditCommandTest.

[33mcommit 2f5b10f106c34d815c23f7d029920f166ffd4c51[m
Merge: 3e929d61 288a958a
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 1 19:33:15 2017 +0800

    [#239] Reduce unnecessary asserts (#414)
    
    Parameter validation is done by using asserts, and throws AssertionError
    when validation fails.
    
    Asserts may not always be enabled. Furthermore, specific exceptions
    such as NullPointerException should be thrown to make the error more
    explicit.
    
    Let's
        - Replace the asserts for public APIs with checkNotNull() and
          checkArgument(), which throws an appropriate exception when
          validation fails.
        - Enhance CollectionUtil#isAnyNull(…) to do the same operation as
          Objects#requireNonNull(T), and also able to take in multiple
          parameters.

[33mcommit 3e929d61e0909940d635fb8e955142f440215346[m
Merge: b0c1794e 96cb99eb
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 1 17:13:41 2017 +0800

    [#271] Migrate documentation from markdown to asciidoc (#452)

[33mcommit b0c1794e834c317a280bf369502181d365c4a6d2[m
Merge: cfc8ecc7 8d4cd683
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jun 1 17:12:21 2017 +0800

    [#456] Update tests to compare at Model level (#458)
    
    ```
    Tests check for equality of the individual components of Model
    (AddressBook and FilteredList). The following code snippet shows an
    example:
    
    assertEquals(expectedAddressBook, model.getAddressBook());
    assertEquals(expectedFilteredList, model.getFilteredPersonList());
    
    This can be simplified by checking for equality of the entire Model
    directly using ModelManager#equals().
    
    Let's implement Model#equals() and update the tests to check for
    equality of Model using assertEquals(expectedModel, model).
    ```

[33mcommit 8d4cd683088b0983fc4d157bce8b539a4deff9ac[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 31 09:59:21 2017 +0800

    Update tests to use assertEquals(Model, Model)
    
    The tests check for equality of the individual components of Model
    (AddressBook and FilteredList).
    
    This can be simplified by checking for equality of the entire Model
    directly using ModelManager#equals().
    
    Let’s update the tests accordingly.

[33mcommit ec9802858a993112faf0810e9e242a658d3f5d4b[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed May 31 09:57:20 2017 +0800

    Implement ModelManager#equals()

[33mcommit 288a958a8d077613b9eed81e5f20219cc4d97449[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri May 19 12:30:45 2017 +0800

    Update CollectionUtil#isAnyNull(Object...) to throw NPE
    
    Java’s native Objects#requireNonNull(T) can only take in an Object.
    Calling the native method requires multiple calls in cases where certain
    methods require multiple parameters to be non-null.
    
    Let’s update CollectionUtil#isAnyNull(…) to do the same operation as
    Objects#requireNonNull(T), and also able to take in multiple parameters.

[33mcommit 96cb99eb0f68adc8e50d1060a2e5b72a3a7d0d37[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 15:39:33 2017 +0800

    Remove numbered: true in build.gradle
    
    When rendered to HTML with asciidoctor, the numbered attribute adds
    numbers to the headers by default.
    
    This does not suit the look of documents like AboutUs.adoc.
    
    Let's remove this attribute from build.gradle. Instead, documents that
    require header numbers should include this attribute in their
    document header (which is already included in suitable documents such
    as UserGuide.adoc).

[33mcommit a766c5822f718ea8ea93fb12a19c22254aec2998[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 13:21:37 2017 +0800

    Use absolute path for links to files in documentation
    
    DeveloperGuide.adoc uses relative path to link to the source code when
    describing the components of the application (such as Model.java).
    
    The relative path might no longer contain the source code. For example,
    in the gh-pages branch, the source code is not available through
    relative paths, as it only contains the documentation files.
    
    Let's change all of such links to use absolute path.

[33mcommit 64b3abe4f3c180a37456b0310f69df376aa86794[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 10:08:36 2017 +0800

    Migrate documentation from markdown to asciidoc

[33mcommit 3520462d11563c02dbd6af9d88de0eb02385c2fa[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 10:07:45 2017 +0800

    Modify DeveloperGuide.adoc to use appendix styles and list continuation

[33mcommit 16e7ada8773c884ac90320a1b0ac2266648f67ab[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 16:10:46 2017 +0800

    Add idseparator: '-' attribute to build.gradle
    
    Internal cross references with hyphens do not work in HTML. E.g.
    link:#common-classes in DeveloperGuide.adoc.
    
    Let's add this attribute so that the links will work in HTML.

[33mcommit a37629cf4c31f6783ffefbb4cd85bbcf3bc0f016[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon May 15 13:51:14 2017 +0800

    Replace asserts with proper exceptions for parameter validation
    
    Parameter validation is done by using asserts, and throws AssertionError
    when validation fails.
    
    Asserts may not always be enabled. Furthermore, specific exceptions
    such as NullPointerException should be thrown to make the error more
    explicit.
    
    Let's replace the asserts with requireNonNull() and checkArgument(),
    which throws an appropriate exception when validation fails.

[33mcommit 44072296483d8f335468be1c9590723cc7bc8088[m
Author: limmlingg <limmlingg@gmail.com>
Date:   Tue May 30 10:04:36 2017 +0800

    Modify DeveloperGuide.adoc to use smart links
    
    When linking to other asciidoctor documents, we use the extension .adoc.
    
    The extensions remain unchanged even when exporting to HTML.
    
    Let's fix this by using smart links, such that asciidoctor will change
    to the correct extension .html when exporting to HTML.

[33mcommit cfc8ecc72a73a989ecc58427e6ddd1c564361408[m
Merge: 015b57d6 3b626bba
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon May 29 08:53:21 2017 +0800

    [#305] Command parsers: use exceptions for error handling (#333)
    
    All CommandParser#parse(String) return a generic Command type, instead
    of the specific command that they are tasked to parse (for example,
    AddCommand for AddCommandParser).
    
    This is because the methods might also return an IncorrectCommand if it
    encounters a parse error. This causes an unnecessary loss of specificity
    in the return value type if the parsing is successful (e.g. receiving a
    Command object instead of an AddCommand object), and in the error info
    if the parsing failed (e.g. receiving an IncorrectCommand instead of a
    specific Exception object containing the exact stack trace).
    
    Let's change all CommandParser#parse(String) methods to return their
    specific command type, and throw a ParseErrorException instead when
    encountering an error, to allow the caller to deal with it.

[33mcommit 3b626bba65bb34231fe2e11ab5504073efddde13[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 23 09:38:26 2017 +0800

    Remove IncorrectCommand
    
    Parser throws a ParseException instead of IncorrectCommand when
    encountering an unrecognized command.
    
    IncorrectCommand is no longer in use anywhere.
    
    Let's remove IncorrectCommand.

[33mcommit 64eab5d850926fba45d8f3a759adbd9410119f3e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Mar 11 10:22:29 2017 +0800

    Change command parsers' parse(String) return type to be more specific
    
    All command parsers' parse(String) methods return the base Command
    type, instead of the specific command that they are tasked to parse
    (for example, AddCommand for AddCommandParser).
    
    Let's change all command parsers' parse(String)'s return type from the
    generic Command type to their specific command type that they are
    tasked to parse.

[33mcommit 621ede40779fe60058157430eef0db3e54bfa1aa[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Mar 11 10:15:25 2017 +0800

    Modify all command parsers' parse(String) to throw ParseException
    
    All command parsers return an IncorrectCommand object when they
    encounter a parse error.
    
    The parse error can be made more visible if an exception was thrown
    instead. Otherwise, the caller is unable to handle any parsing errors
    such as IllegalValueException. Context information, such as the
    stacktrace, is also lost when wrapping the exception instead of
    returning it directly.
    
    Let's change all command parsers' parse(String) methods such that they
    throw ParseException instead of returning an IncorrectCommand object.

[33mcommit 015b57d6ae29042e4281de6a644a0a2f950f418a[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Fri May 26 15:10:08 2017 +0800

    [#401] Create unit tests for ParserUtil#parseIndex() (#423)

[33mcommit cebed7329394a82a16c76add783ef9a677076a88[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri May 26 15:07:05 2017 +0800

    [#433] GuiHandle#setTextField(String, String) should call Gui methods on JavaFx threads (#434)
    
    On some computers, GuiHandle#setTextField() throws an
    IllegalStateException, indicating that the methods called in
    GuiHandle#setTextField() should have been executed on the JavaFx Gui
    thread.
    
    Let's fix GuiHandle#setTextField() to call Gui modification methods
    on the JavaFx Gui thread.

[33mcommit 46e86ee601fb7d38a55e58245a0033ac796ae408[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Fri May 26 11:55:13 2017 +0800

    Migrate UserGuide.md from markdown to asciidoc (#435)

[33mcommit 6af393367c998910784881146ffa049725bc31bd[m
Merge: d0272c5c 9e158dd1
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Wed May 24 08:52:56 2017 +0800

    [#311] AddressBook#addPerson() does not copy the Person (#313)
    
    When accepting a new Person, both UniquePersonList and AddressBook
    insert the original object, rather than a copy of the object.
    
    Outside classes are able to indirectly modify the list by using the
    same object after inserting them into the list. This is undesirable as
    UniquePersonList and AddressBook cannot guarantee that the constraints,
    such as the uniqueness of the list, continue to hold, which results in
    incorrect behavior for both classes.
    
    Let's ensure that UniquePersonList and AddressBook are actually storing
    copies of the Person object, rather than the original object, so that
    outside classes are not able to modify them after it is inserted into
    the list or book.

[33mcommit d0272c5c5f26e83f431872f0c3e33534bfb88741[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Wed May 24 08:51:05 2017 +0800

    Fix broken links to Developer Guide in docs (#432)
    
    Update links to Developer Guide in README.md and LearningOutcomes.md.

[33mcommit cc22ed642b34f15798facec1bddd597aa8c0c395[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Mon May 22 08:33:43 2017 +0800

    [#319] Checkstyle: enforce operators' placement in line wraps (#382)
    
    Our coding standard for Java requires operators' placement in line
    wraps to follow specific rules, such as having assignment operator (=)
    stay attached to the token that precedes it and having the arithmetric
    operator (+) in a new line. These rules are not enforced by
    checkstyle.
    
    Let's teach Checkstyle to be stricter about line wrapping around more
    symbols by adding the relevant OperatorWrap rules.

[33mcommit a74cc95881c51ec7c7e958c6f150ee0a1daa4c68[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Mon May 22 08:21:39 2017 +0800

    [#401] Add unit tests for ParserUtil#parseX() (#425)

[33mcommit e209ff6d341ececf145ad4f5b58908ce3a49ce6b[m
Merge: 5b19eb46 b918c91b
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon May 22 08:13:18 2017 +0800

    [#254] Create Parser Tests for EditCommand (#394)

[33mcommit 5b19eb462c7b62e2fbed1d2e6697894111125029[m
Merge: 1af6587f dbfa20f3
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri May 19 14:01:25 2017 +0800

    [#309] Use StackPanes for holding UiParts (#405)
    
    MainWindow uses AnchorPanes as a placeholder for UiParts. AnchorPane's
    default behavior does not make its children fill up the entire space,
    thus we have to manually call FxViewUtil#applyAnchorBoundaryParameters()
    to do so.
    
    StackPane's default behavior fills up the entire placeholder space
    automatically.
    
    Let's
      - replace the usage of AnchorPane with StackPane.
      - remove FxViewUtil#applyAnchorBoundaryParameters(), since we no
        longer have to manually fill up the entire space.

[33mcommit 1af6587f5bd9e70c2b7fba48d587f843b2250af1[m
Author: Miao Ling <limmlingg@gmail.com>
Date:   Fri May 19 13:51:40 2017 +0800

    [#271] Migrate DeveloperGuide.md from markdown to asciidoc (#408)

[33mcommit 93df19ad3c9a46c6983b67d0a3af307d8f4db62a[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri May 19 13:44:57 2017 +0800

    [#406] Teach Parser to enforce spaces between arguments (#409)
    
    Our parser does not enforce a space between consecutive arguments.
    For example: “add ABC a/ValidAddressp/61356436e/abc@email.com
    t/someTag” is able to create a correct person.
    
    This is undesirable because,
    1. it makes the command harder to read (prefixes are harder to detect
    by the naked eye).
    2. it limits our choices for future implementations of prefixes.
    For example, if we want to create a new prefix sp/, the input above
    would be ambiguous because we do not know whether the user meant
    sp/ or p/.
    
    Let’s teach Parser to enforce spaces between fields.

[33mcommit 8045c62c5c2e17e9b6d22b85f5d5a6e5a12361a0[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri May 19 13:37:43 2017 +0800

    [#428] Fix minor bug in EditCommandIntegrationTest (#429)
    
    The expectedFilteredList is backed by the internal list of model's
    addressBook. This makes the equals comparison always returning true
    because both lists are pointing to the same list.
    
    Let’s make expectedFilteredList to be backed by the expectedAddressBook
    instead.

[33mcommit 9e158dd1e06328b723edeeded077f15019ac39d0[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Mar 2 13:50:58 2017 +0800

    Change Model#addPerson(...) signature to ReadOnlyPerson
    
    Model#addPerson(Person) accepts a mutable Person object. Outside
    classes are able to modify the Person object after inserting it into
    the model.
    
    Only Model should be able to modify the Person objects that it owns.
    
    Let's change addPerson()'s signature from Person to ReadOnlyPerson, so
    that the internal Person list is forced to duplicate this object,
    satisfying our new constraint.

[33mcommit 1d9a07fd3469504f545ccc4492b2d810994137d2[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Mar 2 13:36:25 2017 +0800

    Change AddressBook#addPerson(...) signature to ReadOnlyPerson
    
    AddressBook#addPerson(Person) accepts a mutable Person object. Outside
    classes are able to modify the Person object after inserting it into
    the address book.
    
    Only AddressBook should be able to modify the Person objects that it owns.
    
    Let's change addPerson()'s signature from Person to ReadOnlyPerson, so
    that the internal Person list is forced to duplicate this object,
    satisfying our new constraint.

[33mcommit ad970d90a8c4a9e81680c053e033f5f2255f459d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Mar 2 12:44:20 2017 +0800

    Change UniquePersonList#add(...) signature to ReadOnlyPerson
    
    UniquePersonList#add(Person) directly inserts the input Person object
    to the internal list.
    
    This makes it possible for outside classes to indirectly modify Person
    objects in the list, making the list unable to guarantee its constraint
    of uniqueness for each Person.
    
    Let's change the signature of UniquePersonList#add(...) from Person to
    ReadOnlyPerson, so that the inner logic is forced to store a copy of
    the Person object, preventing outside classes from modifying objects
    already inserted into the list and violating the list's constraint.

[33mcommit b918c91b5d725e7331a485bcb112a1dbcf8e3eda[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Thu May 4 07:22:11 2017 +0800

    Create tests for EditCommandParser

[33mcommit 780ad50aee0de04279d98d3798c3b65c2e2cb8e1[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon May 8 13:35:43 2017 +0800

    Add EditCommand#equals(Object)

[33mcommit b98082bc7e98040af92474f37cf55d504c0cf03d[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Fri May 5 14:00:03 2017 +0800

    Add EditPersonDescriptor#equals(Object)

[33mcommit ef06553753b5073c012ccac9ab1082c46b9d0f51[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Wed May 17 08:05:18 2017 +0800

    [#411] UniqueTagList: Add assertions to check all tags are unique (#412)
    
    The uniqueness of all the tags in UniqueTagList is not being
    checked after the call of every public method in UniqueTagList.
    As such, we do not know whether the invariant is maintained at the:
        1. Start of each method that modifies UniqueTagList.
        2. End of each method that reads from UniqueTagList.
    
    Let's add assertions for every method to ensure that UniqueTagList's
    invariant is maintained after each operation.

[33mcommit dbfa20f3050d489caa469ffa3d8e4d5c1ded7cf1[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon May 15 12:33:54 2017 +0800

    Combine .anchor-pane-with-border and .stack-pane-with-border
    
    The design of panes with border are the same regardless of whether it is
    an AnchorPane or a StackPane.
    
    Let's combine .anchor-pane-with-border and .stack-pane-with-border to
    just .pane-with-border.

[33mcommit cf98b04511de0ed33f94d91ba913b5de03d8b65b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 11:10:07 2017 +0800

    Remove FxViewUtil#applyAnchorBoundaryParameters()
    
    FxViewUtil#applyAnchorBoundaryParameters() is no longer used anywhere
    in the codebase.
    
    Let's remove it.

[33mcommit 54bff95d0bde03178ca77dec447597d77bc904e2[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 10:46:20 2017 +0800

    Change HelpWindow to use StackPane
    
    HelpWindow uses an AnchorPane to display the help browser. This requires
    manual adjustment of the browser's anchors to fill up the entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().

[33mcommit 6faf8cd4e108d5d78aabc0af4323ba43d785414c[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 10:41:07 2017 +0800

    Change MainWindow's StatusBarFooter to use StackPane
    
    MainWindow uses an AnchorPane as a placeholder for StatusBarFooter. This
    requires manual adjustment of StatusBarFooter's anchors to fill up the
    entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().

[33mcommit c684e8a89a09b3f3daeb4757eea50a6683f7d635[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 10:10:37 2017 +0800

    Change MainWindow's ResultDisplay to use StackPane
    
    MainWindow uses an AnchorPane as a placeholder for ResultDisplay. This
    requires manual adjustment of ResultDisplay's anchors to fill up the
    entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().
    
    The ResultDisplay is wrapped inside another AnchorPane. It is
    redundant. Remove it.

[33mcommit eb2ee4176aa6da8139f8c6352199660f89c5560b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 09:55:34 2017 +0800

    Change MainWindow's PersonListPanel to use StackPane
    
    MainWindow uses an AnchorPane as a placeholder for PersonListPanel. This
    requires manual adjustment of PersonListPanel's anchors to fill up the
    entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().

[33mcommit 0a1c3a99079f99c314c35c403b1c0f9b681c1964[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 09:46:56 2017 +0800

    Change MainWindow's CommandBox to use StackPane
    
    MainWindow uses an AnchorPane as a placeholder for CommandBox. This
    requires manual adjustment of CommandBox's anchors to fill up the
    entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().

[33mcommit b8c4d5b4badc939ab9599acae8db10c40e037269[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue May 9 09:30:40 2017 +0800

    Change MainWindow's BrowserPanel to use StackPane
    
    MainWindow uses an AnchorPane as a placeholder for BrowserPanel. This
    requires manual adjustment of BrowserPanel's anchors to fill up the
    entire space.
    
    StackPane has this behavior by default.
    
    Let's change the AnchorPane to StackPane so that we do not need to do
    the manual adjustment using FxViewUtil#applyAnchorBoundaryParameters().

[33mcommit 0f2cb22b3dbf7cdc592e2b58261728241f4d4166[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon May 15 08:15:22 2017 +0800

    [#303] Modify ParserUtil#parseIndex(String) to throw IllegalValueException (#403)
    
    ParserUtil#parseIndex(String) returns an empty Optional if the input is
    not a positive unsigned integer.
    
    Failing silently prevent callers from distinguishing between missing
    input vs wrong input format.
    
    Let's modify ParserUtil#parseIndex(String) to throw
    IllegalValueException when it receives an input that is not a positive
    unsigned integer.

[33mcommit 05a676443ef9016e1c6975b06d6fb322b43b4dc2[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri May 12 10:27:12 2017 +0800

    [#172] Add unit tests for AddCommand (#273)
    
    AddCommand does not have unit tests.
    
    Let's write AddCommandTest (unit test version), which injects a model
    stub into the command, so that the behavior of AddCommand can be
    tested in isolation.
    
    To implement the stubs, we need to be able to throw
    DuplicatePersonException, so make it public.

[33mcommit 84ae299cfdff2ffb4b528ece881e3c23b0a66535[m
Merge: d0cf1289 ad6d5bd7
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Fri May 12 09:46:11 2017 +0800

    [#376] Remove repeated usage of string literals (#377)
    
    The repeated usage of string literals violates the DRY principle
    (e.g. "add" for the add command word, "p/" for phone prefix).
    
    Let's replace these string literals with the constants defined for
    them (e.g. AddCommand.COMMAND_WORD for "add",
    CliSyntax.PREFIX_PHONE for "p/").

[33mcommit d0cf1289ffbaa80838c3e0b130aebe995d19035d[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Fri May 12 09:02:04 2017 +0800

    Replace LogicManagerTest#generatePersonWithName() with PersonBuilder (#391)
    
    LogicManagerTest#generatePersonWithName(String) creates a person with
    default values, except for the name. However, the same can be achieved
    using PersonBuilder. This makes the method redundant.
    
    Let’s change the creation of these Person objects to use PersonBuilder
    instead.

[33mcommit ad6d5bd714fd1d059a7f9523c53dde2cc23951e5[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Tue May 9 19:54:18 2017 +0800

    Replace repeated usage of string literals with CliSyntax constants
    
    We use string literals "p/", "e/", "a/", "t/" for prefixes in various
    places.
    
    However, such repeated use of string literals (e.g. "p/") violates
    the DRY principle because the string literal for each prefix is already
    defined in CliSyntax class (e.g. PREFIX_PHONE for "p/").
    
    Let's replace these string literals with CliSyntax constants.

[33mcommit db4541a86179c796c8ff0c5fa0ca974adcded350[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Mon May 8 21:08:19 2017 +0800

    Prefix: add toString()
    
    Concatenating a command prefix when constructing a command string
    requires the use of Prefix#getPrefix().
    e.g. PREFIX_PHONE.getPrefix() + "911"
    
    As Prefix encapsulates the prefix string that is also the return value
    of getPrefix(), overriding toString() in Prefix class to return the
    result of getPrefix() allows us to omit getPrefix() when concatenating
    prefixes to strings. e.g. PREFIX_PHONE + "911" would return the same
    value as PREFIX_PHONE.getPrefix() + "911".
    
    Let's add the toString() method to the Prefix class.

[33mcommit 095c4198c0df4de21bcf341572e5620266daedca[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Wed Mar 29 14:36:10 2017 +0800

    Replace repeated usage of string literals with COMMAND_WORD constants
    
    We use string literals (e.g. "add", "edit") in our tests.
    
    However, such repeated use of command word string literals (e.g. "add")
    violates the DRY principle because the string literal for each command
    is already defined in the respective *Command classes
    (e.g. AddCommand.COMMAND_WORD is defined as "add").
    
    Let's replace these string literals with COMMAND_WORD constants.

[33mcommit 8e4d306e4cc579b4e967b267a3c41aafcedbc700[m
Author: Ka Yi <chua.kayi@yahoo.com.sg>
Date:   Sat May 6 23:21:49 2017 +0800

    [#270] Set up workflow for asciidocs (#302)
    
    As discussed in fae87009249fc5a0084ea0d4fd28d1d8bf312921, we are
    migrating the documentation from GitHub Flavored Markdown to AsciiDoc.
    
    Let's teach Travis to generate HTML files with Asciidoctor using the
    AsciiDoc files inside the 'docs' directory. Generated files are then
    pushed to gh-pages branch for commits to the master branch.
    
    For the deploy script to work, maintainers will then have to:
     1. Create a GitHub machine account and grant it access to this repo
     2. Generate an access token and put it as an encrypted environment
         variable in Travis settings.
    
    We use personal access tokens instead of SSH deploy keys to grant
    Travis push access to the repo as they can be set up easily via GitHub's
    and Travis' websites, unlike SSH keys which require additional tools.
    
    However, personal access tokens grant access to all of a user's repos.
    If a user's access token is used, others with write access to the repo
    may change the deploy script to print the token and hence gain access to
    the user's repos. Thus, we create a separate GitHub user account
    (machine account) to handle deployment. This way, only the repo is put
    at risk in the case of a leak.
    
    Asciidoctor suggests using the Gradle Git Plugin to publish files to
    gh-pages[1]. However, setting up is more complicated and less
    customization is allowed.
    
    Travis also supports GitHub Pages Deployment[2]. However, it does not
    maintain history for generated files, storing only the most recent
    version, and the commit message cannot be customised to show which
    commit the files are generated from. This can be problematic if
    deployment fails as it is harder to identify which version of
    documentation is being deployed.
    
    In deploy_github_pages.sh, we use git credentials to store the personal
    access token instead of adding the token to the repo url. GitHub prints
    the repo url when there is an error for certain commands, so using
    credentials ensures that the token is not printed to Travis logs.
    
    [1] http://asciidoctor.github.io/asciidoctor-gradle-examples/#_publish_to_github_pages_example
    [2] https://docs.travis-ci.com/user/deployment/pages/

[33mcommit a5d9fcc4cce6b798663a565091e38782d140b7e7[m
Author: Zhi Yuan <yongzhiyuan@u.nus.edu>
Date:   Thu May 4 13:53:13 2017 +0800

    [#286] Update Phone's regex to reject numbers shorter than 3 digits (#383)
    
    The shortest known phone numbers are 3 digits (e.g. emergency numbers
    such as 911 and 999) but the regex used to validate phone numbers
    accepts numbers shorter than 3 digits.
    
    Let’s change the regex to reject numbers shorter than 3 digits.

[33mcommit dc9fe96a38a2b5f9bb5bb4c05c3ff1db47b1effd[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Fri Apr 14 15:45:15 2017 +0800

    [#319] Checkstyle: enforce separators' placement in line wraps (#368)
    
    Our coding standard for Java requires separators' placement in line
    wraps to follow specific rules, such as having comma (,) stay attached
    to the token that precedes it and having the dot (.) in a new line.
    These rules are not enforced by checkstyle.
    
    Let's teach Checkstyle to be stricter about line wrapping around some
    symbols by adding the relevant SeparatorWrap rules.

[33mcommit c730a6805dd0724cb8fb57ca14a2248df32071b2[m
Merge: 3e7451ed b8be1a36
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Apr 14 15:22:26 2017 +0800

    [#254] Add Integration Tests for EditCommand (#317)
    
    There are no integration tests for the EditCommand.
    
    Let's add an EditCommandIntegrationTest to test code paths
    in the EditCommand and verify EditCommand's integration
    with the Model.

[33mcommit b8be1a36f6bc2da092ab4bccc8c7f199bd16d935[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Thu Apr 6 04:07:30 2017 +0800

    Add EditCommandIntegrationTest
    
    There are no integration tests for EditCommand.
    
    Let's add an EditCommandIntegrationTest to test code paths
    in the EditCommand and verify EditCommand's integration
    with the Model.

[33mcommit 81ee71e821cadb832cb9a1403ac2050692d0bbe5[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Thu Apr 6 04:07:06 2017 +0800

    PersonUtil: add getEditCommand(int, Person)
    
    Let's add a utility method for creating the command string for
    editing the details of a person in the address book.

[33mcommit 3e7451edc6f148feacd107828732a4856a79f7e5[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Thu Apr 13 11:07:47 2017 +0800

    [#319] Checkstyle: enforce final keyword or encapsulation for class variables (#364)
    
    Our coding standard for Java does not allow class variables to be
    declared public. This rule is not enforced by checkstyle.
    
    By not enforcing the rule, it violates the concept of Java information
    hiding and encapsulation. However, there is one exception to this
    rule, which is when the class is essentially a data structure, with no
    behaviour. In such cases the variables are required to use the
    final keyword to minimize unintended modifications to those
    variables by clients.
    
    Let's teach Checkstyle to enforce the above rule and its exception by
    adding the VisibilityModifier rule.

[33mcommit fa5b6d68d02e98d8b1c30dfb4c50185eb7b27389[m
Author: Lim Shun Xian <shouyu2@hotmail.com>
Date:   Thu Apr 13 10:54:39 2017 +0800

    [#293] Implement a IndexUtil#oneToZeroIndex() abstraction (#331)
    
    "i - 1" is sometimes used to convert 'i' from a one-based index to a
    zero-based index.
    
    Comments have to be added to describe the purpose of "i - 1", as it is
    not obvious whether we are taking the item before 'i', or whether we are
    converting 'i' from a one-based index into a zero-based index, which
    decreases code readability.
    
    Let's implement a IndexUtil#oneToZeroIndex(int) method which returns the
    zero-based index given the one-based index as input.
    
    The use of IndexUtil.oneToZeroIndex(int) removes the need for a comment
    when we convert 'i' from a one-based index to a zero-based index.

[33mcommit 2c3390b1442d4fd7cc8484e339e9ffa3aed3b981[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Fri Apr 7 22:41:53 2017 +0800

    [#319] Checkstyle: require default branch in switch statements (#378)
    
    Our coding standard requires each switch statement to include a
    default branch, even if it contains no code. This rule ensures that
    all possible cases are covered and also to protect the code against
    later changes, e.g. introduction of new types in an enumeration type.
    This rule is not enforced by checkstyle.
    
    Let's teach Checkstyle to enforce the above rule.

[33mcommit 12c4294cfc5c7ac4294223ac647d25878caad3b6[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Fri Apr 7 22:22:12 2017 +0800

    [#319] Checkstyle: enforce @clause order (#365)
    
    Our coding standard requires @clauses in Javadoc comments
    to be in the order:
    @author, @version, @param, @return, @throws, @exception, @see,
    @since, @serial, @serialField, @serialData, @deprecated
    This rule is not enforced by checkstyle.
    
    Keeping the order of at-clauses organized results in the javadocs
    being more readable in code form. This is important as this type of
    documentation is typically read more often inside the code than it is
    as processed text.
    
    Let's fix this by adding AtclauseOrder rule. It checks that the order
    of @clauses follows the tagOrder property value order.

[33mcommit 583d3085055991471563d0d348c5cea96491fe6f[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Fri Apr 7 22:10:28 2017 +0800

    [#319] Checkstyle: prevent upper case abbreviations in names (#360)
    
    Upper case abbreviations in names (e.g. HTML in exportHTMLSource)
    are not allowed by our coding standard (it should be exportHtmlSource
    instead) but that rule is not enforced by checkstyle .
    
    Let's teach checkstyle to reject upper case abbreviations in names
    by adding AbbreviationAsWordInName rule which rejects
    consecutive upper case letters in identifier names.
    
    In cases where there are consecutive capital letters due to word
    boundaries around single-lettered words, such as in
    “canIHasReview”, we can make use of the allowedAbbreviations property to
    whitelist them. We are not relaxing the allowedAbbreviationLength to >1
    as single-lettered words are uncommon in identifier names, and
    whitelisting any legitimate cases is a suitable solution.

[33mcommit 6951a73c502185c54370c16fde85605743899d55[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Wed Apr 5 20:12:52 2017 +0800

    [#371] Remove uses of real domain names (#375)
    
    Potentially genuine email addresses are used in our documentation and
    testing code, e.g. bobby@gmail.com, hans@google.com, alice@yahoo.com.
    
    We don't want to help spam bots send spam to them.
    
    Let's change these potentially genuine email address to @example.com.

[33mcommit 8f4b6b4bb819c670f9039374e55781a848783676[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Wed Apr 5 19:40:23 2017 +0800

    [#319] Checkstyle: disallow single line conditional statements (#362)
    
    Checkstyle allows single line conditionals like this:
    
    if(something) foo();
    
    Such statements can potentially introduce bugs like the code
    below where it appears like bar() is attached to the condition
    but is not:
    
    if(something) foo();
        bar();
    
    It can also cause some code coverage checkers to produce
    inaccurate coverage statistics as it goes by the lines covered.
    
    Let's disallow single line conditionals by removing the allowSingleLineStatement
    property, which defaults to false.

[33mcommit d010443ebdd238e46d1abda1a59718027c7f473b[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Wed Apr 5 17:53:46 2017 +0800

    [#310] Remove TestPerson (#373)
    
    TestPerson is used in testing to create a Person without filling in
    all the fields.
    
    However, although it simplifies construction of a Person, it also
    violates LSP because TestPerson breaks ReadOnlyPerson's contract.
    For example, its getName() method can possibly return null, and
    its getTags() method doesn't return a deep copy.
    
    Let's remove TestPerson and use Person instead. With default fields,
    it's still easy to construct a Person using PersonBuilder.
    
    Let's also add PersonUtil to hold utility methods for Person, like
    getAddCommand(Person).

[33mcommit aa9b3b392f5264260d60403c0c9715171692b1d4[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Mon Apr 3 23:50:22 2017 +0800

    [#319] Checkstyle: fix MethodName supplied expression (#366)
    
    Test case method names are expected to follow the format
    featureBeingTested_scenario_expectedResult.
    
    However, following aspects of the above naming convention
    are not enforced by checkstyle:
    1. only one consecutive underscore between two parts
    2. no more than 2 underscores
    3. each part should of the name should start with a lower case letter
    4. do not end with a symbol
    
    Let's update the relevant regex in the checkstyle config file
    to enforce the 4 aspects mentioned above.

[33mcommit 2b73f71fb364eda4be9e0daa1e9c372a46c5a3be[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Mon Apr 3 23:13:42 2017 +0800

    [#319] Checkstyle: add EmptyCatchBlock rule (#369)
    
    Our coding standard requires an empty catch block to have at least
    an explanatory comment. This rule is not enforced by checkstyle.
    
    Let's add EmptyCatchBlock rule to reject empty catch blocks that
    don't have any comments. While this does not ensure that the
    comment inside the catch block sufficiently explains the reason
    for the empty catch block, at least it helps to eliminate cases
    where there is no comment at all.

[33mcommit 3fd19d0dc05ea74d872625c86adcf096658aa33b[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Mon Apr 3 22:55:42 2017 +0800

    [#319] Checkstyle: add CommentsIndentation rule (#361)
    
    Our coding standard for Java requires a comment to be indented to
    match the indentation of the code it describes. This rule is not
    enforced by checkstyle.
    
    Let's enforce this rule by adding the checkstyle rule CommentsIndentation.

[33mcommit 22397f33a8fc62a7ffd872786333fec99b756a14[m
Merge: 07367fab b91565e3
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Apr 3 22:14:38 2017 +0800

    [#231] Simplify FXML files (#356)
    
    The FXML files are deeply nested with unnecessary parent elements.
    There are also multiple conflicting coding styles that exists within
    the same file.
    
    This makes the files hard to read and navigate. Furthermore, the
    differing coding styles in the same file makes the whole file
    inconsistent.
    
    Let's modify the FXML files as follows:
        * Change indentations to 2 spaces in all FXML files as these files
          tends to have deep nesting
        * Remove all star imports and reorder the rest in alphabetical
          order in all FXML files
        * Remove unnecessary parent elements to reduce the nesting in
          all FXML files
        * Remove all unnecessary CSS style sheet imports except those
          in MainWindow.fxml
        * Wrap long attributes into multiple lines and add white spaces
          in MainWindow.fxml to improve readability
        * Remove unneeded minwidth attribute in StatusBarFooter.fxml
        * Remove unnecessary HBox element in PersonListCard.fxml
        * Standardize inset attributes order declarations in all FXML files
        * Add a space before closing slash in self-closing tags in all FXML files
        * Standardize height and width declarations in all FXML files to use
          only integer values

[33mcommit b91565e39e0a18b3f5634912c1849a6aa599f4a6[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Tue Mar 28 10:10:09 2017 +0800

    Standardize height and width declarations in all FXML files
    
    The various FXML elements declares their height and width using
    both integer and double values.
    
    Let's standardize all height and width declarations to use integer
    values

[33mcommit 1796655b975ea47319dbe96f10661b720dd5a99c[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Tue Mar 28 10:03:32 2017 +0800

    Standardize self closing tags in all FXML files
    
    The various FXML files contains self closing tags that are closed by
    appending a slash at the end of the element. Some of these tags prepend
    a space before the slash while others do not.
    
    Let's standardize all self closing tags to prepend a space before the
    closing slash.

[33mcommit 8f4b7a06d8d784b64246fd03f4d1eb23fced8e5e[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Mon Mar 27 17:40:03 2017 +0800

    Standardize declaration order of insets in all FXML files
    
    The various FXML files use insets declarations in order to add
    inner padding within elements. The declaration is not consistent as
    some elements declare the padding size using integer values
    while others use declare using double values.
    
    Let's standardize all insets declarations as follows:
        * Insets should declare paddings using the CSS convention
          (i.e top right bottom left)
        * All padding sizes are declared in integer values.

[33mcommit 098c151f88a6538e5f41e3301e9ee9ede82c9524[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:57:57 2017 +0800

    PersonListCard.fxml: Remove unneeded child HBox
    
    The id and name label in PersonListCard is wrapped around two parent
    HBoxes.
    
    This is not necessary.
    
    Let's remove the unneeded child HBox.

[33mcommit 3c21984b8a7cf254ed29b3a76794310502a78a4b[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:55:14 2017 +0800

    StatusBarFooter.fxml: Remove unneeded attribute
    
    Both StatusBar elements sets their minimum width to zero.
    
    This is unnecessary as both status bars will have some content in
    runtime.
    
    Let's remove this unneeded attribute.

[33mcommit 1919a0ab3a347e3a825ac4a83680d51edf767f8b[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:52:12 2017 +0800

    MainWindow.fxml: Refactor to improve readability
    
    MainWindow consists of multiple placeholders contained in a VBox all
    clumped together. Furthermore, some elements have multiple attributes,
    causing it to exceed the character limit for a line.
    
    This makes the file very hard to read.
    
    Lets refactor MainWindow.fxml as follows:
        * Add white spaces between sibling elements to improve
          readability.
        * Wrap long elements to a new line.

[33mcommit 38a3cb6997dff47e8a6280405f9cc0539e7ffa75[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:24:30 2017 +0800

    Remove stylesheets imports in UiPart's FXML files
    
    The various UiParts FXML files import the same DarkTheme and
    extension CSS files.
    
    This is not necessary as MainWindow loads all UiParts by adding their
    various components as a child of the AnchorPane placeholders. Since
    the AnchorPane placeholder is part of MainWindow, all its children
    will also be styled by the stylesheets declared in MainWindow.
    
    Let's remove the stylesheets declarations from the various UiParts FXML
    files.

[33mcommit 895f252667f346a88db65a7d5fb0e22c9d138f25[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:21:23 2017 +0800

    Remove unnecessary children tags in FXML files
    
    Some FXML files wrap the contents between a pair of children tags.
    
    This is unnecessary in JavaFX as all panes has a default property of
    children.
    
    Let's remove these unnecessary children tags.

[33mcommit f8ae1f0efc2e6724be643b3c003d6e6bd3bd8e10[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Mar 25 11:15:26 2017 +0800

    Refactor imports in all FXML files
    
    The imports in the FXML files are arranged in a haphazard order and
    contain star imports.
    
    This is not compliant with the coding style used in the rest of the
    project that states:
        * Imports should be arranged in alphabetical order.
        * Avoid using star imports as they load more modules than necessary.
    
    Let's refactor the imports in all FXML files to fix the two problems
    given above.

[33mcommit 5bc7b615fe1fbde08c06822bcf439a864b124311[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sun Apr 2 20:25:45 2017 +0800

    Change indentation to 2 spaces in all FXML files
    
    FXML files tend to have rather deep nesting and arrowhead style code.
    Having 4 spaces as indentation makes the code harder to read as
    most elements are aligned to the right.
    
    Let's modify the FXML files to use 2 spaces instead.

[33mcommit 07367fab5054768f3243fb55eba1367d3d67a39b[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Sat Apr 1 14:30:20 2017 +0800

    [#319] Checkstyle: add DeclarationOrder rule (#367)
    
    Checkstyle does not enforce the method/variable declaration orders
    in Classes and Interfaces as specified in our coding standard.
    
    Let's add the checkstyle DeclarationOrder rule to enforce the
    declaration order.

[33mcommit 3ceb58957fcd3268758b1b6b98932f536de3e9e8[m
Author: Eugene Peh <eugenepeh@users.noreply.github.com>
Date:   Sat Apr 1 14:19:35 2017 +0800

    [#319] Checkstyle: add ArrayTypeStyle rule  (#363)
    
    We allow array type declarations in both Java and C styles, e.g.
    Java style: public static void main(String[] args)
    C style:    public static void main(String args[])
    
    However, Java style is preferred and we should only use this style
    in our project.
    
    Let's add ArrayTypeStyle rule to ensure that only the Java style
    of array type declarations is used.

[33mcommit 3291675213b3a08db9653da0722ea8fd374074dc[m
Merge: a61db1bf d79c47f6
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Mar 31 18:14:02 2017 +0800

    [#306] Move all parsing from AddCommand to AddCommandParser (#315)
    
    Parsing the add command string into a Person object
    is split between the AddCommandParser and the AddCommand.
    
    It is more cohesive if the said parsing is done entirely
    by the AddCommandParser itself.
    
    Let's modify the construction of add command as follows:
    * Add an explicit check for empty prefixes and remove the use of
      NoSuchElementException to detect missing prefixes.
    * Make AddCommandParser do the parsing and create a
      fully parsed Person object.
    * Make AddCommand's constructor accept a fully parsed
      ReadOnlyPerson.

[33mcommit a61db1bf27f62cc549eb79be0a4598f2f1994b9b[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Wed Mar 29 19:52:08 2017 +0800

    [#342] Travis CI: cache dependencies (#347)
    
    Gradle dependencies are not cached in Travis builds.
    
    Consequently, the dependencies are re-downloaded in every build.
    
    Let's teach Travis to cache Gradle dependencies using the recommended
    configurations from Travis CI documentation [1].
    
    In our experiments, when cache is not enabled, it takes 26.68 seconds
    to run Gradle assemble task, which includes downloading Gradle and the
    dependencies. When cache is enabled, Travis will tar up all the cached
    directories and upload them to S3. So the cache is not network-local,
    and the download time will be bound to network bandwidth and DNS
    resolutions for S3. In the experiment, it takes 5.83 seconds to pull
    down the cache from S3 and another 10.75 seconds to finish the assemble
    task. At the end of the build, Travis will also check whether the cache
    is updated. If it is, Travis will create a new archive and upload it to
    S3. This check adds another 1.48 seconds overhead even when the cache
    is not updated. So a rough estimate is that the build time will be
    reduced by around 10 seconds when cache is enabled. Reasons for the
    shorter build time now may be because Travis downloads the dependencies
    from S3 in bulk instead of making multiple requests (one for each
    dependency).
    
    For more details on how caching works in Travis, please refer to [2].
    
    [1] https://docs.travis-ci.com/user/languages/java/#Caching
    [2] https://docs.travis-ci.com/user/caching/#How-does-caching-work

[33mcommit d79c47f6bf119284dfa67e9d3a96bc826a6619e1[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Fri Mar 17 23:17:47 2017 +0800

    Move AddCommand's parsing responsibilities to AddCommandParser
    
    Parsing the add command string into a Person object
    is split between the AddCommandParser and the AddCommand.
    
    It is more cohesive if the said parsing is done entirely
    by the AddCommandParser itself.
    
    Let's modify the construction of the add command as follows:
        * Make AddCommandParser do the parsing and create a
          fully parsed Person object.
        * Make AddCommand's constructor accept a fully parsed
          ReadOnlyPerson.

[33mcommit 6fd7e489d6063a985472c278c3a9808d55c11a8d[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Fri Mar 17 23:15:17 2017 +0800

    Remove the use of exceptions for control flow in AddCommandParser
    
    ArgumentsTokenzier throws a NoSuchElementException if an attempt is
    made to retrieve the value of a prefix that is not present or has an
    empty value. AddCommandParser interprets that exception as an invalid
    add command format. The flow of this check is hard to understand because
    it is embedded in a call to the AddCommand constructor and spills over to
    a catch block.
    
    The code will be easier to understand if there is an explicit prefix
    check before calling the constructor of AddCommand.
    
    Let's add an explicit check for empty prefixes and remove the use of
    NoSuchElementException to detect missing prefixes.

[33mcommit 49075017cc9b788001cbb8d4a410adec18dc8406[m
Merge: 2d93a184 c85f70df
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 29 17:22:58 2017 +0800

    [#291] Make ReadOnlyPerson truly read-only  (#326)
    
    ReadOnlyPerson#getTags() returns a mutable UniqueTagList.
    
    This makes it possible for outside objects to modify the tags of
    ReadOnlyPerson, violating the constraint that it is supposed to be
    readonly.
    
    Let's change ReadOnlyPerson#getTags() to return a Set<Tag>
    created using Collections.unmodifiableSet(Set<T>) so that
    callers are not allowed to modify the Tags returned.

[33mcommit 2d93a1840d522a596e521ffc40034205cd95a4bc[m
Merge: 27cb4621 b3baf264
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 29 17:14:20 2017 +0800

    [#312] ArgumentTokenizer: ensure tokenizing before getting values (#320)
    
    ArgumentTokenizer's tokenized arguments getters can be called before
    arguments have been tokenized with ArgumentTokenizer#tokenize(String).
    
    This is problematic as the getters would return empty Optionals, lists,
    and strings that are indistinguishable from normal empty results.
    
    Let's encapsulate ArgumentTokenizer's getters in ArgumentMultimap such
    that we can enforce the sequence of method calls and simplify
    ArgumentTokenizer's logic.

[33mcommit b3baf264f5b368654e18e774d604629e1ff7007e[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Mon Mar 20 23:17:04 2017 +0800

    ArgumentTokenizer: make tokenize(...) static
    
    Command parsers need to create a new ArgumentTokenizer object before
    they can tokenize an arguments string. During instantiation, the
    ArgumentTokenizer constructor is provided prefixes to be later used when
    ArgumentTokenizer#tokenize(String) is called.
    
    ArgumentTokenizer doesn't have a need to be instantiated before
    tokenizing can be done. The object is not reused to tokenize different
    arguments strings with the same set of prefixes provided during
    instantiation.
    
    Let's make ArgumentTokenizer#tokenize(...) static, which also makes it
    state-independent and thus easier to test.

[33mcommit 0d2e7b284fdd56c4526b7bf097682a7fb789b22f[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Tue Mar 14 18:19:38 2017 +0800

    Update Logic class diagram with ArgumentMultimap class
    
    The Logic class diagram in the developer guide does not reflect the
    updated dependencies between ArgumentTokenizer, ArgumentMultimap,
    Prefix, and command parser classes.
    
    Let's update the Logic class diagram.

[33mcommit 96c1f6221d8f799c26e6f9166eceaf4f8a3c0a89[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Wed Mar 8 22:27:52 2017 +0800

    ArgumentTokenizer: extract getters into ArgumentMultimap class
    
    ArgumentTokenizer's tokenized argument getters can be accessed even
    before ArgumentTokenizer is given arguments to tokenize through
    ArgumentTokenizer#tokenize(String).
    
    This behaviour is problematic as the getters can be called before
    ArgumentTokenizer#tokenize(...), and would return empty optionals,
    lists, and strings that are indistinguishable from normal empty results.
    
    Let's extract the getters into a new ArgumentMultimap class, and have
    ArgumentTokenizer#tokenize(...) return an instance of that class so that
    these getters cannot be accessed before tokenization.

[33mcommit cce7b1a7813517114eb96e2e10ebf6f37b768971[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Sat Mar 11 17:35:18 2017 +0800

    Extract Prefix class out of ArgumentTokenizer class
    
    The Prefix class is a nested class in ArgumentTokenizer.
    
    It is unnecessarily tightly coupled with ArgumentTokenizer. The Prefix
    class is used by other classes that do not need access to the
    ArgumentTokenizer class.
    
    Let's extract the Prefix class into its own class.

[33mcommit 27cb4621dca1bf474b2838352a90873f3fbcb4ef[m
Author: Pierce Anderson Fu <pierceanderson.fu+github@gmail.com>
Date:   Sat Mar 25 16:08:12 2017 +0800

    [#351] Outdated prefixes in ArgumentTokenizer (#352)
    
    The prefixes in ArgumentTokenizer's comments and tests use the old
    prefix format of "/t" instead of the current "t/".
    
    This is inconsistent with our production code.
    
    Let's update the comments and tests to be consistent with the current
    prefix format used in the production code.

[33mcommit 25d03252cfcc4705bb0aa00426298ea2983f3203[m
Author: Jeremy Goh <gohydj2003@gmail.com>
Date:   Sat Mar 25 15:59:06 2017 +0800

    [#336] Cannot add a label called `location` in person card (#339)
    
    JavaFX stores all the fields in a namespace map which maps the name of
    the field to the corresponding JavaFX object. JavaFX also defines some
    keys as a constant - in particular LOCATION_KEY as the String
    "location" and RESOURCES_KEY as the String "resources".
    
    Using any of these strings as a field will result in JavaFX trying to
    cast the field to the type of the corresponding value in the namespace.
    For example, any fields with the name "location" will be cast into an
    URL object which is not allowed.
    
    Let's document these findings down in the controller so as to inform
    other developers of the existence of such keywords.

[33mcommit c85f70dfff7c03cef9db5ba627b1ce0369693f8e[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Mar 11 12:01:57 2017 +0800

    AddCommand: Change constructor to use Set<Tag> instead of UniqueTagList
    
    AddCommand#AddCommand(...) converts the UniqueTagList to a Set<Tag>,
    only to have the Person's constructor converting it back to a
    UniqueTagList.
    
    Let's change AddCommand#AddCommand(...), to accept a Set<Tag> (instead
    of UniqueTagList), so as to avoid converting back and forth.

[33mcommit 21b84ac4aaeafa975d1200251c81ff458bd0680b[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Mar 14 13:32:23 2017 +0800

    Person: Change constructor to take Set<Tag> instead of UniqueTagList
    
    Person#Person(Name, Phone, Email, Address, UniqueTagList) is one of the
    constructors in Person.
    
    Using a UniqueTagList as a parameter type in the constructor is
    inconsistent with the API, as Person#getTags() returns a Set<Tag>. This
    also means that duplicating a Person will require converting its tag
    list from Set<Tag> to UniqueTagList.
    
    Let's change Person#Person(...) to accept Set<Tag> (instead of
    UniqueTagList) so that the constructor is consistent with the API.

[33mcommit 470957d1a16ddc0f4f8945a5d13f5a6846565e42[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Sat Mar 11 11:37:39 2017 +0800

    Person: Change setTags(UniqueTagList) to setTags(Set<Tag>)
    
    The parameter type of Person#setTags(UniqueTagList) is inconsistent
    with the getter counterpart Person#getTags():Set<Tag>. This also means
    that updating a Person's tag list will require converting from Set<Tag>
    to UniqueTagList.
    
    Let's change Person#setTags(UniqueTagList) parameter type to Set<Tag>
    so that the setter is consistent with the getter.

[33mcommit 270cff83b13f670f8aa8a6258771e3522dd2a0bc[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Mar 7 12:55:04 2017 +0800

    Person: Change getTags() to return immutable tag set
    
    Person#getTags() returns a mutable Set<Tag>.
    
    This violates the contract of ReadOnlyPerson#getTags() that
    Person#getTags() implements, which expects an immutable Set<Tag>.
    
    Let's change Person#getTags() to return an immutable Set<Tag>.

[33mcommit ed1a39fe4a858f5682f119cd2fb9ad9cd1e92e00[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Mar 7 11:50:35 2017 +0800

    ReadOnlyPerson: Change ReadOnlyPerson#getTags() to return Set<Tag>
    
    ReadOnlyPerson#getTags() returns a mutable UniqueTagList.
    
    It is better if the method returned an immutable data structure such as
    an immutable Set<Tag>.
    
    As a step towards returning an immutable Set<Tag>, let's change
    ReadOnlyPerson#getTags() to return a Set<Tag> instead of UniqueTagList.

[33mcommit 2749e8512f3b508ecd93e97788c1f0a6a1efb076[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Tue Mar 7 12:50:33 2017 +0800

    PersonBuilder: Fix withTags(...) modifying Person's UniqueTagList
    
    Person's UniqueTagList is supposed to be immutable.
    
    PersonBuilder#withTags(String...) does not obey the immutability
    requirements since it directly modifies the Person's UniqueTagList when
    adding new tags.
    
    Let's teach PersonBuilder#withTags(String...) to supply a correctly
    populated UniqueTagList to the Person#setTags(...) method, instead of
    modifying the UniqueTagList after it has been passed to the
    Person#setTags(...) method.

[33mcommit e1eafd1145cb5fdcc81bbacecf9e5145903b3fe2[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Thu Mar 23 14:10:47 2017 +0800

    [#353] All gui tests are failing  (#354)
    
    We depend on TestFx to run our GUI tests.
    
    However, a recent TestFx update breaks our GUI tests, causing
    all Travis builds to fail.
    
    Let's fix the version of TestFx to the one that was working
    (4.0.5-alpha) as a quick fix.

[33mcommit 4c4e1ed78fd8465512c5b434a3c592da52740717[m
Author: Jeremy Goh <gohydj2003@gmail.com>
Date:   Mon Mar 20 17:18:50 2017 +0800

    [#323] Index is cut off when names are too long for PersonCard (#338)
    
    The id text label does not define its minimum width on the PersonCard
    cell.
    
    As a consequence, a very long person name could cause the number in the
    label to be truncated. This is not desirable as users need to
    know the id number of a person to use some commands (e.g. edit).
    
    Let's set the id label's minimum width to its preferred width so that the
    id label will always be wide enough to display the id number, regardless
    of the length of the person's name.

[33mcommit d87cf6bae333f9254f72cf4fe6242cf2c19a8c6f[m
Author: Ziyang <frank16874@gmail.com>
Date:   Mon Mar 20 17:16:02 2017 +0800

    [#344] Fix typo in LogsCenter#getLogger(...) header comment (#345)

[33mcommit f5efb728b72c193913006d96d4d5591da810af50[m
Merge: 03ed0f65 4ca5e64a
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Mar 19 12:56:43 2017 +0800

    [#340] HTML anchors in UserGuide.md DeveloperGuide.md all broken (#343)

[33mcommit 4ca5e64a6e1bcfcde088e593df7db75503ba8e9d[m
Author: VeryLazyBoy <frank16874@gmail.com>
Date:   Sun Mar 5 23:16:26 2017 +0800

    DeveloperGuide.md: add missing numbers to ToC links

[33mcommit 98ad812f3113e7b4292c5b71ad4cf6de375ae7eb[m
Author: VeryLazyBoy <frank16874@gmail.com>
Date:   Sun Mar 5 23:16:06 2017 +0800

    UserGuide.md: add missing numbers to ToC links

[33mcommit 03ed0f651bfce1eac0e863c61d648fe5672507c7[m
Merge: 1f784b06 3a4617fc
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Mar 18 15:28:34 2017 +0800

    [#213] Allow updating addressBookPath and addressBookName at runtime (#214)
    
    Users are not able to update addressBookName and addressBookPath,
    which are stored in Config, because data in Config are not meant to be
    changed at runtime.
    
    To allow modifying addressBookName and addressBookPath at runtime,
    let's move them from Config to UserPrefs.

[33mcommit 3a4617fc799ffcd33d5b50d46fa13a629f03fb1f[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Sat Feb 25 20:06:07 2017 +0800

    Move addressBookFilePath and addressBookName from Config to UserPrefs
    
    addressBookFilePath and addressBookName are stored in Config, which is
    meant to represent system configuration and should be read-only.
    
    That means we should not update addressBookFilePath and addressBookName
    at runtime. However, this creates problems if we want to allow users to
    change the address book file path, or choose a different name for the
    address book.
    
    Thus these two pieces of info should be kept in UserPrefs instead,
    because it is meant for such user preference settings, and can be
    easily updated at runtime.
    
    Let's move addressBookFilePath and addressBookName from Config to
    UserPrefs.

[33mcommit 535ed3a77aac64ccde8a5ad6e10752b322ef50ec[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Sat Feb 25 19:59:39 2017 +0800

    StorageManager: remove constructor StorageManager(String, String)
    
    The constructor StorageManager(String, String) creates two objects,
    namely XmlAddressBookStorage and JsonUserPrefsStorage inside itself.
    
    However, this reduces testability, as a constructor should be assigning
    dependencies, rather than creating them.
    
    Let's remove this constructor, so that callers have to create the two
    storage objects themselves and construct StorageManager using the other
    constructor StorageManager(AddressBookStorage, UserPrefStorage).

[33mcommit 1e370962a6c6939e0fc815688f96a542270cd5a6[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Wed Feb 15 13:50:10 2017 +0800

    UserPrefsStorage: introduce getUserPrefsFilePath()
    
    UserPrefsStorage interface doesn't provide a getUserPrefsFilePath()
    method.
    
    Other classes are unable to get the current UserPrefs' file path.
    This is also inconsistent with the AddressBookStorage interface.
    
    Let's add a getUserPrefsFilePath() method, and implement this in
    classes that implement this interface.

[33mcommit 1f784b06cd8055123a5aa5ad06da7a1a0382bffc[m
Merge: 3ace38e7 53e85de2
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Mar 16 22:15:06 2017 +0800

    [#299] Make UI look-and-feel consistent (#314)
    
    The UI contains several elements with white backgrounds.
    
    This is inconsistent with the dark theme used by the app.
    
    Let's modify the offending elements so that they fit with the dark
    theme.

[33mcommit 3ace38e7e981e3433ab1af9f0ce69afa6aa108e0[m
Merge: 297506b8 a06749ce
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 15 22:21:09 2017 +0800

    [#114] Update GUI tests to verify 'last updated' feature (#216)
    
    Let's add GUI tests to verify the 'last updated' feature of the status
    bar footer.

[33mcommit a06749cee66343b64948dd091aeae8b77a5c249f[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Thu Feb 9 10:01:05 2017 +0800

    StatusBarFooter: add GUI test for last update feature
    
    We don't have GUI tests to verify the last updated feature, i.e.
    the sync status in the left corner of StatusBarFooter.
    
    Let's add an GUI test to verify it.

[33mcommit 982200a86dd430a0519d5ff90f891711d8f12377[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Tue Mar 7 14:05:10 2017 +0800

    CommandBoxHandle#runCommand(...): return success status
    
    runCommand(...) does not return whether the command execution is
    successful. We have to check it manually with the result message.
    
    It's clunky to check the result message when it changes based on the
    command inputs. Moreover, in some cases, we do not need to check the
    result message, but we are forced to do so because there is no other
    way of checking whether the command succeeds.
    
    Let's change runCommand(...) to return a boolean to indicate whether
    the command execution is successful.

[33mcommit 58a9b653ee464ba570ef535e818e4329dba3432b[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Sat Feb 25 19:39:56 2017 +0800

    StatusBarFooter: extract sync status messages into constants
    
    Feedback messages for sync status are directly used inside the code.
    
    Thus we have to hard code the same strings in testing code, too.
    This is error-prone.
    
    Let's refactor them into class constants and use these constants
    instead.

[33mcommit 76be0b3f25accf7682bfa3482bddb3c5426595aa[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Tue Feb 14 15:34:46 2017 +0800

    StatusBarFooter: enable dependency injection of a Clock
    
    When an AddressBookChangeEvent occurs, the sync status's timestamp is
    updated using 'new Date()'.
    
    However, because we do not know the arrival time of the event during
    testing, we are unable to verify the accuracy of the time stamp in the
    updated sync status.
    
    To gain testability, StatusBarFooter needs to support dependency
    injection. And to support dependency injection, we can't directly
    call new Date().
    
    Let's add a Clock, and get the time stamp from it, so we can inject
    a fixed Clock during testing.

[33mcommit 53e85de25ff2d1c91e7312583dff101275807180[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Tue Mar 7 19:22:01 2017 +0800

    Update screenshot of GUI in docs

[33mcommit 79fb9c3f15a9323a7bb6939616ce28570fd1dcc6[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Mar 2 13:36:48 2017 +0800

    BrowserPanel: Load a default blank page
    
    BrowserPanel does not load any page when no person is selected. This
    results in a very contrasting white background in a large box among
    the dark background.
    
    As the background of the BrowserPanel cannot be modified by CSS, we
    can instead load a default HTML page with a matching background color
    to the rest of the application on initialization.
    
    Let's load a default HTML page in the BrowserPanel on initialization.

[33mcommit 104fad3b3c777336e6929c7cd624c574259c1032[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Mar 2 13:32:55 2017 +0800

    Modify CSS files to better match the general dark theme
    
    Some elements in the UI have the default white background which is very
    constrasting to the dark theme the application is using.
    
    Let's modify the CSS of these elements to match the dark background
    of the application.

[33mcommit 977f98ec52f81408625db5c0f42543f03e970f8b[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Mar 2 13:30:28 2017 +0800

    StatusBarFooter: Align save location to the right
    
    The save location in the status bar is aligned to the left,
    causing it to misalign when the size of the window is stretched.
    
    This is problematic as it is not responsive to changes to the size of
    the window.
    
    Let's change the footer element to align itself to the right instead.

[33mcommit 297506b87fabe6de6baa7901388039ec50199802[m
Author: Lin Han <lhlhyong@gmail.com>
Date:   Fri Mar 10 12:13:39 2017 +0800

    [#308] UrlUtil is unused (#325)

[33mcommit c3f8027f059c932c6bc6aded05897dd6eb8c087e[m
Author: Ka Yi <chua.kayi@yahoo.com.sg>
Date:   Wed Mar 8 21:22:16 2017 +0800

    [#296] CommandBox stays red even after correct input is entered (#298)
    
    After multiple failed commands are entered, the CommandBox continues
    showing the error style even after a successful command is entered.
    
    This is because each time a failed command is entered, a new copy of
    ERROR_STYLE_CLASS is appended, but when the successful command is
    entered, only one is removed, so at least one ERROR_STYLE_CLASS
    remains. Thus, the CommandBox shows the error style even though the
    latest command is successful.
    
    Let's teach CommandBox to add an ERROR_STYLE_CLASS for failed commands
    in CommandBox#setStyleToIndicateCommandFailure() only if the style
    class does not contain any. This ensures there is at most one
    ERROR_STYLE_CLASS at any point in time, so removing an
    ERROR_STYLE_CLASS for successful commands in
    CommandBox#setStyleToIndicateCommandSuccess() always works.

[33mcommit 65fdb4818f191c27f46846588172f644483718af[m
Merge: 2419c45d da90e68f
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 1 21:46:54 2017 +0800

    [#235] Parser and ArgumentTokenizer cleanups (#261)
    
    * ArgumentTokenizer: simplify getPreamble() return type
      from Optional<String> to String
    * ArgumentTokenizer: simplify getAllValues() return type
      from Optional<List<String>> to List<String>
    * ParserUtil: remove unnecessary regex usage
    * ParserUtil: remove unnecessary toSet()
    * FindCommandParser: remove unnecessary regex usage

[33mcommit 2419c45d61b3284e76510d0d99ed00f2f4ac899a[m
Merge: 17c1a61e 0f027b45
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 1 15:07:14 2017 +0800

    [#207] Add explicit reference to coding style guidelines in docs (#297)

[33mcommit 17c1a61e90087f942153ae13a7d5c84ec2fb1a2d[m
Merge: d741336a b87c361f
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Mar 1 14:46:06 2017 +0800

    [#301] Blank person cards should not have alternating colours (#304)
    
    Blank PersonCard are still created in the panel even though they have
    no content. Normal formatting such as alternate row colors still apply
    to these blank personcards. This can be easily observed by
    increasing the window size and performing a search that only returns
    one or two person cards.
    
    Let's remove the alternating row colors for blank person card cells.

[33mcommit da90e68f0c36fe10bc114a862d06f4eb50e08798[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Sun Feb 12 16:00:07 2017 +0800

    FindCommandParser: remove unnecessary regex usage
    
    CliSyntax#KEYWORDS_ARGS_FORMAT is a regex that greedily grabs one or
    more characters, excluding any leading or trailing whitespaces. It is
    used with String#trim() to check that a string contains at least one
    non-whitespace character.
    
    It is unnecessarily complex as the same task could be accomplished by
    just using simple String utility methods. String#trim() is sufficient in
    removing leading and trailing whitespaces, and in combination with
    String#isEmpty(), can perform the same check.
    
    Let's use String utility methods instead.

[33mcommit 1d46f717fd7acb2fb5ef9948733e1747713cd89e[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Fri Jan 20 19:22:29 2017 +0800

    ParserUtil: remove unnecessary regex usage
    
    ParserUtil#INDEX_ARGS_FORMAT is a regex that greedily grabs one or more
    characters, excluding line terminators. It is used with String#trim() to
    check if a string is empty or contains at least one line terminator in
    between non-whitespace characters.
    
    It is unnecessary as the subsequent check using
    StringUtil#isUnsignedInteger() encompasses the above checks and more.
    
    Let's remove ParserUtil#INDEX_ARGS_FORMAT.

[33mcommit 21410adb16208a3802302b9dad91e94c8dda99fc[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Sat Jan 21 01:37:54 2017 +0800

    ParserUtil: remove unnecessary toSet()
    
    ParserUtil#toSet() converts a List<String> into Set<String>, ensuring
    the uniqueness of String elements in a collection.
    
    It is redundant code as it is superseded by the existing
    ParserUtil#parseTags() and UniqueTagList class.
    
    Let's remove toSet() and update the logic to make use of
    ParserUtil#parseTags() and UniqueTagList instead.

[33mcommit 46497dc8d01bcd726073ffa2895002c3c6f0ed90[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Wed Feb 1 20:32:14 2017 +0800

    ArgumentTokenizer: simplify getAllValues() return type
    
    ArgumentTokenizer#getAllValues() returns Optional<List<String>>.
    
    As lists have a well-understood representation of absence of a value
    i.e. empty lists, using Optionals is an unnecessary complication.
    
    Let's change ArgumentTokenizer#getAllValues() to return a List<String>
    instead.

[33mcommit 585b1cfc7423e63aadf15cb53ca787021ee2aa7c[m
Author: PierceAndy <pierceanderson.fu+github@gmail.com>
Date:   Wed Feb 1 20:05:32 2017 +0800

    ArgumentTokenizer: simplify getPreamble() return type
    
    ArgumentTokenizer#getPreamble() returns Optional<String>.
    
    As strings have a well-understood representation of absence of a value
    i.e. empty strings, using Optionals is an unnecessary complication.
    
    Let's change ArgumentTokenizer#getPreamble() to return a String instead.

[33mcommit 0f027b45600f074c676ec89bd1ab9e60d31e18f8[m
Author: Ka Yi <chua.kayi@yahoo.com.sg>
Date:   Wed Feb 22 00:22:57 2017 +0800

    DeveloperGuide: Add link to coding standards
    
    Students are instructed to follow the provided coding standards.
    However, there are no explicit references to the coding standards in
    the developer guide. This makes it inconvenient for developers who
    need to refer to the coding standards when coding. Furthermore, other
    developers who come across this repo may not know about the coding
    standards used in this project.

[33mcommit b87c361f399d735af3e9be9f9471bcd451521b16[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Feb 23 16:06:29 2017 +0800

    Remove alternating coloring for blank PersonCard cells
    
    Blank PersonCard are still created in the panel even though they have
    no content. Normal formatting such as alternate row colors still apply
    to these blank personcards. This can be easily observed by
    increasing the window size and performing a search that only returns
    one or two person cards.
    
    Let's remove the alternating row colors for blank person card cells.

[33mcommit d741336a16662b675c117ed2aa3ade11a934f24c[m
Merge: 1eeb6fb0 f8824a36
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Feb 19 15:10:20 2017 +0800

    [#222] Remove unused code in TestUtil (#290)

[33mcommit f8824a3658fb8224a028bb79dfea1ac3ca52a4c8[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sun Feb 12 19:19:39 2017 +0800

    TestUtil: Remove unused methods

[33mcommit 1eeb6fb0a75d11d317390588f6799edb52f33047[m
Merge: f40ee42c fae87009
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Feb 16 23:14:38 2017 +0800

    [#269] Add asciidoctor to Gradle (#274)
    
    GitHub Flavored Markdown does not support the specialized features that
    this project requires, such as use of colors and easy conversion to
    other file formats. AsciiDoc, like Markdown, uses a readable syntax
    that is easy to learn. It is also supported by GitHub preview. In
    addition, AsciiDoc supports more features, such as auto-numbering of
    sections, auto-generation of table of contents and admonition blocks.
    Styling is also possible using custom CSS stylesheets. Furthermore,
    AsciiDoc is designed to make it easy to translate documents to other
    formats, and Asciidoctor makes it simple for users to generate HTML
    files from asciidoc documents.

[33mcommit fae87009249fc5a0084ea0d4fd28d1d8bf312921[m
Author: Ka Yi <chua.kayi@yahoo.com.sg>
Date:   Fri Jan 20 01:09:26 2017 +0800

    Add Asciidoctor Gradle plugin
    
    GitHub Flavored Markdown does not support the specialized features that
    this project requires, such as use of colors and easy conversion to
    other file formats. AsciiDoc, like Markdown, uses a readable syntax
    that is easy to learn. It is also supported by GitHub preview. In
    addition, AsciiDoc supports more features, such as auto-numbering of
    sections, auto-generation of table of contents and admonition blocks.
    Styling is also possible using custom CSS stylesheets. Furthermore,
    AsciiDoc is designed to make it easy to translate documents to other
    formats, and Asciidoctor makes it simple for users to generate HTML
    files from asciidoc documents.
    
    Converting to PDF:
    
    While Asciidoctor supports conversion to PDF, Asciidoctor PDF is
    currently an alpha release and does not support useful features such as
    font colors. Styling must also be done separately in an Asciidoctor PDF
    theme file, which is different from the CSS used for HTML files.
    
    To convert documentation to PDF format, we suggest using the browser's
    'save as PDF' function on the generated HTML files instead.
    
    Stylesheets:
    
    asciidoctor.css is the default stylesheet by Asciidoctor and
    gh-pages.css is the customized version used by the documentation.
    Having our customizations in a separate file instead of editing the
    default stylesheet makes it easy for developers to swap in other
    stylesheets which import the default stylesheet, such as those available
    at https://github.com/darshandsoni/asciidoctor-skins.
    
    copyStylesheets Gradle task:
    
    Asciidoctor suggests using the resources method to copy additional
    resources (in this case, CSS stylesheets) to the build directory.
    However, this does not work as Asciidoctor tries to generate the
    HTML files before copying the resources, as discussed in
    https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/178.
    
    Let's create a copyStylesheets task to copy the necessary resources
    before running Asciidoctor instead, a workaround suggested in
    the issue mentioned above.
    
    Asciidoctor attributes:
    
    Even though all AsciiDoc files use the same images directory,
    imagesDir attribute must be set in each individual file instead of
    in Asciidoctor's attributes. Otherwise, GitHub preview wrongly
    links to image.png instead of images/image.png so images are not
    displayed in the preview.

[33mcommit f40ee42cb2e29a99c9c6b8757b64b0b0f4284d67[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 15 14:31:47 2017 +0800

    LearningOutcomes.md: fix minor typos

[33mcommit 3ba2795e39f61d0444be0c655d20bb33517622a6[m
Merge: aaff772f b2b386cd
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 15 12:24:26 2017 +0800

    [#287] Document how to save project docs as pdf files (#288)
    
    The documentation files are written in Markdown and published to
    GitHub pages. However, PDF versions of the docs may be required, such
    as for providing offline access to documentation files.
    
    Let's update the developer guide to teach developers to use Chrome's
    'Save as PDF' option to convert the online documentation to PDF format.
    Chrome's 'Save as PDF' preserves the contents of HTML files well,
    including the hyperlinks, and is easy to use. Furthermore, Chrome is
    a commonly used web browser so developers are unlikely to have to
    install additional software.

[33mcommit b2b386cdbec459681b42191b9a1843c8a8d3e66c[m
Author: Ka Yi <chua.kayi@yahoo.com.sg>
Date:   Fri Feb 10 22:48:33 2017 +0800

    DeveloperGuide: add guide to convert docs to PDF
    
    The documentation files are written in Markdown and published to
    GitHub pages. However, PDF versions of the docs may be required, such
    as for providing offline access to documentation files.
    
    Let's update the developer guide to teach developers to use Chrome's
    'Save as PDF' option to convert the online documentation to PDF format.
    Chrome's 'Save as PDF' preserves the contents of HTML files well,
    including the hyperlinks, and is easy to use. Furthermore, Chrome is
    a commonly used web browser so developers are unlikely to have to
    install additional software.

[33mcommit aaff772f1989c11e294c264246da16453876bad1[m
Merge: 13e914d0 9af3aed3
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sun Feb 12 15:32:54 2017 +0800

    [#137] Split Parser into command-specific classes (#272)
    
    * 137-split-parsers:
      Update developer's documentation
      Extract FindCommandParser from Parser class
      Extract SelectCommandParser from Parser class
      Extract DeleteCommandParser from Parser class
      Extract EditCommandParser from Parser class
      Extract AddCommandParser from Parser class
      Extract common parser constants/methods to seperate classes

[33mcommit 9af3aed34f48ab4fd833226db0c9a547da7bbae1[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Wed Feb 1 21:49:19 2017 +0800

    Update developer's documentation
    
    This is to reflect the change in code structure in the Logic
    component due to the splitting of the parser components.

[33mcommit 2658dc4f45e44cf928ca006d7f486c31eb707d92[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Jan 26 18:00:58 2017 +0800

    Extract FindCommandParser from Parser class
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods
    and their associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    As a step toward the design proposed above, let's move the functionality
    of parsing of the find command from Parser to a new
    FindCommandParser class.

[33mcommit 03097866de219843de84193b7319f071ed597cf3[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Jan 26 17:57:01 2017 +0800

    Extract SelectCommandParser from Parser class
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods
    and their associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    As a step toward the design proposed above, let's move the functionality
    of parsing of the select command from Parser to a new
    SelectCommandParser class.

[33mcommit a67ac737a8a84dbcf1be1b582b9533596a49d285[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Jan 26 17:54:29 2017 +0800

    Extract DeleteCommandParser from Parser class
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods
    and their associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    As a step toward the design proposed above, let's move the functionality
    of parsing of the delete command from Parser to a new
    DeleteCommandParser class.

[33mcommit d66527be4db0c692004c5f01530dd526fc6afc3e[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Thu Jan 26 17:49:17 2017 +0800

    Extract EditCommandParser from Parser class
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods
    and their associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    As a step toward the design proposed above, let's move the functionality
    of parsing of the edit command from Parser to a new
    EditCommandParser class.

[33mcommit b443d880b041cabdbfdc6da7f82f7f520b1b3ef7[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sun Feb 5 20:25:06 2017 +0800

    Extract AddCommandParser from Parser class
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods
    and their associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    As a step toward the design proposed above, let's move the functionality
    of parsing of the add command from Parser to a new
    AddCommandParser class.

[33mcommit f9cf9ade26595e3df33b1b4e9ad88d6cb6e2621b[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Sat Feb 11 09:20:43 2017 +0800

    Extract common parser constants/methods to seperate classes
    
    Parser class implements all different
    command parsers as private methods within the Parser class.
    Parser::parseCommand is responsible for performing an initial
    parsing on the given input string and from there determine
    the correct method to parse the String to.
    
    This causes the Parser file to become very long
    containing all command parser methods and their
    associated helper methods that is only utilized in that
    one method itself.
    
    The design can be improved by applying the Single Responsibility
    Principle as follows: limit the Parser's responsibility to determining
    which type of command is being parsed and move the responsibility
    of parsing each type of command to a separate *CommandParser class.
    
    However, this will result in bidirectional links between these various
    *CommandParser classes and the main Parser class because some
    of the constants and utility methods in Parser class will be used
    by the various *CommandParser classes as well.
    
    As a step toward the design proposed above, let's extract reusable
    constants into a new CliSyntax class and utility methods into a new
    ParserUtil class to prevent bidirectional dependencies between
    the Parser class and the proposed *CommandPraser classes.

[33mcommit 13e914d0558b8b2e402910002497651ae492b046[m
Merge: 2d4aa80e 6f75b3dc
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 8 18:24:02 2017 +0800

     [#172] Add unit tests for person's fields classes (#253)
    
    Fields of the Person class (Name, Address, etc.) are exercised
    using integration tests but not using unit tests.
    
    Add unit tests to cover classes used as fields of Person class.

[33mcommit 6f75b3dc92d0f659a752afe6823acee61779d184[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jan 16 20:33:38 2017 +0800

    Add unit tests for person's fields classes
    
    The person's fields classes (Phone, Email, Address, Name) are
    previously being tested indirectly by integration testing, through
    testing of the "Add" command, which happened to use these classes.
    
    Therefore, Add unit tests for them. By doing so, we  are able to test
    the validation code for these classes directly, and use inputs that
    were previously impossible to test in the integration testings (such
    as having a blank address with spaces: " ", which cannot be entered
    through the command box).

[33mcommit 4f04962a297a7b48af8e9c98bfae74f933e16232[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jan 16 20:38:13 2017 +0800

    Fix Name accepting blank names (spaces)
    
    The current regex allows space characters. However, this means that a
    string of whitespace characters (e.g. "         ") are permitted.
    
    Modify the regex such that blank strings (such as " ") are no longer
    allowed.
    
    An alternative would be to edit the validation function to check for
    the length of the trimmed string seperately (i.e. test.trim().length()
    == 0). However, that would not be elegant since we will now have two
    different things doing our validation (regex and the code checking
    length), which feels unnecessary compared to just using regex alone.

[33mcommit fedb4f9cf05844fc145e6b0d2b0c86c3787d2a93[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Mon Jan 16 20:36:42 2017 +0800

    Fix Address accepting blank addresses (spaces)
    
    The current regex is too flexible, as it allows any kind of characters,
    including a trailing of whitespace characters (e.g. "       ");
    
    Modify the regex, such that blank strings (including "") are no longer
    allowed.
    
    An alternative would be to edit the validation function to check for
    the length of the trimmed string seperately (i.e. test.trim().length()
    == 0). However, that would not be elegant since we will now have two
    different things doing our validation (regex and the code checking the
    length), which feels unnecessary compared to just using regex alone.

[33mcommit 2d4aa80ec142ce9c29935bfc68ce4e3ffa69ab5d[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 8 13:55:29 2017 +0800

    Revert "[#246] User/Dev Guide: ToC links broken"
    
    This reverts commit 1054d0d13f0d39a627db5bd53882bb4bdd162289.
    
    Fixing the ToC links in the .md version causes
    the links to break in the GitHub Pages version.
    Revert the fix because its more important for
    the links to work in the GitHub Pages version.

[33mcommit 1054d0d13f0d39a627db5bd53882bb4bdd162289[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 8 13:41:49 2017 +0800

    [#246] User/Dev Guide: ToC links broken
    
    Links in the ToC missing section numbers.
    
    Fixes #246

[33mcommit bd3ab6479dc1ce50d849254d5e25753720c474e7[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 8 13:31:59 2017 +0800

    Elevate heading level of 'Headless GUI Testing'
    
    Elevate to level 4 to avoid the heading appear too small

[33mcommit 8976f44fc8e1b48a2d37bed6657976f7400d8971[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Feb 8 13:29:15 2017 +0800

    Add missing blank line in dev guide
    
    Missing blank line before the bullet list makes the bullet
    list render incorrectly on GitHub pages

[33mcommit 2221d24f2e49a9ec8a9c0d45b9dcb03694d25b0f[m
Author: Edmund Mok <edmundmok@outlook.com>
Date:   Sun Feb 5 20:14:09 2017 +0800

    [#205] Reposition caret after an incorrect command  (#215)
    
    After an incorrect command is executed, the command box positions
    the caret at the beginning of the command.
    
    It is more intuitive if the caret remained in the same position as before.
    
    Retaining the caret at the same position after an incorrect command
    is harder than necessary because the Logic component uses events
    to notify other components of an incorrect command being executed.
    Exceptions are a more direct way to inform the caller the command
    is incorrect. Update Logic to use exceptions instead of events to handle
    incorrect commands. Update the command box to retain caret at the
    same position if the exception for an incorrect command is caught.

[33mcommit 974a908122ec0ad45c3e5584b56eaa3a799d90c4[m
Merge: 941d0afe 821f5ad9
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Feb 5 19:15:09 2017 +0800

     [#276] checkstyle: fix module name error (#279)
    
    Several existing enabled modules in our Checkstyle configuration file,
    such as "TypeNameCheck" and "ConstantNameCheck", are being silently
    ignored by the Eclipse Checkstyle Plugin.
    
    This is because given a module "FooCheck", Checkstyle recognizes both
    its short name ("Foo") and its fully qualified name ("FooCheck") as
    names of that module. However, the Eclipse Checkstyle Plugin only uses
    short name convention, and thus does not recognize modules that are
    being referred to by their full names.
    
    Fix this by modifying our Checkstyle configuration file to use the short
    names of these modules, so that both Checkstyle and the Eclipse
    Checkstyle Plugin will recognize them.

[33mcommit 821f5ad99b14c44e349d7bb708e891b19e6b5e48[m
Author: eugenepeh <e0012835@u.nus.edu>
Date:   Sun Jan 29 18:54:04 2017 +0800

    Make Eclipse Checkstyle Plugin recognizes all existing modules
    
    Several existing enabled modules in our Checkstyle configuration file,
    such as "TypeNameCheck" and "ConstantNameCheck", are being silently
    ignored by the Eclipse Checkstyle Plugin.
    
    This is because given a module "FooCheck", Checkstyle recognizes both
    its short name ("Foo") and its fully qualified name ("FooCheck") as
    names of that module. However, the Eclipse Checkstyle Plugin only uses
    short name convention, and thus does not recognize modules that are
    being referred to by their full names.
    
    Fix this by modifying our Checkstyle configuration file to use the short
    names of these modules, so that both Checkstyle and the Eclipse
    Checkstyle Plugin will recognize them.

[33mcommit 941d0afebe52dc6bd86b60bd4a11861f48273900[m
Merge: a6c0c981 4de6efb2
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Feb 1 20:04:49 2017 +0800

    [#230] checkstyle: ensure consistent ordering of imports (#257)
    
    New checkstyle rule that checks for the order of import statements in
    Java files.
    
    * 230-checkstyle-import-order:
      Add import order check in checkstyle

[33mcommit 4de6efb2bd592149c5475e5d65899a17d67f16a2[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Thu Jan 19 09:57:08 2017 +0800

    Add import order check in checkstyle
    
    This new checkstyle rule ensures consistent ordering of imports,
    following the rules that the default Eclipse formatter uses.
    That means Eclipse IDE users will not need to perform any additional
    configuration to adhere to these new import ordering rules.
    
    We chose Eclipse's default rules over the default rules of other IDEs
    because we are using Eclipse as the primary IDE for CS2103, SE-EDU
    and TEAMMATES at the moment. However, when the time comes to
    switch to another IDE, we will need to update the checkstyle rules
    accordingly.

[33mcommit a6c0c981f15005501734ffde9c310dd0d3be2699[m
Merge: 9321a79e 54eb8b42
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Jan 31 14:57:05 2017 +0800

    CollectionUtil: refactor assertNoNullElements -> isAnyNull(Collection) (#278)
    
    Code quality improvements.
    
    CollectionUtil::assertNoNullElements() has been removed. Use
    CollectionUtil::isAnyNull() instead.
    
    * assertNoNullElements-fix:
      CollectionUtil: refactor assertNoNullElements -> isAnyNull(Collection)
      CollectionUtil: fix assertNoNullElements bug

[33mcommit 54eb8b42ba88f85a8305d78060ff0a58bd5a0d4a[m
Author: clarencechee <clarencechee94@gmail.com>
Date:   Sat Jan 14 21:53:54 2017 +0800

     CollectionUtil: refactor assertNoNullElements -> isAnyNull(Collection)
    
    We refactor the method to return boolean instead of void, shifting the
    assertion responsibility outwards to wherever this method is called.
    Forcing the explicit usage of the 'assert' keyword thus making it clearer
    that an assertion is actually happening.
    
    We also overload this method with isAnyNull(Varargs) due to the
    similarities of both methods.

[33mcommit 49ec595ad9161d4655de4ff23648f92333d83d02[m
Author: clarencechee <clarencechee94@gmail.com>
Date:   Mon Jan 30 20:56:55 2017 +0800

    CollectionUtil: fix assertNoNullElements bug
    
    assertNoNullElements isn't working as intended at all. The original
    intention of this method was to ensure each element of the given
    collection was non-null. However, by simply doing
    'assert !isAnyNull(Collection)', the collection is parsed as an Object,
    instead of an Object[]. Meaning it only checks if the collection
    reference is null rather than its actual elements.

[33mcommit 9321a79e2fc882fbfce56d31d2f8df32f11bd16c[m
Merge: da4dc8e7 79fd6d0b
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jan 30 00:26:06 2017 +0800

    [#229] checkstyle: ensure overloaded methods are grouped together (#251)
    
    Enable a new checkstyle rule to check that overloaded methods are
    grouped together.
    
    * 229-checkstyle-overloaded-methods-order:
      Check overloaded methods are grouped together in checkstyle

[33mcommit 79fd6d0bf024aa0ccded5f9bb8fd9459c25676ea[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Mon Jan 16 20:15:35 2017 +0800

    Check overloaded methods are grouped together in checkstyle
    
    This new checkstyle rule improves the readability of the code as it
    allows developers to see all the variations of a method at one place
    with no other code in between.
    
    However, note that there is a potential loophole in checkstyle
    OverloadMethodsDeclarationOrder module which permits out-of-order
    overloaded methods when they are separated by a nested class or
    interface.
    
    e.g. the following code in ModelManager.java will still pass the check,
    even though there is a nested interface between the two
    `updateFilteredPersonList()` method definitions:
    
        private void updateFilteredPersonList(Expression expression) {
            filteredPersons.setPredicate(expression::satisfies);
        }
    
        //========== Inner classes/interfaces ==================
        interface Expression {
            boolean satisfies(ReadOnlyPerson person);
            String toString();
        }
    
        public void updateFilteredPersonList(String keyword, boolean someRandomBool) {
            // do nothing
        }

[33mcommit da4dc8e78218b35ccf991108acf1c56ca8492f57[m
Merge: f74c40cb 0940bf94
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Jan 25 22:14:13 2017 +0800

    [#252] checkstyle: check for unused import (#256)
    
    Our checkstyle configuration now checks for unused imports.
    
    * 252-checkstyle-unused-imports:
      Add UnusedImports check in checkstyle

[33mcommit 0940bf947c94bbdfb737cea191c2bd1c60a0ba10[m
Author: chao1995 <huangchao0825@gmail.com>
Date:   Thu Jan 19 09:03:40 2017 +0800

    Add UnusedImports check in checkstyle
    
    Unused imports are a code smell as they make it less clear which classes a
    Java file depends on. Our checkstyle configuration does not presently check
    for unused imports, so let's add an UsedImports check which does just that.
    
    There is already a slightly similarly-named check in our checkstyle.xml file
    called RedundantImport. Its name could mislead readers into thinking that it
    actually checks for unused imports as well, as an unused import could be
    considered to be "redundant". However, it doesn't actually do that. Because
    an import is redundant if
    1. It is a duplicate of another import.
    2. The class non-statically imported is from the java.lang package.
    3. The class non-statically imported is from the same package as the
       current package.

[33mcommit f74c40cb73cd505ba1d6540bd9361cab1369d830[m
Merge: 6ea90ae4 cbcd7b39
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Jan 24 15:26:24 2017 +0800

    [#204] Make Travis CI output less verbose (#258)

[33mcommit cbcd7b398f1067d3fa122278f86bb0031ff2e27d[m
Author: Tan Wang Leng <tanwangleng@outlook.com>
Date:   Thu Jan 19 22:41:32 2017 +0800

    Make Travis CI output less verbose
    
    Gradle utilises different levels for logging (see
    https://docs.gradle.org/current/userguide/logging.html).
    
    .travis.yml is set to execute gradle with '-i'. This means that log
    messages with 'INFO' level and above are printed to stdout, which is a
    more verbose level than the default.
    
    The reasons for using 'INFO' level are as follows:
    
      1. To ensure that the tests are actually running (instead of an empty
         Gradle task in its place).
    
      2. To determine which test stalled the CI (occasionally occurs due to
         either Travis issues or faulty tests).
    
    However, such detailed logging also generates a large quantity of
    logging information from non-test-runners, which pollutes the log and
    makes it extremely verbose without providing any additional useful
    diagnosis information for tests.
    
    As such, remove '-i' to disable 'INFO' logging level, and also modify
    build.gradle to ensure that the progress of the test runner is still
    being reported.

[33mcommit 6ea90ae48e2ce7534faba9851ead4b322a95c3d3[m
Merge: 8164678f 4545d8f2
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Jan 24 14:31:02 2017 +0800

    [#217] Update URL of help window (#259)

[33mcommit 4545d8f25ff8339d220071322196c70ebd0cbad3[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Fri Jan 20 11:22:00 2017 +0800

    Modify HelpWindow.java to point to the HTML user guide
    
    The current URL points to the GitHub repo view of our user guide,
    which contains several UI elements which makes it look less like a
    formal user guide document and more like a file in a Git repo.
    Furthermore, the new HTML user guide is more aesthetically
    pleasing and might encourage users to read on for more details.

[33mcommit 8164678f10e07049144c98acd52fc3572ad5c9a8[m
Merge: 0dd249a0 8711079d
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Jan 19 18:53:01 2017 +0800

    [#184] Simplify construction of UiParts (#237)
    
    Simplification of the UiPart code. Instead of calling UiPartLoader
    methods, the UiPart base constructor is now in charge of loading the
    FXML file. The UiPartLoader is now unused and is thus removed.
    
    * 184-simplify-uipart:
      PersonListPanel: use FxViewUtil.applyAnchorBoundaryParameters()
      StatusBarFooter: rename addMainPane() to addToPlaceholder()
      DeveloperGuide: update Ui component info
      UiPart: remove deprecated construction methods
      MainWindow: migrate to use FXML loading constructor
      HelpWindow: migrate to use FXML loading constructor
      CommandBox: migrate to use FXML loading constructor
      StatusBarFooter: migrate to use FXML loading constructor
      ResultDisplay: migrate to use FXML loading constructor
      PersonCard: migrate to use FXML loading constructor
      PersonListPanel: migrate to use FXML loading constructor
      BrowserPanel: migrate to use FXML loading constructor
      UiPart: implement FXML loading constructor

[33mcommit 8711079d66e3cfd51e2835ecd9728cfc3d0c2719[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Jan 18 13:35:35 2017 +0800

    PersonListPanel: use FxViewUtil.applyAnchorBoundaryParameters()
    
    PersonListPanel sets the AnchorPane boundary parameters of its root VBox
    element directly in its FXML file, while our UI code usually uses
    FxViewUtil.applyAnchorBoundaryParameters() to set the AnchorPane
    boundary parameters instead.
    
    For consistency, make PersonListPanel use
    FxViewUtil.applyAnchorBoundaryParameters() as well.

[33mcommit 88b4c9abbd4687bf59544a4ef9b79b4eb9c86108[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Jan 18 13:38:49 2017 +0800

    StatusBarFooter: rename addMainPane() to addToPlaceholder()
    
    This is done for consistency with the naming conventions used in the UI
    code.

[33mcommit 2cb1e4ef7672b56e4a7599b1306f5970d8cffef6[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Jan 7 18:03:37 2017 +0800

    DeveloperGuide: update Ui component info
    
    UiPartLoader does not exist anymore. All UiParts can be directly
    constructed via `new SomeUiPart()`.

[33mcommit fa7dbdef60152365271b7fb2231fa1e97f266ca8[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:48:40 2016 +0800

    UiPart: remove deprecated construction methods
    
    These methods were marked as deprecated because UiParts which used them
    to construct themselves ended up having lots of boilerplate code. These
    UiParts have all been migrated to use the newer and better `UiPart(URL)`
    and `UiPart(String)` constructors.
    
    Now that no code is using all these deprecated methods any more, we can
    remove them.

[33mcommit 0c7cc550f88f6b21481e4c078dc0d08c40cbc834[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:47:44 2016 +0800

    MainWindow: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of MainWindow to use the new `UiPart(String)` FXML loading constructor.

[33mcommit dc69c618a1470a5efae330fb17b234e3e9cf6877[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:44:54 2016 +0800

    HelpWindow: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of HelpWindow to use the new `UiPart(String)` FXML loading constructor.
    
    While we are here, shave off a few lines of code by constructing the web
    browser directly in the FXML file.

[33mcommit 67be0359491387785849f434c4fd4e45006e47e3[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:26:53 2016 +0800

    CommandBox: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of CommandBox to use the new `UiPart(String)` FXML loading constructor.

[33mcommit e78d245a577cbe301bf59e2fd1e0a6d006f6345d[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:22:29 2016 +0800

    StatusBarFooter: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of StatusBarFooter to use the new `UiPart(String)` FXML loading
    constructor.

[33mcommit 4b229e3ada91eed6af32db7635ecb229c617d5ce[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 15:10:27 2016 +0800

    ResultDisplay: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of ResultDisplay to use the new `UiPart(String)` FXML loading
    constructor.
    
    While we are here, remove the unnecessary:
    
        mainPane.getChildren().add(resultDisplay);
    
    `mainPane` in this case refers to an AnchorPane within
    ResultDisplay.fxml:
    
        <AnchorPane fx:id="mainPane">
            <TextArea fx:id="resultDisplay" editable="false" styleClass="result-display"/>
        </AnchorPane>
    
    As can be seen, `resultDisplay` is already a child of `mainPane`, so the
    above code is essentially a no-op.

[33mcommit 443d6fa012adeffad8e7448e1d40d14fe15ce7c5[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 14:55:51 2016 +0800

    PersonCard: migrate to use FXML loading constructor
    
    UiPartLoader.initUiPart() is deprecated. Migrate the initialization code
    of PersonCard to use the new `UiPart(String)` FXML loading constructor.

[33mcommit 16ba2f9b9c6fe2813ba3f52b17d45190fea7a2cb[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 14:52:28 2016 +0800

    PersonListPanel: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of PersonListPanel to use the new `UiPart(String)` constructor.

[33mcommit 1da3e359b65879d0fde3b1c9849441087e1883d1[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 14:39:37 2016 +0800

    BrowserPanel: migrate to use FXML loading constructor
    
    UiPartLoader.loadUiPart() is deprecated. Migrate the initialization code
    of BrowserPanel to use the new `UiPart(String)` constructor.

[33mcommit 549e2ce6c770a17bdacfa82e2160b02853629f92[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 21 15:38:15 2016 +0800

    UiPart: implement FXML loading constructor
    
    There's quite a lot of boilerplate involved if a developer wishes to
    implement a new UiPart. The developer needs to override:
    
    * `setNode()`
    
    * `getFxmlPath()`
    
    * potentially `setPlaceholder()`
    
    and think of what the sane thing is to do for each of these methods. In
    addition, to make the API pleasant to use, developers need to implement
    a static `load()` method. In that method, the developer needs to further
    decide which of the three overloaded `UiPartLoader::loadUiPart()`
    methods to call.
    
    The reason why so much boilerplate is required is because the current
    implementation, through `UiPartLoader`, places the responsibility of
    creating new `UiPart` instances (the controller) on the JavaFX
    FXMLLoader. However, FXMLLoader can only use the no-arg constructor of
    UiParts. As such, we need extra code to workaround this limitation in
    order to pass arguments into UiParts, leading to the above boilerplate
    code.
    
    To fix this problem, let's do two things:
    
    Firstly, we introduce a stricter definition of a UiPart: it contains a
    scene graph with a root node of a certain type T. This node can be
    retrieved with the new `getRoot()` getter.
    
    Secondly, we introduce new `UiPart(URL)` and `UiPart(String)`
    constructors. These UiPart constructors will construct the UiPart
    instance *first* before passing it to the FXMLLoader. In other words, we
    are now directly in control of our own constructors, which removes the
    need for the above boilerplate methods. A simple UiPart subclass would
    look like:
    
        public class NewUiPart extends UiPart<Pane> {
            private final Object arg;
    
            @FXML
            private TextBox myNode;
    
            public NewUiPart(Object arg) {
                super("NewUiPart.fxml");
    
                // We can now initialize final fields!
                this.arg = arg;
    
                // We can also access nodes in our FXML scene graph
                // immediately!
                myNode.setText("hello world!");
            }
        }
    
    Notice how short the code is, as well as how it does not need to
    implement a static `load()` method or depend on UiPartLoader.
    
    One problem is that FXMLLoader does not allow passing in a controller
    instance if the FXML file has a "fx:controller" attribute. Without this
    attribute, JavaFX FXML editors could potentially not be able to link the
    controller class with the FXML file[1], as they do not know what the
    controller class is. However, given the amount of code we save by
    adopting this architecture, this seems to be a worthwhile trade-off.
    
    There's lot of ui parts which currently depend on the old way of doing
    things, though. For now, let's mark the no-arg UiPart constructor, as
    well as the setNode(), getFxmlPath() and setPlaceholder() methods as
    deprecated. Convert setNode() and getFxmlPath() into non-abstract
    methods so that UiParts who have migrated over to the new API do not
    need to implement them.  Also, mark the UiPartLoader methods as
    deprecated since UiParts using the new API should not need to call them.
    
    In future commits, we will port each UiPart incrementally to use the new
    `UiPart(String)` constructor. When all code has been finally ported, we
    can then remove the deprecated code.
    
    While we are also here, let's add some tests for UiPart.
    
    [1] It should be noted, however, that Gluon Scene Builder (the usual
        FXML editor used by developers) does not actually link the FXML file
        with its controller class, so this commit may actually be a strict
        improvement with little drawbacks.

[33mcommit 0dd249a002f77bde21542f679f19f3d4bfa0444c[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Wed Jan 18 12:42:59 2017 +0800

    [#228] checkstyle: check for star imports (#250)
    
    This new checkstyle rule prevents using '*' imports so that it is clear
    exactly which other classes a class depends on.

[33mcommit 97c34f2b96ec34b3afd93876f3eda12455759c91[m
Merge: bc2f5467 2d65a0d3
Author: Paul Tan <pyokagan@gmail.com>
Date:   Mon Jan 16 10:47:34 2017 +0800

    [#141] User can edit a person's details (#209)
    
    An "edit" command has been implemented which allows users to edit one or
    more fields of an existing person in the address book.

[33mcommit 2d65a0d3bcdcfbbb0350d2c8d740dfd798ec6e8e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Dec 26 19:20:00 2016 +0800

    update User Guide to include Edit Command

[33mcommit acc1c8798d14d16e38970376a88b6f04b405b588[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Sun Dec 11 09:23:01 2016 +0800

    create EditCommandTest

[33mcommit a791e8859cc79f4f4e7860cec73a128bb7c20a0c[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Wed Dec 21 14:27:50 2016 +0800

    teach Parser to parse EditCommand

[33mcommit a56fcb0ff747cf25c446f775cf66487cf46ed38e[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Mon Dec 26 14:48:48 2016 +0800

    create EditCommand

[33mcommit 1eb8b13812e55a0f7a43a8e733c30537b2338ed9[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Dec 13 13:54:33 2016 +0800

    teach classes in Model to execute edit

[33mcommit 6db34ed3eee573e74f245a3a5d84e21a34472061[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Dec 13 13:46:52 2016 +0800

    create isAnyPresent() method in CollectionUtil

[33mcommit 5b7c2449df37e09e5eac91df1a27ff531d2b0d31[m
Author: Zhi Yuan Yong <yongzhiyuan@u.nus.edu>
Date:   Tue Dec 13 12:52:44 2016 +0800

    make Person mutable

[33mcommit bc2f54675f66a410eea7f3338f09b125dfc573aa[m
Merge: 32643f6b f54a3564
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Jan 15 12:17:30 2017 +0800

    [#60] Show some sample data when the app is run for the first time (#226)
    
    Objectives for showing sample data at first run:
    
    * to give new users some data to play around with from the very beginning.
    * to show new users the GUI in its full glory (instead of a blank list) so that it makes a good first impression.
      That means sample data should be well chosen to showcase our features in the best possible way

[33mcommit f54a35645e1cac9aa98babf8c78013c05a5bbe65[m
Author: Edmund Mok <edmundmok@outlook.com>
Date:   Tue Dec 20 22:24:17 2016 +0800

    Add test for sample data

[33mcommit 91b7c120cbff61826704cb3fcdd50167e4052688[m
Author: Edmund Mok <edmundmok@outlook.com>
Date:   Tue Dec 20 21:30:39 2016 +0800

    Initialize AddressBook with sample data if file does not exist

[33mcommit 32643f6b7435056071181de2bd34055bb3b05cc4[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Jan 13 20:04:16 2017 +0800

    Add more info on using pptx files for diagrams

[33mcommit 938adb3f65e0680913c63566102f6a887df56445[m
Merge: d7828985 b97aa3e0
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Jan 7 16:22:00 2017 +0800

    [#223] Resolve Eclipse warnings (#227)

[33mcommit b97aa3e0cdad1dee8d91747fc1c5193cfc23d485[m
Author: Edmund Mok <edmundmok@outlook.com>
Date:   Tue Dec 20 23:19:22 2016 +0800

    Resolve Eclipse warnings

[33mcommit d782898510a12b3b03b07848cb7a647f3076e241[m
Merge: e1cc235f 9c29f8ed
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Dec 31 17:25:58 2016 +0800

    [#195] Check for line endings in Travis CI (#238)

[33mcommit 9c29f8ed2c67b326b8bbeec88abe95b28bebbd57[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 28 17:44:28 2016 +0800

    Document Travis CI repository-wide checks

[33mcommit 4e928d4d8b937a5a1f703134b2386e9e2c96d8fd[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 28 00:33:02 2016 +0800

    Implement Travis CI trailing whitespace check
    
    While our checkstyle configuration already checks for trailing
    whitespace in our java files, it does not cover all text files in our
    repository. Notably: our documentation files and other configuration
    files such as `build.gradle`.
    
    While we could probably coax checkstyle and gradle to check for these
    files, it is much easier to just hook onto our existing "Travis CI
    checks" architecture to implement this check.
    
    Trailing whitespace should be considered an error, however we treat
    trailing whitespace in markdown (`*.md`) files as warnings instead to
    accomodate developers who prefer to edit documentation using the GitHub
    web interface which does not provide facilities to easily detect and
    remove trailing whitespace.

[33mcommit 8ee1731ffb32d3bf6f107ab24986b5ae286a783e[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Wed Dec 28 00:32:46 2016 +0800

    Fix "trailing whitespace" errors

[33mcommit 465cb6b67090605d8682735ae41ed5f00d64cede[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 27 17:03:30 2016 +0800

    Implement Travis CI line ending checks
    
    In our repository, we want:
    
    * All text files to use only LF ('\n') as their line endings. Not CRLF
      ('\r\n')
    
    * All text files to end with a newline (Newline at EOF).
    
    So, ideally, we should have checks that automatically check for these
    requirements in our repository.
    
    However, we can't impose these checks on all developers, namely Windows
    developers. They could be using either LF or CRLF (e.g. if the developer
    activated Git's core.autocrlf configuration). Even if we did, we can't
    guarantee that developers do not bypass these checks. As such, we have
    to implement these checks on the Travis CI level instead.
    
    The next question is how do we implement these checks. Checkstyle is
    already helping us with that, but it is not completely effective as it
    does not check *all* text files -- it only checks the source files which
    are used for compilation.  This means that it does not check things like
    resource files (CSS and FXML files), test data and documentation.
    
    While we could probably teach it to check all files, we meet another
    problem; Checkstyle does not know what a text file is. At best, we can
    only give it a filter of file extensions to check.
    
    On the other hand, Git knows the difference between text files and
    binary files. As such, let's implement some shell scripts that will use
    Git's facilities to implement our line ending checks on all text files.
    These checks will be run on Travis CI, thus guaranteeing that master
    will not have any more line ending problems.
    
    These checks are implemented in POSIX shell scripts so that Travis CI
    would not need to download any additional dependencies in order to run
    them. Furthermore, developers running Linux or Macs can also run them
    locally without downloading additional dependencies as well. Windows
    devs would be unable to run them, but then again these line ending
    checks are not useful to them because as mentioned above, Windows devs
    may be using CRLF line endings anyway.

[33mcommit 5318247b46485d8157265b0642de57189495e2a2[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 27 16:33:41 2016 +0800

    Fix "no newline at EOF" errors

[33mcommit e1cc235f159b1a358b364b4ccf1a0dbf8953a8e4[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 24 22:39:55 2016 +0800

    [#190] Make ReadOnlyAddressBook truly read-only (#199)
    
    * Remove redundant "get empty address book" methods
    
    It seems strange that we have AddressBook#getEmptyAddressBook() and
    TestUtil#generateEmptyAddressBook() methods, when a simple
    `new AddressBook()` will give us what we want.
    
    * Fully encapsulate UniquePersonList and UniqueTagList within AddressBook
    
    ReadOnlyAddressBook declares the following methods:
    
    * `UniqueTagList getUniqueTagList();`
    
    * `List<Tag> getTagList();`
    
    * `UniquePersonList getUniquePersonList();`
    
    * `List<ReadOnlyPerson> getPersonList();`
    
    As we can see, there is some redundancy; both `getUniqueTagList()` and
    `getTagList()` conceptually do the same thing, and both
    `getUniquePersonList()` and `getPersonList()` conceptually do
    the same thing as well.
    
    So, to simplify the API we need to pick one set of APIs: either the ones
    that return `UniqueXList`, or the ones that return `List<X>`.
    
    Going with the API that returns `List<X>` is more beneficial than
    `UniqueXList`: Lists are widely used throughout our code and the
    standard library, and thus returning a list would be much more
    convenient for developers. `UniquePersonList` and `UniqueTagList`, on
    the other hand, only implement the `Iterable` interface, and are thus
    slightly more annoying to write code with.
    
    However, there is a deeper problem as well: `UniquePersonList` and
    `UniqueTagList` both contain mutating methods, which violates the
    contract of `ReadOnlyAddressBook` to provide a read-only view to the
    address book. We could solve this by introducing
    `ReadOnlyUniquePersonList` and `ReadOnlyUniqueTagList` interfaces, but
    as argued above, by virtue of not implementing the `List`
    interface these objects are more annoying to deal with and thus it is
    likely better to not return them at all.
    
    As such, this commit removes the `getUniqueTagList()` and
    `getUniquePersonList()` methods. In addition, we also remove all of the
    methods of `AddressBook` that take a `UniquePersonList` or
    `UniqueTagList`, thus fully encapsulating these classes within
    `AddressBook`. This not only solves the contract violation problem as
    discussed above, it also reduces coupling as users will no longer need
    to depend directly on `UniquePersonList` and `UniqueTagList` any more.
    
    * ModelManager: merge two similar constructors
    
    Both ModelManager(AddressBook, UserPrefs) and
    ModelManager(ReadOnlyAddressBook, UserPrefs) both do exactly the same
    thing. Let's DRY up the code by merging them into one single
    constructor.
    
    The author notes that the `userPrefs` argument is currently not even
    used. However, fixing this is outside the scope of this commit.
    
    * AddressBook: replace getPersons() with getPersonList()
    
    ReadOnlyAddressBook has a getPersonList() method which returns its list
    of persons as a List<ReadOnlyPerson>
    
    AddressBook has a getPersons() method which returns its list of persons
    as an ObservableList<Person>.
    
    Simplify the API by merging these methods together, by making
    getPersonList() return an ObservableList<ReadOnlyPerson> and removing
    getPersons().
    
    * ReadOnlyAddressBook: make getTagList() return an ObservableList
    
    Even though there are currently no callers that require the return value
    to be an ObservableList, this is still done for consistency with
    getPersonList() and to make it easier to implement future UI features
    such as a listing of all tags.
    
    * fixup! Fully encapsulate UniquePersonList and UniqueTagList within AddressBook
    
    * fixup! Fully encapsulate UniquePersonList and UniqueTagList within AddressBook

[33mcommit f48f92181a328fb7cb89a1165824c8d2e7bb360b[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 23 22:07:31 2016 +0800

    [#221] Rework how TypicalTestPersons exposes its persons (#224)
    
    * TypicalTestPersons: remove repetition of typical persons list
    
    The list of typical persons is repeated in
    loadAddressBookWithSampleData() and getTypicalPersons(). DRY up the code
    by making getTypicalPersons() the authoritative source.
    
    * TypicalTestPersons: make TestPerson fields non-static
    
    Throughout the code base, TypicalTestPersons is typically used in the
    following fashion so that tests can access the test persons using a
    shorter variable name, e.g.:
    
        TypicalTestPersons td = new TypicalTestPersons();
        td.alice, td.benson etc.
    
    However, with such code, Eclipse will give the following warning:
    
        The static field TypicalTestPersons.alice should be accessed in a
        static way.
    
    This is because these TestPerson fields are static. This is problematic
    because these fields can be accessed without first constructing a
    TypicalTestPersons object (e.g. with `TypicalTestPersons.alice`,
    `TypicalTestPersons.benson` etc.), which could potentially lead to
    NullPointerExceptions (if a TypicalTestPersons object was not
    constructed yet) or state leaks (if a test modifies the TestPersons)
    which are hard to debug.
    
    As such, let's make these TestPerson fields non-static.

[33mcommit e280bbdd7add1bdc32eda889b2df1541a2a667fb[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Dec 23 13:55:06 2016 +0800

    [#236] Reverse #161 (Include test code in coverage analysis)

[33mcommit 15d91fd909ad422aaa0cc13039cbb297c199b448[m
Author: zzzzwen <zhiwen.song.loveslife@gmail.com>
Date:   Thu Dec 22 20:22:02 2016 +0800

    [#233] Add unit test for CollectionUtil class (#234)
    
    * Add unit test for CollectionUtil class
    
    * Update comments

[33mcommit df3e2ca0fca50e31ed5d1d5615ea5ae2047c166f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 19:04:29 2016 +0800

    Set theme jekyll-theme-cayman

[33mcommit 6ca9b47712d7087b7ce708485deb602b53a1bf01[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 19:18:35 2016 +0800

    Fix GitHub page rendering in LearningOutcomes.md

[33mcommit a8493447cec673de1c54f2f375ce7253a76f44c1[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 19:10:11 2016 +0800

    Fix github page rendering in User Guide

[33mcommit b7cd36fb51819d806f9c731ca4d05242bf982cec[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 17:57:50 2016 +0800

    Fix GitHub page rendering of Dev Guide

[33mcommit 7b1fc01915cbbec4318217496281325cf27bc4a3[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 17:08:05 2016 +0800

    Refine NFRs in Dev Guide

[33mcommit ee34067fad658c121745a87e31bd177a0ce51291[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 17:00:47 2016 +0800

    Add template for Dev Guide: Product Survey

[33mcommit cbf763bf0daa95e370ce3299eb0152fd8617b427[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 16:54:45 2016 +0800

    Add authors to Dev Guide sections to be written individually

[33mcommit 4bc46893c7d17b28c317c39492d046c86c25a7ad[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 15:26:22 2016 +0800

    Rephrase method header comments to follow the coding style

[33mcommit 7195389ddd0cbdc4956b4baefa2a8da61a25542a[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 14:47:03 2016 +0800

    Add section numbers to the user guide

[33mcommit eaf2f21193a3256de70e0d5942b4341e34d05206[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 14:21:37 2016 +0800

    Add captions for Dev Guide diagrams

[33mcommit a8198d59f47468b83c73d79cc33b788abe0f9c6d[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Dec 22 13:59:59 2016 +0800

    Add section numbers to dev guide

[33mcommit d43d6cf8bbc5c3e3868f19c6bd8fba802619716b[m
Author: MightyCupcakes <gohydj2003@gmail.com>
Date:   Wed Dec 21 00:11:06 2016 +0800

    [#219] Make `GuiHandle::getNode()` return a `<T extends Node> T` (#225)
    
    * Modify GuiHandle::getNode() return type
    
    Also removed type-castings on calls to this function in GUIHandles
    
    * Refactor codes in GUIHandler to ultilise the new getNode function
    
    * Modify GuiHandle::getNode() to use query instead of its tryQuery counterpart
    
    * Remove cast
    
    * Remove unused method

[33mcommit bd02cb898e196560acfbdc98fbacaf333ed08057[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Dec 20 21:46:51 2016 +0800

    Add AppVeyor badge

[33mcommit 04f0810c304e6a424dcd1b18eb1fb8ffd23ee7e2[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 20 21:06:28 2016 +0800

    [#192] Set Up AppVeyor CI (#218)
    
    AppVeyor[1] is a continuous integration service used to build and test
    projects on a Windows VM. Adding AppVeyor support to this project will
    allow us to easily ensure that our tests do not break on Windows.
    
    Add an appveyor.yml file that will teach AppVeyor how to build this
    project and run its tests.
    
    Update our documentation to explain to developers how to set up AppVeyor
    on their own repositories.
    
    For now, we will run our tests with 64-bit Java only, since the project
    does not use any native libraries and thus is unlikely to have any
    architecture-specific bugs. In the future, should we use any native
    libraries, the appveyor.yml file should be updated to run our tests on
    both 32-bit and 64-bit Java.
    
    [1] https://www.appveyor.com/

[33mcommit 311ab3c0ccd4d6e49d81234e6d8fe42646e3c834[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Dec 18 18:13:33 2016 +0800

    Add additional info to LO-CodeCoverage

[33mcommit c557d20f894eec40b3eed690a91a0fde9f6182d1[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Sun Dec 18 18:09:20 2016 +0800

    [161] Include test code in coverage analysis

[33mcommit 979e68098b5f3a57d739cdfbc5f43e6fd1ebb048[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Dec 18 18:08:31 2016 +0800

    Add tip about using pptx files to create diagrams

[33mcommit 6cab4c4b826af8d8efc52c768f893d4a0cad89c5[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Dec 18 17:18:45 2016 +0800

    Set theme jekyll-theme-minimal

[33mcommit ce4104b2c15037c0ddf0a4e138a79813d7a480af[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Dec 18 17:16:46 2016 +0800

    Set theme jekyll-theme-tactile

[33mcommit 0c529e619ae7c7166599a8ca8777560b6e183ac9[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Dec 18 17:14:42 2016 +0800

    Set theme jekyll-theme-cayman

[33mcommit d2d6c5522cb94f5e9dea78c297fa254806925901[m
Author: Huang Chao <huangchao0825@gmail.com>
Date:   Sun Dec 18 16:38:16 2016 +0800

    [#149] Support F1 accelerator even when the focus is not in the list (#210)

[33mcommit d1d17d8b8f5caa337653ab376411c27110303e40[m
Author: Edmund Mok <edmundmok@outlook.com>
Date:   Sun Dec 18 16:29:19 2016 +0800

    [#173] Add background color to tags (#200)

[33mcommit 38a52f5ad5e1bb97574f38950aa3b1246cc3b469[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Dec 14 15:39:27 2016 +0800

    Move page title to the top of README

[33mcommit 845249d099d355a00bb33922e1a379033b0006dc[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Tue Dec 13 00:47:47 2016 +0700

    [#186] Construct BrowserPanel in FXML (#208)
    
    * Construct BrowserPanel using FXML
    
    The DeveloperGuide states that the layout of individual UiParts are
    specified in matching `.fxml` files. e.g. The layout of
    `MainWindow.java` is specified in `MainWindow.fxml`.
    
    While this is true for almost all UiParts, there is one oddball UiPart
    that does not have a corresponding `.fxml` file -- BrowserPanel.
    
    For consistency with the rest of the UiParts, let's construct the
    BrowserPanel using FXML rather than using code.
    
    * Remove DefaultBrowserPlaceHolderScreen.fxml
    
    It is not being used at all.

[33mcommit e68f4529ea42ac5929472b76fbb4a7bf9e8cbbf2[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 10 21:53:24 2016 +0700

    checkstyle: ensure curly brackets have whitespace around them #181 (#182)
    
    * codestyle: ensure curly brackets are separated by whitespace
    
    The Java coding standard[1] requires that curly brackets ({}) be
    surrounded by whitespace.
    
    However, there are several violations of this requirement in the code
    base. e.g.
    
        protected void raise(BaseEvent event){
        -------------------------------------^
                            Space required before '{'
    
    Fix all of these code style violations.
    
    [1] https://oss-generic.github.io/process/codingstandards/coding-standards-java.html#methods
    
    * checkstyle: ensure curly brackets have whitespace around them
    
    There used to be methods in the code base where the curly brackets ({})
    are not separated by whitespace:
    
        protected void raise(BaseEvent event){
        -------------------------------------^
                            Space required before '{'
    
    Our checkstyle configuration failed to catch these errors because we did
    not tell checkstyle to check for the LCURLY, RCURLY and SLIST (statement
    list) tokens. Fix this in the checkstyle config file so that such code
    style violations will not happen again.

[33mcommit e088d3dd380e3f58ef7153611d817250d2cef333[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 10 21:52:42 2016 +0700

    checkstyle: accept LF, CR or CRLF as line endings (#194)
    
    Checking out this repo on a Windows machine with a vanilla Git config,
    then running `gradlew.bat checkstyleMain` gives the following errors:
    
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\MainApp.java:0: File does not end with a newline. [NewlineAtEndOfF
        ile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\ComponentManager.java:0: File does not end with a new
        line. [NewlineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\Config.java:0: File does not end with a newline. [New
        lineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\EventsCenter.java:0: File does not end with a newline
        . [NewlineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\GuiSettings.java:0: File does not end with a newline.
         [NewlineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\LogsCenter.java:0: File does not end with a newline.
        [NewlineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\Messages.java:0: File does not end with a newline. [N
        ewlineAtEndOfFile]
        [ant:checkstyle] [ERROR] C:\Users\pyokagan\pyk\addressbook-level4\src\main\java\
        seedu\address\commons\core\UnmodifiableObservableList.java:0: File does not end
        with a newline. [NewlineAtEndOfFile]
        ...etc
    
    This goes on for every single Java file.
    
    This is because this repo's files uses LF as the line separator.
    However, the default "lineSeparator" value of the "NewlineAtEndOfFile"
    check is CRLF on Windows[1], hence these errors.
    
    One may argue that we could switch on `core.autocrlf` in Git, which
    would tell Git to automatically convert all LF line endings to CRLF,
    thus avoiding this problem. However, this not only places an additional
    burden on Windows users to configure Git properly, it also does not
    handle the use cases where a developer is not using Git. The developer
    may, for example, instead get hold of the repo by downloading the ZIP
    file using Github's "Download as ZIP"[2] functionality, and will thus
    still have this problem as the downloaded ZIP contents will still
    contain LF line endings.
    
    Thus, we should either switch the "lineSeparator" property to "lf",
    accepting only LF line endings, or "lf_cr_crlf", accepting LF, CR or
    CRLF line endings. (Checkstyle does not support just LF and CRLF only)
    
    However, some developers may have `core.autocrlf` accidentally set, or
    may even prefer to use CRLF line endings in their working copy. As such,
    let's go the route of allowing LF, CR or CRLF as line endings.
    
    [1] http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile
    [2] https://github.com/se-edu/addressbook-level4/archive/master.zip

[33mcommit ba0900e84dd5ca552cd93a6f6c10634bbcf56426[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Sat Dec 10 20:52:36 2016 +0700

    [188] Construct StatusBarFooter in FXML fully
    
    StatusBarFooter currently constructs and sets up its StatusBar controls
    using pure code.
    
    The StatusBar control is actually a real control that can be initialized
    directly in the FXML file. We can avoid placeholder elements and make
    things simpler by just doing that.
    
    Now, one may think: "This means Scene Builder cannot edit this FXML file
    any more!", since the StatusBar control comes from controlsfx, which is
    not supported by Scene Builder by default. However,
    
    1. Scene Builder can actually be configured[1] to support the custom
       controls from controlsfx, allowing it to edit the FXML file.
    
    2. Having too many placeholder nodes, and constructing the actual scene
       graph in code, kind of defeats the advantage of FXML which is to
       construct the scene graph declaratively without code.
    
    [1] http://stackoverflow.com/a/30078204

[33mcommit 8d9ff226f33c05a1acac43e611d94220c089d8f8[m
Author: Jia Yee <jiayeerawr@gmail.com>
Date:   Fri Dec 9 18:05:18 2016 +0700

    Correct typos and grammatical errors in DG (#198)

[33mcommit 7ff3ad82caaf32e71def3d26f133c1152cad0ac6[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Dec 8 19:10:58 2016 +0800

     checkstyle: check for trailing whitespace  #179 (#180)
    
    * codestyle: remove trailing whitespace
    
    Some lines in the code look like an empty line, but actually contain
    spaces.
    
    To be consistent with the rest of the code, let's make sure all empty
    lines are actually empty.
    
    * checkstyle: check for trailing whitespace
    
    To ensure that no more trailing whitespace is introduced into our code
    base, add a check for it.

[33mcommit 6c99bdbd9ba4aac9c64643106428409cf0d769b7[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Thu Dec 8 19:10:38 2016 +0800

    build.gradle: add `run` and `runShadow` tasks (#178)
    
    The `run` and `runShadow` tasks provide a convenient way for developers
    to run the built application from its *.class files or the built fat JAR
    respectively.
    
    This is accomplished using the application plugin[1] which implements
    the 'run' task.
    
    The shadow plugin, which we already use, will automatically detect the
    `application` plugin and will integrate with it[2], providing the
    `runShadow` task. It also knows that `mainClassName` should be used
    as the "Main-Class" of the JAR manifest, so we don't need to specify
    that anymore.
    
    We add the `mainClassName` and `plugin` lines OUTSIDE of the
    `allprojects` block because the question of "which class should be run"
    is Gradle project-specific and only applicable to the root project.
    
    [1] https://docs.gradle.org/current/userguide/application_plugin.html
    [2] http://imperceptiblethoughts.com/shadow/#integrating_with_application_plugin

[33mcommit 4b99eb594378e44bae3dcf454c2b94cd2215d183[m
Author: Paul Tan <pyokagan@gmail.com>
Date:   Fri Dec 2 21:37:11 2016 +0800

    [183] UiParts should not store a reference to the primaryStage
    
    * UiPart: move setIcon() into MainWindow
    
    UiPart::setIcon() is only used by MainWindow. Furthermore, UiParts
    should not be allowed to change the primary stage's icon at their whim
    and fancy, as it may lead to multiple UiParts conflicting with each
    other because they all want to set the primary stage's icons.
    
    So, make it clear that only MainWindow is allowed to do this by moving
    UiPart::setIcon() into MainWindow, and making it private.
    
    * UiPart: move setIcon() into FxViewUtil
    
    UiPart::setIcon() does not depend on any internal data of UiPart, and
    thus is better suited to be in an external utility class as a static
    method. This is done to make it clear that calling setIcon() will not
    modify the state of any objects, besides the Stage passed in as an
    argument.
    
    * FxViewUtil: rename setIcon() to setStageIcon()
    
    This is done to make it clear that the method operates on a Stage.
    
    * UiPart: push down primaryStage
    
    Currently, all UiParts store a reference to their primaryStage, which
    means that they can modify the primaryStage at their own whim and fancy.
    
    We want to prevent that -- UiParts should not be able to access the
    primaryStage as it makes it hard to reason about which UiPart is
    controlling the primaryStage and which is not. As such, we want to
    remove the reference to the primaryStage from all UiParts.
    
    Of all the UiParts, we note that only MainWindow requires a reference to
    the primaryStage. All other UiParts do not, and SHOULD NOT, keep a
    reference to the primaryStage.
    
    So, we push down the `primaryStage` field from UiPart to MainWindow
    only. All other UiParts thus effectively lose access to the
    primaryStage, which is a good thing for encapsulation.
    
    * UiPartLoader: rename loadUiPart() to initUiPart()
    
    All other variants of loadUiPart() will reconstruct the UiPart based on
    the value of "fx:controller" in its FXML file.
    
    Only loadUiPart(T seedUiPart) does not -- it simply sets up the FXML
    scene graph using the existing UiPart object provided.
    
    To highlight the difference in behaviour of this method from the others,
    rename this method to `initUiPart()`.
    
    * UiPartLoader: add single argument variant of loadUiPart()

[33mcommit 61b1f6fa5d259677efcd8df61b73b7569b7d5715[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Nov 19 14:31:05 2016 +0800

    Update Model class diagram to remove Person - - > Tag

[33mcommit a85d69c20af37b762f7242de6368aa28eb9f8568[m
Author: Leow Yijin <leowyijin@gmail.com>
Date:   Sun Oct 23 23:29:33 2016 +0800

    Fixes #165 : AB comparison ignores order of tags

[33mcommit d6ade39ab6da799f0357b2f9477addd76f2f3942[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Sat Oct 22 17:07:07 2016 +0800

    [#156] Document checkstyle use (#157)
    
    * Added checkstyle plugin for eclipse and add some documentation on how to use it.
    
    * Attempted to fix invalid values in checkstyle configuration. Added more detailed instructions to setup checkstyle after project import.
    
    * Added localised checkstyle-related files to gitignore.
    
    * Removed eclipse plugin settings files.
    
    * Added tip to click on the text again after selection.

[33mcommit 29ab5fddbadc885313b055194fcd22c10af5d08d[m
Author: Akshay Narayan <okkhoy@gmail.com>
Date:   Fri Oct 21 17:07:20 2016 +0800

    [#163] fix typo in developer guide (#164)

[33mcommit 067d8f3b475e556599b6f77120a36d4ecb6a7947[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 20 17:30:50 2016 +0800

    Add examples to command summary

[33mcommit c2f456d30821125c38eb92610b4c8a5a7338237e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 20:01:03 2016 +0800

    Move inner class to bottom

[33mcommit b4aded19f02fc030e5d1f33a5958e3410df7b33b[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:56:29 2016 +0800

    Remove unused import

[33mcommit 05e3776752a8d5d68b99c3d80f4204fae251ba0c[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:55:07 2016 +0800

    Fix typo in StorageManagerTest

[33mcommit 1626849824fd7aeb1db1a568c99c4a532af1f479[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:53:55 2016 +0800

    Fix typo in method name

[33mcommit d8839ef9367a5f3f94f2f6f2d0abc74e24b56e7f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:41:33 2016 +0800

    Move inner classes to the bottom

[33mcommit 8402fb9147fb7e7873f8f3f567651f8f24cfb92f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:36:44 2016 +0800

    Removed redundant default constructor

[33mcommit 9f70ed17db8f90b639905ef08b92d3bd8c52ee75[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 19:20:12 2016 +0800

    [#159] Remove non-static initializers
    
    Remove non-static initializers except one (keep one as an example)

[33mcommit a6457927e1d5842ebea5332c7d6c47fb6612d4be[m
Author: Leow Yijin <leowyijin@gmail.com>
Date:   Wed Oct 19 16:40:23 2016 +0800

    [#87] Increase encapsulation of UniquePersonList (#162)
    
    * renamed method for upl and utl
    
    * fixed storage to use xml adapted tags
    
    * fixed failing tests and RE-ENFORCED CONSTRAINTS PLEASE STOP BREAKING THIS
    
    * trim unused code
    
    * shifted inner classes to bottom

[33mcommit 11d6f54eb698d86600b7d3c1d94ed081c92eacfb[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 14:42:42 2016 +0800

    Update LO-CodeReview

[33mcommit 8e2cf2b28294c2c7d66d0e4057ae07228af1d2f9[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 19 14:29:13 2016 +0800

    Add LO-CodeReview

[33mcommit b12de5a4f66aebfe511148b4bbc43a61e89aa265[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Oct 18 19:59:05 2016 +0800

    Add missing link in LO ToC

[33mcommit 38cfb097d720e083073c0deb041c129bd250f4bd[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Oct 17 17:52:42 2016 +0800

    Add questions to LO-TestCaseDesignHeuristics

[33mcommit 1bae855e638bb022e27a7af44d78e3edc222ce64[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 23:51:42 2016 +0800

    Fix code style warnings by codacy

[33mcommit 5c44a011d18b6e2ade0f09c65c9d888991accdfe[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 23:32:12 2016 +0800

    Add codacy badge

[33mcommit 428a0db8de463902fed14c37fb931902f4de2caf[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 23:10:51 2016 +0800

    Fix more PMD warnings

[33mcommit 62775f89d057403a684d87157d0da1c399dcb446[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 22:59:10 2016 +0800

    Fix PMD warnings

[33mcommit e2e64653bf90843e1d770da70b0f1a623b5fdd91[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 22:50:29 2016 +0800

    Eliminate reassigning parameters

[33mcommit 8fc301f91dffddfd06d812c589fad4fd2858e699[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 22:41:09 2016 +0800

    Remove unused constructors

[33mcommit 2e214de6f0f3953db8963ce5da7840204dec0878[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 20:08:35 2016 +0800

    [155] Split Diagrams.pptx file
    
    Fixes #155

[33mcommit b3dd6334a0a4abb1353e08a238880dbde5cab94f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 19:44:27 2016 +0800

    Add LO-StaticAnalysis

[33mcommit 68425842a8ac50d7ee772b2fb6396d4e3ff75b92[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 19:06:08 2016 +0800

    Add LO-DesignPatterns

[33mcommit fe8f137369db6548c4bfa59aa6da80632b8da5ae[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 18:11:38 2016 +0800

    Add LO-AutomatedGuiTesting

[33mcommit 0f92d5f96587a095ca19e5089a94be6d128e1734[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 17:55:09 2016 +0800

    Add LO-SystemTesting

[33mcommit c73bd06b3eaee4725dbadaf36edc5d23f82459b6[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 17:44:44 2016 +0800

    Fix checkstyle warning for Parser

[33mcommit d9831a20d159837733146de19454d2e4ac741f03[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Oct 16 17:39:57 2016 +0800

    Add LO-IntegrationTests

[33mcommit a28e9892d5185970098181ecf4dcf93c41815b1c[m
Author: Thien Nguyen <thiennguyen1993@gmail.com>
Date:   Sun Oct 16 13:30:10 2016 +0800

    [138] User can add email, address, tags in any order

[33mcommit 2034f1740c8d85b01835ec7241743c5c507d9935[m
Author: Joshua Lee <me@jolly.sg>
Date:   Sat Oct 15 15:39:02 2016 +0800

    [91] Separate CommandBox and ResultsDisplay
    
    Separate CommandBox and ResultsDisplay #91

[33mcommit 1927239e91a307bea7821f9ca5b96c5debf95601[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 15:18:31 2016 +0800

    Fix link to StringUtil

[33mcommit ba7205071e402ab4e7b2035f23f5ae1b502d3b5f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 15:16:46 2016 +0800

    Refine LO-TestCaseDesignHeuristics

[33mcommit daa496f6efac093e566451e6a2401739fdfb38f6[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 14:17:31 2016 +0800

    Fix broken link in LOs

[33mcommit 9941eabb4bec0b081212312ba86e64a4608c5010[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 14:14:36 2016 +0800

    Add  LO-TestCaseDesignHeuristics

[33mcommit 7b432582f6d4bd2cf8344bc8d8f01de80da0a474[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 13:08:52 2016 +0800

    Fix checkstyle problems

[33mcommit 8dd845ff7ad1762b8cba9cf00c17731f4815f1f6[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 12:47:27 2016 +0800

    Optimize StringUtil::containsWordIgnoreCase

[33mcommit 38a5a4dd871a6f58c673131992d68b9675ff6fba[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 13 09:53:08 2016 +0800

    Add tests for StringUtil::containsWordIgnoreCase

[33mcommit 5a6f6498876b842202966249512e1a24d347311d[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Wed Oct 12 23:57:24 2016 +0800

    [50] Set up check style

[33mcommit 7359b0bc913aeaee57b5863a12d562a418f07e17[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 12 15:16:32 2016 +0800

    Add test case design info to StringUtilTest::isUnsignedPositiveInteger

[33mcommit 831c819aacea622f5f2245a97beb4c1d53d75836[m
Author: You Liang <youliang@u.nus.edu>
Date:   Wed Oct 12 16:36:29 2016 +0800

    [133] Add a GUI test to test the error dialog
    
    * Added test case for error dialog.
    
    * fix typo
    
    * fix typos
    
    * change to getNode
    
    * renamed method names and add in comments

[33mcommit 4e2f1695f401f5e06f7652af54007fb51034b7a7[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 12 14:53:15 2016 +0800

    Add LO-CodeCoverage

[33mcommit 7c481930df6a69fb6a08a036b9e4ee0bed6135bc[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 12 14:22:02 2016 +0800

    Fix broken link to LO-DefensiveCoding

[33mcommit ef2543e16c999b3b647731410bf0495513d83bec[m
Author: Joshua Lee <me@jolly.sg>
Date:   Fri Oct 7 17:34:46 2016 +0800

    [95] Reduce duplication between ConfigUtil and JsonUserPrefsStorage

[33mcommit 76463e67b1bd1bd644a5d9d98197eb5e59425fc1[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Oct 6 19:10:09 2016 +0800

    Fix broken link in Dev Guide ToC

[33mcommit 386c3c108ff4a554d43a8ad38b8be6d56f6d9fcc[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 5 15:11:57 2016 +0800

    Add troubleshooting tips for tests

[33mcommit 239bcc15a1d244a1655b06b9f68e645176e310e8[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Oct 5 14:31:36 2016 +0800

    Add troubleshooting help to DevGuide

[33mcommit 0184f84e138a6b2e41b719be12846e5715c6159e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Oct 4 14:51:57 2016 +0800

    Remove extra spaces in LO-DefensiveCoding

[33mcommit 3092267187fba507bed344055c782e1c68c16efc[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Oct 4 14:50:39 2016 +0800

    Add ToC to new LOs

[33mcommit b550d0b7ca26f2851e9dc74a595a563118dcf218[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Oct 4 14:44:08 2016 +0800

    Add LO-EventDriven etc.

[33mcommit 1293b88125d56dd1f647d0b9b775855f1dfdbfb8[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Oct 3 11:34:40 2016 +0800

    Remove redundant comment lines in GuiTest

[33mcommit c31c5f5c517f63d566999ab121d57d01ac08ef88[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Oct 1 19:10:56 2016 +0800

    [134] Increase test coverage in storage
    
    * Add test to cover save/read to default path
    
    * Fix typo in JsonUserPrefStorage
    
    * Add dependency injection constructor for StorageManager
    
    * Fix broken tests due to wrong folder name
    
    * Add test to check data saving exception
    
    * Add test for StorageManager::getAddressBookFilePath()

[33mcommit 75942c90c04ff0469d5bb26873b85cd094f37797[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 23:47:46 2016 +0800

    [132] Add some missing util tests (#132)

[33mcommit 3f7ea164ee6ec52ccf98c7e9f37510cb6f7d935c[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 22:38:10 2016 +0800

    Add SD for delete person within Logic

[33mcommit 0c3fb87fdd35afd7327b52b87cec8185c58f7e7b[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 22:15:38 2016 +0800

    Add missing dependency in Logic CD

[33mcommit b378db4929ec8bdd3d16c46886498170d32b2ce8[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 22:13:19 2016 +0800

    Add missing line break to DevGuide

[33mcommit 7c38bbd88e4bb1a0b633577e4f5b151887bef77c[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:58:23 2016 +0800

    Give more details about the command format

[33mcommit b69bf61fea721d590ac2c3d0ed995f6e903e2dbd[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:52:19 2016 +0800

    Fix typos in User Guide

[33mcommit 10c2b39bad1c3f2b9a5ac3639d7e710526d28055[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:44:30 2016 +0800

    Fix broken link to releases

[33mcommit 22932cec056d9d65d5786b2f4cccd3c8fc9c2fbf[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:42:31 2016 +0800

    Add releases link

[33mcommit e2be60c946e0eb25e79cadd2f6c9370c9b1749d2[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:12:12 2016 +0800

    Fix typos in UsingGradle.md

[33mcommit 2eaae0831d95a897471dfe72648618c5a916c6ad[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:04:39 2016 +0800

    Add Build Automation heading

[33mcommit fd165514cdf4dbebe31c12af006856b59692d4a8[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 21:01:57 2016 +0800

    Add Dev Ops heading

[33mcommit 05f8c18b8c4bb60de0de2b0962e89c5eb5c26ecc[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 20:58:16 2016 +0800

    Add missing # in Dev Guide

[33mcommit 651d56357862b7e26daf8f265847d1747e003bb6[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 20:56:09 2016 +0800

    Fix typos in DevGuide

[33mcommit e7b090ed2f2a5840fd5f51a4fd0ee3fb7e3dd745[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 09:37:00 2016 +0800

    Mention auto-changed settings files

[33mcommit 1e5fe333e134aa90e128e160eaed9a149d196982[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 09:31:59 2016 +0800

    [131] Code quality tweaks (#131)
    
    * Rename ShowHelpEvent
    
    * Fix comment problems

[33mcommit 3930af40204b34906c67f8eb59a09f8f2e6fbacf[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 30 09:31:42 2016 +0800

    [130] Tweak Gradle preferences file (#130)

[33mcommit f779f77dac7e7958ad4c7df081d96110844ac6e4[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Sep 30 09:00:33 2016 +0800

    Added photo for Martin.

[33mcommit c65c6ecacd796fc33d871c6fff0473bb0734a0a9[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 22:52:35 2016 +0800

    Warn that set up can take a long time.

[33mcommit d3f05f521093577f079bef10436848b2c3c6cbce[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 20:16:54 2016 +0800

    Increase photo display size

[33mcommit 540f2d509f31966fd644451df103f07da6ce3768[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 20:15:14 2016 +0800

    Fix png -> jpg

[33mcommit 914eaa6efb348671bbb40407d7ff71cd7273029b[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 20:03:12 2016 +0800

    Add dev photos
    
    Fixes #119

[33mcommit 2bdfca48baaeb10fbba9cf45a5d779f0e2e04a72[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 19:51:29 2016 +0800

    Fix typo in .gitignore /data/

[33mcommit e85c3d76edab3d79fd282c9afec7f1ee94c6c7f2[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 19:47:38 2016 +0800

    [103] Document that index must be a positive integer (#129)

[33mcommit 6fc3b166ab6b10bc18568eb5c2ed829666df72a5[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 19:33:51 2016 +0800

    [128] Tweak logging (#128)
    
    * Add prefixes to important log messages
    
    * Tweak event handling logs
    
    * Update DevGuide about logging and config

[33mcommit 0f217ae2aaf3ec66ac7af4a8e42abd5aab45ce60[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 17:30:56 2016 +0800

    Update DevGuide to match SD

[33mcommit 36549e7feedcb5fd8fa53ac2ebe4675204032e1e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 29 17:26:21 2016 +0800

    Update DeletePerson SD to show UI update

[33mcommit 822552a7760a3051777f44b35f8572e594639a89[m
Author: Joshua Lee <me@jolly.sg>
Date:   Thu Sep 29 09:54:26 2016 +0800

    Updated badges

[33mcommit 7875c84f9c55356bab781bd7c1c6aced92645639[m
Merge: 241ca320 ed1b1285
Author: Joshua Lee <me@jolly.sg>
Date:   Thu Sep 29 09:44:23 2016 +0800

    [121] Increase test coverage

[33mcommit ed1b128561bd9ec3c47d089bb99845524f3c38f4[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 28 20:36:35 2016 +0800

    removed unused code

[33mcommit 221d9962dae0e2dfcef629c2526539dc38fc1fae[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 28 17:14:41 2016 +0800

    removed OsDetector and all related methods

[33mcommit 241ca32006dab9e4c58189e306f5a3b80463d3cc[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Wed Sep 28 22:30:20 2016 +0800

    [122, 126] Set rolling file for logging

[33mcommit 4b091a401609b1672a363913d7ab00f26da11814[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 20:20:24 2016 +0800

    Fix switch indentation

[33mcommit 1f1e9821309fcea6bf8f4d72fcfb079d3064ed85[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 20:13:03 2016 +0800

    [111] Create sandbox folder if it doesn't exist (#125)

[33mcommit 91b1c0c2dca92726ba2170c9dda87bee41efbe99[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 19:36:51 2016 +0800

    Add clarification about enabling assertions
    
    Fixes #105

[33mcommit ee4cc48307f30c9511c367082f20920e913bdc53[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 19:38:20 2016 +0800

    [112] Rename unitTests -> nonGuiTests (#124)

[33mcommit e49a96ca1315f68b956dfe79f0298085de6f4b7f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 18:21:43 2016 +0800

    Add ProductSurvey section
    
    Fixes #120

[33mcommit c5bbb3ec5d3f46513c91260aed6aa40690344a98[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 28 13:00:17 2016 +0800

    [118] Remove IncorrectCommandResult (#118)
    
    * Rename events package controller -> ui
    
    * Remove IncorrectCommandResult

[33mcommit 1e199b60fe885f54dc0ff97bee086c5279b75d77[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Sep 27 23:07:47 2016 +0800

    Add contributors Akshay and Sam

[33mcommit 9744f5e306c3b965e36d86e7175b8337545ae616[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Sep 27 23:04:33 2016 +0800

    Start LearningOutcomes.md

[33mcommit 9686528b6bbac4bd8317dbf89ee42876cfa38fdb[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Sep 27 22:55:36 2016 +0800

    [94] Fix compiler warnings (#117)

[33mcommit daf5657bc565e27f64b7b27d2c441c670500d766[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Sep 27 22:29:53 2016 +0800

    [115] Move event handler registration to child class

[33mcommit 5f6299dc8277789c71785d286176a942eba4cd86[m
Author: Sam-Mauris Yong <mauris@users.noreply.github.com>
Date:   Tue Sep 27 15:21:48 2016 +0800

    [98] Implement 'Last updates timestamp' feature (#113)
    
    Implement 'Last updates timestamp' feature #98

[33mcommit feecceffc94bac107dc927e99fc70d063b2bfb28[m
Author: Akshay Narayan <okkhoy@gmail.com>
Date:   Mon Sep 26 15:53:20 2016 +0800

    [99] remove "(private)" in readonlyperson.java (#100)

[33mcommit 177844fa34ec87ad0ab0f83581fd82f8815f2d4b[m
Author: Akshay Narayan <okkhoy@gmail.com>
Date:   Mon Sep 26 15:52:32 2016 +0800

    [96] Fix typos and grammar in DeveloperGuide.md and UsingGradle.md (#97)
    
    * fix typo in developer guide
    
    * fix typos/grammar in using gradle document
    
    * Remove "what are dependencies and" in Managing dependencies section

[33mcommit eaf53399684f379e42cd1e6aca9bd4c35f736e38[m
Author: Akshay Narayan <okkhoy@gmail.com>
Date:   Mon Sep 26 15:51:19 2016 +0800

    [101] remove [p] from add command help in the program (#104)

[33mcommit 7ed69a79809b55e172743dbb0d74b012565cf6e1[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 14:43:03 2016 +0800

    Fix typos in EventCenter description

[33mcommit c6530f9058c9ff9d718471edc8a1e184f4d2f94e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 12:44:08 2016 +0800

    10 KLoC -> 6 KLoC

[33mcommit fbdb57370df557b19286509562297ff091297d98[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 12:35:37 2016 +0800

    Move AddressBook change event handling to Storage

[33mcommit 8de0932e6d797664b63c4fe890ae9d7fbeb35e27[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 12:19:05 2016 +0800

    Update Logic CD

[33mcommit f046197dd2fe553c07e1c2fd470f3b059be86fd3[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 12:10:15 2016 +0800

    Correct activation bar in SD

[33mcommit 3a99016d854adac863dc730d351d429760c1c200[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 12:08:41 2016 +0800

    Update event handling SD

[33mcommit d21db896c1bd9511844a124ba060f249132c031f[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Mon Sep 26 11:45:36 2016 +0800

    [43] Add eclipse project files

[33mcommit 32fde569dbf6aa0a2701b627c589ea8a9a1ca21f[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 09:17:04 2016 +0800

    Fix typo in Windows command

[33mcommit 86f812bdd47f9b649a86566a07296e81aed0fdae[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 26 00:11:10 2016 +0800

    [93] Add dev guide details
    
    * Add architecture description
    
    * Add UI component description
    
    * Add Logic details
    
    * Add Model and Storage details
    
    * Add sequence diagrams
    
    * Refine SD description
    
    * Updated SD lifeline
    
    * Update pptx file with SDs

[33mcommit 29ad56db646046ee6994974a9537579fd74bc721[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Sep 25 21:21:38 2016 +0800

    Fix broken link in README.md

[33mcommit 2d77ca44460dd3e0c859896e277df0e36d4bed32[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Sep 25 21:19:06 2016 +0800

    Add UI image

[33mcommit df14561e1dd0ef40d42ffd5abb91e5f681c29f05[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Sep 24 20:00:47 2016 +0800

    Improve SLAP in MainApp

[33mcommit cc1974efad9d8072c6ffd13aecbc9a9b6beeba56[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Sep 25 18:28:55 2016 +0800

    [90] Complete dev guide
    
    * Add architechture diagram
    
    * UiManager: Remove unused method
    
    * Clean up Config class
    
    * Fix broken ConfigUtilTest
    
    * Config file : prefs... --> userPrefs...
    
    * Extract Model interface
    
    * Extract Logic interface
    
    * Extract Storage interface
    
    * Extract Ui interface
    
    * Add missing comments to Ui
    
    * Move UnmodifiableObservableList to commons.core
    
    * Make ModelManager keep an instance of UserPrefs
    
    * Rename classes related to Xml serializing
    
    * Remove Ui -> MainApp coupling
    
    * Add data folder to .gitignore
    
    * Fix compile error
    
    * Add Archi and component diagrams
    
    * Tweak image size

[33mcommit 51cefc33e1a1c895286444810946c81655d94591[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Sep 24 19:50:01 2016 +0800

    Remove GUI unit tests
    Fixes #66

[33mcommit 58d8591d43eda5687859e77a4dbf751fc509ee87[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sat Sep 24 19:38:51 2016 +0800

    [89] Refine storage
    
    * Remove unused UserPref parameter
    
    * Add StorageManager::readConfig()
    
    * Extract ConfigStorage
    
    * Assert config file path is not null
    
    * Add ConfigStorage::save()
    
    * Add test data folder ConfigStorageTest
    
    * Handle extra fields in the config file
    
    * Rename ConfigStorage::readConfig() -> read()
    
    * Remove unused constructor
    
    * Replace old Config storage methods with new ones
    
    * Add JsonPrefStorage
    
    * Add JsonPrefStorage::readPrefs()
    
    * Add JsonPrefStorage::savePrefs()
    
    * Connect JsonPrefStorage to StorageManager
    
    * Cleanup StorageManagerTest
    
    * Rename ConfigStorage -> JsonConfigStorage
    
    * Fix broken StorageManagerTest
    
    * Add Config::toString()
    
    * Rename methods in JsonConfigStorage
    
    * Config: keep preference file location as string
    
    * Add XmlAddressBookStorage
    
    * Remove *.xml from .gitignore
    
    * Add read/save methods to XmlAddressBookStorage
    
    * Reorder StorageManager methods
    
    * Eliminate Supplier/Consumer use in StorageManager
    
    * Remove unused SaveDataRequestEvent
    
    * Remove unused code from StorageManager
    
    * Rename LocalModelChangedEvent
    
    * Remove SavePrefsRequestEvent
    
    * Rename File Saving/Opening exception events
    
    * Rewire dependencies from UiParts to other components
    
    * Tidy up MainApp
    
    * Decouple StorageManager from Config
    
    * Add missing tests to StorageManagerTest
    
    * Remove unused static methods in StorageManager
    
    * Add AddressBookStore interface
    
    * Implemented AddressBookStorage interface
    
    * Add UserPrefsStorage interface
    
    * Add missing comments to StorageManager
    
    * Move JsonConfigStorage to ConfigUtil

[33mcommit 814d758a4ba69e7b19f7509bed897fcf37610d45[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Fri Sep 23 00:15:18 2016 +0800

    [88] Refine commons
    
    * Split commons into core and util
    
    * Move ComponentManager
    
    * Make LogicManager and Ui to extend ComponentManager
    
    * Rename Ui UiManager
    
    * Move exceptions inside commons
    
    * Move events inside commons package
    
    * Rename EventManager
    
    * Rename LogManager and LogManager

[33mcommit 3bf3067994fcf29fff1dafaaf0e4971afa524cdd[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 22 23:30:41 2016 +0800

    [86] Refine model
    
    * Delete dead code
    
    * Remove unused Config parameter
    
    * Remove ReadOnlyAddressbook interface from ModelManager
    
    * ModelManager: Remove dead code
    
    * ModelManager: remove extra comments
    
    * ModelManager: add missing comments
    
    * ModelManager: Remove updateStorage()
    
    * Move getEmptyAddressBook() to AddressBook
    
    * Refined ModelManager API for filtered list
    
    * Refine comments
    
    * Remove unused UniqueData class

[33mcommit 92bc32b631c62041625a021719adf7c280711570[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Thu Sep 22 18:39:27 2016 +0800

    [85] Refine logic and parser
    
    * Remove dead code, narrow scope
    
    * Removed Parser -> Model dependency
    
    * Move filtering to ModelManager
    
    * Mover parser and commands inside logic package
    
    * Remove dead code from Command classes
    
    * Rename Logic -> LogicManager

[33mcommit 0f49d497dd200f1233996b4da39d4d562f3c23cf[m
Author: You Liang <youliang@u.nus.edu>
Date:   Thu Sep 22 09:48:40 2016 +0800

    [24] Rename controller -> ui

[33mcommit 3a7f6c9891c6bb9d57d2748db37a1ef2910329c4[m
Author: You Liang <youliang@u.nus.edu>
Date:   Thu Sep 22 09:31:34 2016 +0800

    [70] Add GUI test for help window
    
    * HelpWindow Test
    
    * remove logging
    
    * remove return param
    
    * added delay after opening a help window
    
    * removed accelerator testing. as headless doesn't work
    
    * refocus on main app after closing help window
    
    * extra space
    
    * fix code style issue

[33mcommit 979d2f8e167b2b1afcab461bfeee9a2a63bdb7cf[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 23:44:19 2016 +0800

    [83] Cleanup utils and merge with commons
    
    * Remove JavaVersion
    
    * Remove DateTimeUtil
    
    * Remove unused messages from Message
    
    * Remove PlatformExecUtil
    
    * Rename Utils
    
    * AppUtil: Removed dead code
    
    * Remove ManifestFileReader
    
    * Move UnmodifiableObservableList
    
    * Rename util -> commons

[33mcommit 3625a1a9952a511930f01e9453cf902851828e32[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 23:01:44 2016 +0800

    [81] Add a Logic class
    
    * Add Logic class
    
    * Remove MainWindow -> Parser coupling
    
    * CommandBoxTest -> LogicTest

[33mcommit 64e4fba535dacdab162c5c5c6ce3092b4181f629[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 21:37:56 2016 +0800

    [80] Refine browser to be a UiPart
    
    * Make Browser a UiPart
    
    * Move BrowserPanel to controller package
    
    * Refine BrowserPanel
    
    * fix anchor issue

[33mcommit cf8eb864bf4ac8cb8c710f5fdd3ef03fbfa7c98e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 19:13:15 2016 +0800

    [79] Further cleanups to UI
    
    * Rename PersonCardController
    
    * PersonCard: remove dead code
    
    * Make PersonCard a UiPart
    
    * UiPartLoader: add missing comments
    
    * ResultDisplay: remove dead code
    
    * HelpWindow: Remove dead code
    
    * MainWindow: tweak comments
    
    * Remove unused event classes
    
    * Use events to load page when list selection changes
    
    * Make PersonListViewCell an inner class
    
    * PersonListPanel: Use raise instead of post
    
    * Move ShowHelpEvent to events/controller
    
    * Remove KeyBindingEvent
    
    * ShowHelpEvent: add missing header comment

[33mcommit 57c151cc9c0ea3cdf72cfce8b7fc86915d20ca0c[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 16:30:22 2016 +0800

    [73] Cleanup UI
    
    * Rename BaseUiPart
    
    * Clean up UiPartLoader
    
    * Clean up UiPart
    
    * Remove dead code from Ui
    
    * Add more detailed error reporting during UI loading
    
    * Move event handling code to the bottom
    
    * Refine MainWindow::load()
    
    * Refine MainWindow
    
    * Auto-detect placeholders
    
    * Remove About Dialog
    
    * Remove local variable MainWindow::ui
    
    * Refine StatusBarFooter
    
    * Reorder code in PersonListPanel
    
    * Remove multiple selection mode
    
    * PersonListPanel: Remove dead code

[33mcommit c6799bfaf200a0fd8af50d2751353b5e9ec6a581[m
Author: Leow Yijin <leowyijin@gmail.com>
Date:   Wed Sep 21 15:19:55 2016 +0800

    [39][76][77][78] Bring logic tests from level 3 (PR #74)
    
    * separated ui setup from other component dependencies setup in MainWindow
    
    * tightened return type for browsermanager's getBrowserView
    
    * changed resultdisplay values to be accessible without javafx
    
    * separated commandbox logic from javafx ui component
    
    * changed components to expose parts for testing and modularity
    
    * ported over level 3 model's new utility features
    
    * ported model equality comparisons
    
    * ported logictest utility methods and updated implementation to match level 4 with ui
    
    * restructured packages inside model to actually make sense
    
    * ported testdatahelper from level3
    
    * ported level3's changes where parser would not instantiate any model objects
    
    * added simple commandbox tests and updated allowed name format
    
    * REMOVED PRIVATE FEATURE FROM MODEL
    
    * fix undetected merge conflicts
    
    * commandboxtest for add commnad
    
    * minor renaming and refactoring of methods in ui and model
    
    * added list and delete tests
    
    * added find tests
    
    * added select tests

[33mcommit 843d0c6924068967d682ecc9a9480dfae3b894d9[m
Author: Leow Yijin <leowyijin@gmail.com>
Date:   Wed Sep 21 12:54:14 2016 +0800

    update .gitignore

[33mcommit adde2fc45c378791fd0d7cc26f4c1a51594e9af4[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Wed Sep 21 10:53:21 2016 +0800

    [71] Cleanup gui tests

[33mcommit 3eeda193204ff169fb5579e0e977c8eed6a70301[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Tue Sep 20 18:01:16 2016 +0800

    [65] Clean up build.gradle

[33mcommit b9e4c32cdf2b1f926685459615a6ca8f471a5b09[m
Author: Joshua Lee <me@jolly.sg>
Date:   Tue Sep 20 17:53:36 2016 +0800

    [72] updated UserGuide.md

[33mcommit fc1c3bb84e389b013d078274ed22a1c4ee511bff[m
Author: Joshua Lee <me@jolly.sg>
Date:   Tue Sep 20 16:11:41 2016 +0800

    [11] UserGuide now loads in the help window

[33mcommit 295e974c7d4d5d9d1d9cef8e26dab034c5a7dcd6[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Tue Sep 20 13:36:23 2016 +0800

    [68] Flatten doc structure

[33mcommit f060198b6dd66958f8a66500c4b3d0d458d91d6f[m
Merge: 010d72d6 362af075
Author: Joshua Lee <me@jolly.sg>
Date:   Tue Sep 20 00:11:39 2016 +0800

    [46] support select command

[33mcommit 362af07525b7696bd91e05bbd7d3ef0d380dc72e[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 14 20:47:17 2016 +0800

    implemented select command

[33mcommit 010d72d609226740ac258881656f07fda9152f1e[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Mon Sep 19 21:13:30 2016 +0800

    [53] GUI tests: use setText instead of write

[33mcommit d1e4d36bfd5f49ad1a67e6487154dd42f162c994[m
Author: You Liang <youliang@u.nus.edu>
Date:   Mon Sep 19 19:04:11 2016 +0800

    [41] Search substring will return incorrect feedback message

[33mcommit 6544d4b74b097356cee7d1870f6600db839bbbfc[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Mon Sep 19 18:03:52 2016 +0800

    [62] Gradle is not running unit tests

[33mcommit 377cfc16a5919c3bb8367973b24482cc809649f0[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Sep 18 16:34:14 2016 +0800

    Add build status badge to README.md

[33mcommit ac70505954f26f6fccbbeb7635283d1f5ed4be22[m
Author: You Liang <youliang@u.nus.edu>
Date:   Sat Sep 17 21:55:39 2016 +0800

    [56] ListAll and clear command tests

[33mcommit 9bf69ec997d276f4d0dfa2c9c2102645f449c99f[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Sep 16 13:10:05 2016 +0800

    Fix to alignment in travis documentation.

[33mcommit 96fa3d5746f5bcce625f7ea375d1e6b8656e493e[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Sep 16 13:08:29 2016 +0800

    Added missing documentation images.

[33mcommit 7127241001afea8123a38dd6ea1d2596d7406a06[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Fri Sep 16 13:05:18 2016 +0800

    [49] Setup CI and ensure tests are passing

[33mcommit 95055c85a26c71d4296652adcc079a43a1eb1b0a[m
Author: m133225 <m133225@hotmail.com>
Date:   Thu Sep 15 10:51:25 2016 +0800

    Changed result display to text area element instead to allow for scrolling if text is too long.

[33mcommit 4653f0e3682af178e8ea0d5c70f9e2dc9a51dca9[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Wed Sep 14 22:14:25 2016 +0800

    [48] Tweak GUI to emphasize active components

[33mcommit 126d62a4ef96e296922a325adcad4ce90e8a6929[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 14 20:22:16 2016 +0800

    fixed COMMAND_INPUT_FIELD_ID for guitests

[33mcommit c9f22204ce46453ae220f88a2ca387263986f47b[m
Merge: 5e630cf5 b60fc021
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 14 16:49:03 2016 +0800

    [37] clear command box after executing command

[33mcommit b60fc021b720468582bb1348e468d41be3fff481[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 14 16:47:33 2016 +0800

    cleared command box after successfully executing command

[33mcommit 5e630cf5f4a31ebae9913f64f113c3b96ea4761f[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Wed Sep 14 11:52:57 2016 +0800

    [23] Extract CommandBox as a separate UI component

[33mcommit 7eb03772c52564c3ea28486dc3fd74c7e65dd675[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Tue Sep 13 21:47:19 2016 +0800

    [25] Increase height of StatusBarHeader

[33mcommit 623480bb301d16ed4b1476aa508fc4a78f874c44[m
Author: You Liang <youliang@u.nus.edu>
Date:   Tue Sep 13 21:21:37 2016 +0800

    [33] Implement FindPersonsByWordsInNameCommand GuiTest

[33mcommit 9f503e08158441aaf60e4d60f415fb7cea871036[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Sep 9 15:13:15 2016 +0800

    Fixed logger output to log file not using the specified custom level.

[33mcommit 03849f2c11d4d6784a03ceaa78fcf3da03cb6a74[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Sep 9 12:59:05 2016 +0800

    Removed unnecessary status bar and added promptText for command text field.

[33mcommit 6d8c91f00b6d145c1300afe766fec22f146d8bc7[m
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Fri Sep 9 12:52:20 2016 +0800

    [26] Use util.logging's logger and update logging documentation

[33mcommit 62fa36850ddd5610ff8eb066b3fa24addb974a12[m
Merge: 355209cf 23e53fb4
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Sep 7 16:50:47 2016 +0800

    [22] support Help command

[33mcommit 23e53fb4039d02fb2403538bc073452d34ce3026[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Aug 31 17:48:44 2016 +0800

    implemented help command

[33mcommit 355209cf87f63fa48c2f75adc1199b2fcab5941b[m
Merge: 106dc15a 129fd977
Author: ndt <thiennguyen1993@gmail.com>
Date:   Mon Sep 5 00:20:16 2016 +0800

    [31] Delete command GUI tests

[33mcommit 129fd977cae7a2ed093753363ae0faab8d5243dd[m
Author: ndt <thiennguyen1993@gmail.com>
Date:   Sun Sep 4 19:05:19 2016 +0800

    Rename delete test cases

[33mcommit 106dc15ab0c4cc5f6f1d95816dae76d1432c9883[m
Author: You Liang Lim <a0125975@u.nus.edu>
Date:   Sun Sep 4 20:14:01 2016 +0800

    remove test prefix

[33mcommit 3346f95f0831a775a11a5f0fbb73a553a012244f[m
Author: ndt <thiennguyen1993@gmail.com>
Date:   Sun Sep 4 16:13:10 2016 +0800

    Add gui tests for delete command

[33mcommit b4e81348ec5a7188aaa061fed66884dc8aaf146d[m
Author: You Liang <youliang@u.nus.edu>
Date:   Sat Sep 3 21:39:03 2016 +0800

    Add AddPersonCommand test cases (#30)
    
    * Add AddPerson test cases
    
    modification of the guihandles
    
    and slight modification of the fxml
    
    * remove author

[33mcommit 6fb2658e18b92e0cd4d97bc9e7dc28b8e6bce2ba[m
Author: You Liang <youliang@u.nus.edu>
Date:   Thu Sep 1 23:20:27 2016 +0800

    Fix test case failure

[33mcommit d1691eb3e04bd50db9daa361239626d4eb329946[m
Merge: 386dffdf f2559db2
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Wed Aug 31 10:26:24 2016 +0800

    [7] Add gradle-related documentation

[33mcommit f2559db2e3b562f912a2f69830a1581fc7ba345e[m
Author: m133225 <m133225@hotmail.com>
Date:   Wed Aug 31 10:25:17 2016 +0800

    Minor refactoring and corrections.

[33mcommit dc6b73784b5a93ba7345d7e11c9b584c4207df23[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 18:20:33 2016 +0800

    Updated documentation for building the jar file.

[33mcommit 750b82871a75d92e727c13abd3be8a225a182793[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 18:15:51 2016 +0800

    Added shadowjar dependency and task to compile the application into a standalone JAR.

[33mcommit 28a1efe9fc27609f2ecfd9c9e30fee7e0562437f[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 17:30:49 2016 +0800

    Minor refactoring and removal of outdated testing documentation.

[33mcommit b774039458ded6da6ed2c373c6d8dd32455963f0[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 17:18:59 2016 +0800

    Some refactoring and moving of instructions to more appropriate places.

[33mcommit 2c03b8ff6a40a01ea3377c45f1f474e0baa22f9c[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 17:08:23 2016 +0800

    Extracted managing dependencies into a separate markdown and linked the intro markdown to them.

[33mcommit 6a9ed284d0c0ca9a6e25f9efdfdd7a9e598e8bd6[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 16:59:58 2016 +0800

    Added pictures to explain how to see the status of the travis build. Moved travis configuration into a separate folder since it is not part of gradle.

[33mcommit 53fe17afcb47af273e9629b2fca92275695b2418[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 29 16:48:19 2016 +0800

    Added back coveralls task and plugin.

[33mcommit 6fe47b3441bccc6f5dd0860738fe3b520849f40e[m
Author: m133225 <m133225@hotmail.com>
Date:   Fri Aug 19 14:53:01 2016 +0800

    Some documentation about learning basics of gradle.

[33mcommit 386dffdf2ad3453c7ac73cb7d93694c270f4ebae[m
Author: You Liang Lim <a0125975@u.nus.edu>
Date:   Fri Aug 26 23:52:05 2016 +0800

    prevent key binding from being triggered

[33mcommit e5b340676f18d23b5bab3dfe30fd316d633ac9d9[m
Author: You Liang <youliang@u.nus.edu>
Date:   Fri Aug 26 23:48:23 2016 +0800

    [18] Implement FindPersonsByWordsInNameCommand
    
    * added filteredList into modelManager
    
    * added qualifier
    
    * minor refactoring
    
    * implemented unique list
    
    * added ListAllPersonsCommand
    
    * added back status bars
    
    * added exit app event. and remove main app dependency.
    
    * clean up

[33mcommit a9b45254cb2f0cbf5f055a075c8905b2f7551e16[m
Merge: 7ccc4a77 2137a96c
Author: ndt <thiennguyen1993@gmail.com>
Date:   Thu Aug 25 20:35:11 2016 +0800

    [15] Implement DeleteCommand

[33mcommit 2137a96c30aaf2c971ec5e6ba44a0cb433db8072[m
Author: ndt <thiennguyen1993@gmail.com>
Date:   Thu Aug 25 18:14:10 2016 +0800

    Add displayed index to list cell card

[33mcommit b8ed0900daea2e5e2f771cd4453099a9eaa6ce19[m
Author: ndt <thiennguyen1993@gmail.com>
Date:   Thu Aug 25 18:06:22 2016 +0800

    Implement delete command

[33mcommit 7ccc4a77182abfe41817b57a6e7a6fb2eb3bc879[m
Author: You Liang Lim <a0125975@u.nus.edu>
Date:   Wed Aug 24 17:14:17 2016 +0800

    minor bug fixes. Show person tags and ClearAddressBookCommand Implementation

[33mcommit 9ffcef4d1e3b09a433153f5e59148a3803075156[m
Author: Joshua Lee <me@jolly.sg>
Date:   Wed Aug 24 17:06:14 2016 +0800

    added .DS_Store to gitignore

[33mcommit bf265bd321dce10ad8d2cfc0203aca8f0d4271c3[m
Author: You Liang <youliang@u.nus.edu>
Date:   Wed Aug 24 16:57:46 2016 +0800

    [8] Integrate parts from level 2.
    
    * integrate from level 2. compilable. Not yet fully integrated.
    
    * Make add command workable, but there is some issues in marshalling into local storage file.
    And fix some bugs
    
    * Fixes marshalling issue, forgot to call LocalModelChangedEvent

[33mcommit a2660a0f7b67e0796a57eed505fdc6637f9d1847[m
Author: m133225 <m133225@hotmail.com>
Date:   Sat Aug 20 13:50:08 2016 +0800

    Some refactoring and cleanup in the ui classes.

[33mcommit 57c1f8fabdf8f52261fffa8ffeed43aafdba146f[m
Merge: 80183799 b69d2df9
Author: Martin Choo <m133225@users.noreply.github.com>
Date:   Sat Aug 20 13:37:33 2016 +0800

    [5] Change to code sample GUI

[33mcommit b69d2df97b83c749bffe79b2aece9ac9c78cbdeb[m
Author: m133225 <m133225@hotmail.com>
Date:   Sat Aug 20 13:36:48 2016 +0800

    Minor refactoring and renaming of css file.

[33mcommit e3187d227cf620a523245236d59673c96b7a08df[m
Author: m133225 <m133225@hotmail.com>
Date:   Thu Aug 18 01:07:59 2016 +0800

    Fixed padding for horizontal scroll bar.

[33mcommit f79d2f23c5961e5ee36c1fea104fd42b81af587d[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 23:56:50 2016 +0800

    Slight tweak to scroll bar padding.

[33mcommit 98ab07df9fd97120bc128bd85b6b3372dbaa7d35[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 23:45:39 2016 +0800

    Removed the navigation arrows and customised the thickens of the scroll bar.

[33mcommit e8e19d05143ff5a6d86a2dc400aa845575cd71f3[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 21:08:56 2016 +0800

    Revert back to dark theme with a couple of changes and improvements to the GUI.

[33mcommit 174b1d01aaf36c9b7a8e37315f00174ab8034ad5[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 19:49:49 2016 +0800

    Changed to blue theme and other GUI optimizations.

[33mcommit 70068b1ab2fd10eeb97568c48eacfa5d74c339c5[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 16:18:00 2016 +0800

    Fixed default webpage width being too small after change in layout.

[33mcommit bba8f409d6719c80646c8ca7ca7f7ba8302951aa[m
Author: m133225 <m133225@hotmail.com>
Date:   Mon Aug 15 13:37:57 2016 +0800

    Updated GUI to the code sample colour and layout. Some minor tweaks will be required to make it nicer.

[33mcommit 80183799de10c6690a5b05722ea32925c26c1bed[m
Author: m133225 <m133225@hotmail.com>
Date:   Sat Aug 20 13:24:39 2016 +0800

    Fixed browser not loading profile page after ui restructure.

[33mcommit d96694832ac11cc75fdebd38bc7df632d8e9e8f0[m
Author: You Liang <youliang@u.nus.edu>
Date:   Thu Aug 18 19:19:48 2016 +0800

    [3] Restructure ui to reflect physical ui

[33mcommit df1119c3e1f88c3688639e794741f5181234415a[m
Author: m133225 <m133225@hotmail.com>
Date:   Wed Aug 10 11:01:26 2016 +0800

    Removed filtering and filter parsers altogether.

[33mcommit c940c8f61c513afe30b8db47b53efe9448735295[m
Author: m133225 <m133225@hotmail.com>
Date:   Wed Aug 10 10:32:46 2016 +0800

    Removed unused FileUtil methods.

[33mcommit 0414e21d54d8985fd41f1b353380b4939581ad5f[m
Author: m133225 <m133225@hotmail.com>
Date:   Tue Aug 9 20:39:17 2016 +0800

    Added coverage task back.

[33mcommit 5ce58c4ee734f57978205f057f84d539738abfe1[m
Author: You Liang <a0125975@u.nus.edu>
Date:   Mon Aug 8 21:45:40 2016 +0800

    Rename into seedu.address
    Clean up gradle build
    remove launcher
    
    Fixes #1
    Fixes #2

[33mcommit 7916322fad9d11ef3fa7ca67574062bb6de3e950[m
Author: You Liang Lim <a0125975@u.nus.edu>
Date:   Mon Aug 8 17:32:17 2016 +0800

    address book level 4 draft

[33mcommit 9db8290614e92ad72bc905cf80d6693b9eaae7fe[m
Author: Damith C. Rajapakse <damith@gmail.com>
Date:   Sun Aug 7 15:17:27 2016 +0800

    Initial commit
